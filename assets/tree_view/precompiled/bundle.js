"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement5(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext4(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef7(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext8(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState4(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef6(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback4(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId2() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement5.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext4;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef7;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback4;
          exports.useContext = useContext8;
          exports.useDebugValue = useDebugValue2;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect4;
          exports.useId = useId2;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect3;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo3;
          exports.useReducer = useReducer;
          exports.useRef = useRef6;
          exports.useState = useState4;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node2) < 0) {
                heap[index] = right;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React16 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React16.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment4 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment4:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString(value);
                }
              } else if (node2.value !== toString(value)) {
                node2.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString(value)) {
                node2.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React16.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles) {
            var style2 = node2.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node2,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument3 = outerNode.ownerDocument;
            var win = ownerDocument3 && ownerDocument3.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start = length2 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end = length2 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length2 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length2;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument3 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument3 !== null) {
                if (!ownerDocument3[listeningMarker]) {
                  ownerDocument3[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument3);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement5(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument3 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument3.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument3.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument3.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument3.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement5(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component = node2.type;
                    if (isContextProvider(Component)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React16.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment4) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment4) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion7 = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion7, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion7, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment4:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment4:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion7) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion7) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion7 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion7 | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment4, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/clsx/dist/clsx.js
  var require_clsx = __commonJS({
    "node_modules/clsx/dist/clsx.js"(exports, module) {
      function e(r2) {
        var o, t, f = "";
        if ("string" == typeof r2 || "number" == typeof r2)
          f += r2;
        else if ("object" == typeof r2)
          if (Array.isArray(r2))
            for (o = 0; o < r2.length; o++)
              r2[o] && (t = e(r2[o])) && (f && (f += " "), f += t);
          else
            for (o in r2)
              r2[o] && (f && (f += " "), f += o);
        return f;
      }
      function r() {
        for (var r2, o, t = 0, f = ""; t < arguments.length; )
          (r2 = arguments[t++]) && (o = e(r2)) && (f && (f += " "), f += o);
        return f;
      }
      module.exports = r, module.exports.clsx = r;
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/chainPropTypes.js
  var require_chainPropTypes = __commonJS({
    "node_modules/@mui/utils/chainPropTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = chainPropTypes;
      function chainPropTypes(propType1, propType2) {
        if (false) {
          return () => null;
        }
        return function validate(...args) {
          return propType1(...args) || propType2(...args);
        };
      }
    }
  });

  // node_modules/@mui/utils/deepmerge.js
  var require_deepmerge = __commonJS({
    "node_modules/@mui/utils/deepmerge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deepmerge4;
      exports.isPlainObject = isPlainObject;
      function isPlainObject(item) {
        return item !== null && typeof item === "object" && item.constructor === Object;
      }
      function deepClone(source) {
        if (!isPlainObject(source)) {
          return source;
        }
        const output = {};
        Object.keys(source).forEach((key) => {
          output[key] = deepClone(source[key]);
        });
        return output;
      }
      function deepmerge4(target, source, options = {
        clone: true
      }) {
        const output = options.clone ? {
          ...target
        } : target;
        if (isPlainObject(target) && isPlainObject(source)) {
          Object.keys(source).forEach((key) => {
            if (key === "__proto__") {
              return;
            }
            if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
              output[key] = deepmerge4(target[key], source[key], options);
            } else if (options.clone) {
              output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
            } else {
              output[key] = source[key];
            }
          });
        }
        return output;
      }
    }
  });

  // node_modules/@mui/utils/elementAcceptingRef.js
  var require_elementAcceptingRef = __commonJS({
    "node_modules/@mui/utils/elementAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      function isClassComponent(elementType) {
        const {
          prototype = {}
        } = elementType;
        return Boolean(prototype.isReactComponent);
      }
      function acceptingRef(props, propName, componentName, location, propFullName) {
        const element = props[propName];
        const safePropName = propFullName || propName;
        if (element == null || // When server-side rendering React doesn't warn either.
        // This is not an accurate check for SSR.
        // This is only in place for Emotion compat.
        // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
        typeof window === "undefined") {
          return null;
        }
        let warningHint;
        const elementType = element.type;
        if (typeof elementType === "function" && !isClassComponent(elementType)) {
          warningHint = "Did you accidentally use a plain function component for an element instead?";
        }
        if (warningHint !== void 0) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
        }
        return null;
      }
      var elementAcceptingRef = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
      elementAcceptingRef.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
      var _default = elementAcceptingRef;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/elementTypeAcceptingRef.js
  var require_elementTypeAcceptingRef = __commonJS({
    "node_modules/@mui/utils/elementTypeAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      function isClassComponent(elementType) {
        const {
          prototype = {}
        } = elementType;
        return Boolean(prototype.isReactComponent);
      }
      function elementTypeAcceptingRef3(props, propName, componentName, location, propFullName) {
        const propValue = props[propName];
        const safePropName = propFullName || propName;
        if (propValue == null || // When server-side rendering React doesn't warn either.
        // This is not an accurate check for SSR.
        // This is only in place for emotion compat.
        // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
        typeof window === "undefined") {
          return null;
        }
        let warningHint;
        if (typeof propValue === "function" && !isClassComponent(propValue)) {
          warningHint = "Did you accidentally provide a plain function component instead?";
        }
        if (warningHint !== void 0) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
        }
        return null;
      }
      var _default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef3);
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/exactProp.js
  var require_exactProp = __commonJS({
    "node_modules/@mui/utils/exactProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exactProp;
      var specialProperty = "exact-prop: \u200B";
      function exactProp(propTypes) {
        if (false) {
          return propTypes;
        }
        return {
          ...propTypes,
          [specialProperty]: (props) => {
            const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
            if (unsupportedProps.length > 0) {
              return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
            }
            return null;
          }
        };
      }
    }
  });

  // node_modules/@mui/utils/formatMuiErrorMessage.js
  var require_formatMuiErrorMessage = __commonJS({
    "node_modules/@mui/utils/formatMuiErrorMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = formatMuiErrorMessage;
      function formatMuiErrorMessage(code) {
        let url = "https://mui.com/production-error/?code=" + code;
        for (let i = 1; i < arguments.length; i += 1) {
          url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/@mui/utils/getDisplayName.js
  var require_getDisplayName = __commonJS({
    "node_modules/@mui/utils/getDisplayName.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getDisplayName;
      exports.getFunctionName = getFunctionName;
      var _reactIs = require_react_is2();
      var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
      function getFunctionName(fn) {
        const match2 = `${fn}`.match(fnNameMatchRegex);
        const name = match2 && match2[1];
        return name || "";
      }
      function getFunctionComponentName(Component, fallback = "") {
        return Component.displayName || Component.name || getFunctionName(Component) || fallback;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        const functionName = getFunctionComponentName(innerType);
        return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
      }
      function getDisplayName(Component) {
        if (Component == null) {
          return void 0;
        }
        if (typeof Component === "string") {
          return Component;
        }
        if (typeof Component === "function") {
          return getFunctionComponentName(Component, "Component");
        }
        if (typeof Component === "object") {
          switch (Component.$$typeof) {
            case _reactIs.ForwardRef:
              return getWrappedName(Component, Component.render, "ForwardRef");
            case _reactIs.Memo:
              return getWrappedName(Component, Component.type, "memo");
            default:
              return void 0;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/@mui/utils/HTMLElementType.js
  var require_HTMLElementType = __commonJS({
    "node_modules/@mui/utils/HTMLElementType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = HTMLElementType;
      function HTMLElementType(props, propName, componentName, location, propFullName) {
        if (false) {
          return null;
        }
        const propValue = props[propName];
        const safePropName = propFullName || propName;
        if (propValue == null) {
          return null;
        }
        if (propValue && propValue.nodeType !== 1) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
        }
        return null;
      }
    }
  });

  // node_modules/@mui/utils/ponyfillGlobal.js
  var require_ponyfillGlobal = __commonJS({
    "node_modules/@mui/utils/ponyfillGlobal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/refType.js
  var require_refType = __commonJS({
    "node_modules/@mui/utils/refType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var refType = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);
      var _default = refType;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/@mui/utils/capitalize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = capitalize;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage());
      function capitalize(string) {
        if (typeof string !== "string") {
          throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : (0, _formatMuiErrorMessage2.default)(7));
        }
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
    }
  });

  // node_modules/@mui/utils/createChainedFunction.js
  var require_createChainedFunction = __commonJS({
    "node_modules/@mui/utils/createChainedFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createChainedFunction;
      function createChainedFunction(...funcs) {
        return funcs.reduce((acc, func) => {
          if (func == null) {
            return acc;
          }
          return function chainedFunction(...args) {
            acc.apply(this, args);
            func.apply(this, args);
          };
        }, () => {
        });
      }
    }
  });

  // node_modules/@mui/utils/debounce.js
  var require_debounce = __commonJS({
    "node_modules/@mui/utils/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = debounce;
      function debounce(func, wait = 166) {
        let timeout2;
        function debounced(...args) {
          const later = () => {
            func.apply(this, args);
          };
          clearTimeout(timeout2);
          timeout2 = setTimeout(later, wait);
        }
        debounced.clear = () => {
          clearTimeout(timeout2);
        };
        return debounced;
      }
    }
  });

  // node_modules/@mui/utils/deprecatedPropType.js
  var require_deprecatedPropType = __commonJS({
    "node_modules/@mui/utils/deprecatedPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deprecatedPropType;
      function deprecatedPropType(validator, reason) {
        if (false) {
          return () => null;
        }
        return (props, propName, componentName, location, propFullName) => {
          const componentNameSafe = componentName || "<<anonymous>>";
          const propFullNameSafe = propFullName || propName;
          if (typeof props[propName] !== "undefined") {
            return new Error(`The ${location} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
          }
          return null;
        };
      }
    }
  });

  // node_modules/@mui/utils/isMuiElement.js
  var require_isMuiElement = __commonJS({
    "node_modules/@mui/utils/isMuiElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isMuiElement;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function isMuiElement(element, muiNames) {
        return /* @__PURE__ */ React16.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
      }
    }
  });

  // node_modules/@mui/utils/ownerDocument.js
  var require_ownerDocument = __commonJS({
    "node_modules/@mui/utils/ownerDocument.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerDocument3;
      function ownerDocument3(node2) {
        return node2 && node2.ownerDocument || document;
      }
    }
  });

  // node_modules/@mui/utils/ownerWindow.js
  var require_ownerWindow = __commonJS({
    "node_modules/@mui/utils/ownerWindow.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerWindow;
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      function ownerWindow(node2) {
        const doc = (0, _ownerDocument.default)(node2);
        return doc.defaultView || window;
      }
    }
  });

  // node_modules/@mui/utils/requirePropFactory.js
  var require_requirePropFactory = __commonJS({
    "node_modules/@mui/utils/requirePropFactory.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = requirePropFactory;
      function requirePropFactory(componentNameInError, Component) {
        if (false) {
          return () => null;
        }
        const prevPropTypes = Component ? {
          ...Component.propTypes
        } : null;
        const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
          const propFullNameSafe = propFullName || propName;
          const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
          if (defaultTypeChecker) {
            const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
            if (typeCheckerResult) {
              return typeCheckerResult;
            }
          }
          if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
            return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
          }
          return null;
        };
        return requireProp;
      }
    }
  });

  // node_modules/@mui/utils/setRef.js
  var require_setRef = __commonJS({
    "node_modules/@mui/utils/setRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = setRef;
      function setRef(ref, value) {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }
  });

  // node_modules/@mui/utils/useEnhancedEffect.js
  var require_useEnhancedEffect = __commonJS({
    "node_modules/@mui/utils/useEnhancedEffect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useEnhancedEffect2 = typeof window !== "undefined" ? React16.useLayoutEffect : React16.useEffect;
      var _default = useEnhancedEffect2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/useId.js
  var require_useId = __commonJS({
    "node_modules/@mui/utils/useId.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useId2;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var globalId = 0;
      function useGlobalId(idOverride) {
        const [defaultId, setDefaultId] = React16.useState(idOverride);
        const id = idOverride || defaultId;
        React16.useEffect(() => {
          if (defaultId == null) {
            globalId += 1;
            setDefaultId(`mui-${globalId}`);
          }
        }, [defaultId]);
        return id;
      }
      var maybeReactUseId = React16["useId".toString()];
      function useId2(idOverride) {
        if (maybeReactUseId !== void 0) {
          const reactId = maybeReactUseId();
          return idOverride != null ? idOverride : reactId;
        }
        return useGlobalId(idOverride);
      }
    }
  });

  // node_modules/@mui/utils/unsupportedProp.js
  var require_unsupportedProp = __commonJS({
    "node_modules/@mui/utils/unsupportedProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = unsupportedProp2;
      function unsupportedProp2(props, propName, componentName, location, propFullName) {
        if (false) {
          return null;
        }
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined") {
          return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
        }
        return null;
      }
    }
  });

  // node_modules/@mui/utils/useControlled.js
  var require_useControlled = __commonJS({
    "node_modules/@mui/utils/useControlled.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useControlled2;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useControlled2({
        controlled,
        default: defaultProp,
        name,
        state = "value"
      }) {
        const {
          current: isControlled
        } = React16.useRef(controlled !== void 0);
        const [valueState, setValue] = React16.useState(defaultProp);
        const value = isControlled ? controlled : valueState;
        if (true) {
          React16.useEffect(() => {
            if (isControlled !== (controlled !== void 0)) {
              console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
            }
          }, [state, name, controlled]);
          const {
            current: defaultValue
          } = React16.useRef(defaultProp);
          React16.useEffect(() => {
            if (!isControlled && defaultValue !== defaultProp) {
              console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
            }
          }, [JSON.stringify(defaultProp)]);
        }
        const setValueIfUncontrolled = React16.useCallback((newValue) => {
          if (!isControlled) {
            setValue(newValue);
          }
        }, []);
        return [value, setValueIfUncontrolled];
      }
    }
  });

  // node_modules/@mui/utils/useEventCallback.js
  var require_useEventCallback = __commonJS({
    "node_modules/@mui/utils/useEventCallback.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useEventCallback;
      var React16 = _interopRequireWildcard(require_react());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useEventCallback(fn) {
        const ref = React16.useRef(fn);
        (0, _useEnhancedEffect.default)(() => {
          ref.current = fn;
        });
        return React16.useCallback((...args) => (
          // @ts-expect-error hide `this`
          // tslint:disable-next-line:ban-comma-operator
          (0, ref.current)(...args)
        ), []);
      }
    }
  });

  // node_modules/@mui/utils/useForkRef.js
  var require_useForkRef = __commonJS({
    "node_modules/@mui/utils/useForkRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useForkRef4;
      var React16 = _interopRequireWildcard(require_react());
      var _setRef = _interopRequireDefault(require_setRef());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useForkRef4(...refs) {
        return React16.useMemo(() => {
          if (refs.every((ref) => ref == null)) {
            return null;
          }
          return (instance) => {
            refs.forEach((ref) => {
              (0, _setRef.default)(ref, instance);
            });
          };
        }, refs);
      }
    }
  });

  // node_modules/@mui/utils/useIsFocusVisible.js
  var require_useIsFocusVisible = __commonJS({
    "node_modules/@mui/utils/useIsFocusVisible.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useIsFocusVisible;
      exports.teardown = teardown;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var hadKeyboardEvent = true;
      var hadFocusVisibleRecently = false;
      var hadFocusVisibleRecentlyTimeout;
      var inputTypesWhitelist = {
        text: true,
        search: true,
        url: true,
        tel: true,
        email: true,
        password: true,
        number: true,
        date: true,
        month: true,
        week: true,
        time: true,
        datetime: true,
        "datetime-local": true
      };
      function focusTriggersKeyboardModality(node2) {
        const {
          type,
          tagName
        } = node2;
        if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
          return true;
        }
        if (tagName === "TEXTAREA" && !node2.readOnly) {
          return true;
        }
        if (node2.isContentEditable) {
          return true;
        }
        return false;
      }
      function handleKeyDown(event) {
        if (event.metaKey || event.altKey || event.ctrlKey) {
          return;
        }
        hadKeyboardEvent = true;
      }
      function handlePointerDown() {
        hadKeyboardEvent = false;
      }
      function handleVisibilityChange() {
        if (this.visibilityState === "hidden") {
          if (hadFocusVisibleRecently) {
            hadKeyboardEvent = true;
          }
        }
      }
      function prepare(doc) {
        doc.addEventListener("keydown", handleKeyDown, true);
        doc.addEventListener("mousedown", handlePointerDown, true);
        doc.addEventListener("pointerdown", handlePointerDown, true);
        doc.addEventListener("touchstart", handlePointerDown, true);
        doc.addEventListener("visibilitychange", handleVisibilityChange, true);
      }
      function teardown(doc) {
        doc.removeEventListener("keydown", handleKeyDown, true);
        doc.removeEventListener("mousedown", handlePointerDown, true);
        doc.removeEventListener("pointerdown", handlePointerDown, true);
        doc.removeEventListener("touchstart", handlePointerDown, true);
        doc.removeEventListener("visibilitychange", handleVisibilityChange, true);
      }
      function isFocusVisible(event) {
        const {
          target
        } = event;
        try {
          return target.matches(":focus-visible");
        } catch (error) {
        }
        return hadKeyboardEvent || focusTriggersKeyboardModality(target);
      }
      function useIsFocusVisible() {
        const ref = React16.useCallback((node2) => {
          if (node2 != null) {
            prepare(node2.ownerDocument);
          }
        }, []);
        const isFocusVisibleRef = React16.useRef(false);
        function handleBlurVisible() {
          if (isFocusVisibleRef.current) {
            hadFocusVisibleRecently = true;
            window.clearTimeout(hadFocusVisibleRecentlyTimeout);
            hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
              hadFocusVisibleRecently = false;
            }, 100);
            isFocusVisibleRef.current = false;
            return true;
          }
          return false;
        }
        function handleFocusVisible(event) {
          if (isFocusVisible(event)) {
            isFocusVisibleRef.current = true;
            return true;
          }
          return false;
        }
        return {
          isFocusVisibleRef,
          onFocus: handleFocusVisible,
          onBlur: handleBlurVisible,
          ref
        };
      }
    }
  });

  // node_modules/@mui/utils/getScrollbarSize.js
  var require_getScrollbarSize = __commonJS({
    "node_modules/@mui/utils/getScrollbarSize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getScrollbarSize;
      function getScrollbarSize(doc) {
        const documentWidth = doc.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
      }
    }
  });

  // node_modules/@mui/utils/scrollLeft.js
  var require_scrollLeft = __commonJS({
    "node_modules/@mui/utils/scrollLeft.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.detectScrollType = detectScrollType;
      exports.getNormalizedScrollLeft = getNormalizedScrollLeft;
      var cachedType;
      function detectScrollType() {
        if (cachedType) {
          return cachedType;
        }
        const dummy = document.createElement("div");
        const container = document.createElement("div");
        container.style.width = "10px";
        container.style.height = "1px";
        dummy.appendChild(container);
        dummy.dir = "rtl";
        dummy.style.fontSize = "14px";
        dummy.style.width = "4px";
        dummy.style.height = "1px";
        dummy.style.position = "absolute";
        dummy.style.top = "-1000px";
        dummy.style.overflow = "scroll";
        document.body.appendChild(dummy);
        cachedType = "reverse";
        if (dummy.scrollLeft > 0) {
          cachedType = "default";
        } else {
          dummy.scrollLeft = 1;
          if (dummy.scrollLeft === 0) {
            cachedType = "negative";
          }
        }
        document.body.removeChild(dummy);
        return cachedType;
      }
      function getNormalizedScrollLeft(element, direction) {
        const scrollLeft = element.scrollLeft;
        if (direction !== "rtl") {
          return scrollLeft;
        }
        const type = detectScrollType();
        switch (type) {
          case "negative":
            return element.scrollWidth - element.clientWidth + scrollLeft;
          case "reverse":
            return element.scrollWidth - element.clientWidth - scrollLeft;
          default:
            return scrollLeft;
        }
      }
    }
  });

  // node_modules/@mui/utils/usePreviousProps.js
  var require_usePreviousProps = __commonJS({
    "node_modules/@mui/utils/usePreviousProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var usePreviousProps = (value) => {
        const ref = React16.useRef({});
        React16.useEffect(() => {
          ref.current = value;
        });
        return ref.current;
      };
      var _default = usePreviousProps;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/visuallyHidden.js
  var require_visuallyHidden = __commonJS({
    "node_modules/@mui/utils/visuallyHidden.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var visuallyHidden = {
        border: 0,
        clip: "rect(0 0 0 0)",
        height: "1px",
        margin: -1,
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        whiteSpace: "nowrap",
        width: "1px"
      };
      var _default = visuallyHidden;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/integerPropType.js
  var require_integerPropType = __commonJS({
    "node_modules/@mui/utils/integerPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTypeByValue = getTypeByValue;
      function getTypeByValue(value) {
        const valueType = typeof value;
        switch (valueType) {
          case "number":
            if (Number.isNaN(value)) {
              return "NaN";
            }
            if (!Number.isFinite(value)) {
              return "Infinity";
            }
            if (value !== Math.floor(value)) {
              return "float";
            }
            return "number";
          case "object":
            if (value === null) {
              return "null";
            }
            return value.constructor.name;
          default:
            return valueType;
        }
      }
      function ponyfillIsInteger(x) {
        return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
      }
      var isInteger = Number.isInteger || ponyfillIsInteger;
      function requiredInteger(props, propName, componentName, location) {
        const propValue = props[propName];
        if (propValue == null || !isInteger(propValue)) {
          const propType = getTypeByValue(propValue);
          return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
        }
        return null;
      }
      function validator(props, propName, ...other) {
        const propValue = props[propName];
        if (propValue === void 0) {
          return null;
        }
        return requiredInteger(props, propName, ...other);
      }
      function validatorNoop() {
        return null;
      }
      validator.isRequired = requiredInteger;
      validatorNoop.isRequired = validatorNoop;
      var _default = false ? validatorNoop : validator;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/resolveProps.js
  var require_resolveProps = __commonJS({
    "node_modules/@mui/utils/resolveProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = resolveProps;
      function resolveProps(defaultProps, props) {
        const output = {
          ...props
        };
        Object.keys(defaultProps).forEach((propName) => {
          if (propName.toString().match(/^(components|slots)$/)) {
            output[propName] = {
              ...defaultProps[propName],
              ...output[propName]
            };
          } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
            const defaultSlotProps = defaultProps[propName] || {};
            const slotProps = props[propName];
            output[propName] = {};
            if (!slotProps || !Object.keys(slotProps)) {
              output[propName] = defaultSlotProps;
            } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
              output[propName] = slotProps;
            } else {
              output[propName] = {
                ...slotProps
              };
              Object.keys(defaultSlotProps).forEach((slotPropName) => {
                output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
              });
            }
          } else if (output[propName] === void 0) {
            output[propName] = defaultProps[propName];
          }
        });
        return output;
      }
    }
  });

  // node_modules/@mui/utils/composeClasses/composeClasses.js
  var require_composeClasses = __commonJS({
    "node_modules/@mui/utils/composeClasses/composeClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = composeClasses4;
      function composeClasses4(slots, getUtilityClass, classes = void 0) {
        const output = {};
        Object.keys(slots).forEach(
          // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
          // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
          (slot) => {
            output[slot] = slots[slot].reduce((acc, key) => {
              if (key) {
                const utilityClass = getUtilityClass(key);
                if (utilityClass !== "") {
                  acc.push(utilityClass);
                }
                if (classes && classes[key]) {
                  acc.push(classes[key]);
                }
              }
              return acc;
            }, []).join(" ");
          }
        );
        return output;
      }
    }
  });

  // node_modules/@mui/utils/composeClasses/index.js
  var require_composeClasses2 = __commonJS({
    "node_modules/@mui/utils/composeClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      var _composeClasses = _interopRequireDefault(require_composeClasses());
    }
  });

  // node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js
  var require_ClassNameGenerator = __commonJS({
    "node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var defaultGenerator = (componentName) => componentName;
      var createClassNameGenerator = () => {
        let generate = defaultGenerator;
        return {
          configure(generator) {
            generate = generator;
          },
          generate(componentName) {
            return generate(componentName);
          },
          reset() {
            generate = defaultGenerator;
          }
        };
      };
      var ClassNameGenerator = createClassNameGenerator();
      var _default = ClassNameGenerator;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/ClassNameGenerator/index.js
  var require_ClassNameGenerator2 = __commonJS({
    "node_modules/@mui/utils/ClassNameGenerator/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ClassNameGenerator.default;
        }
      });
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator());
    }
  });

  // node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js
  var require_generateUtilityClass = __commonJS({
    "node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generateUtilityClass5;
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
      var globalStateClassesMapping = {
        active: "active",
        checked: "checked",
        completed: "completed",
        disabled: "disabled",
        readOnly: "readOnly",
        error: "error",
        expanded: "expanded",
        focused: "focused",
        focusVisible: "focusVisible",
        required: "required",
        selected: "selected"
      };
      function generateUtilityClass5(componentName, slot, globalStatePrefix = "Mui") {
        const globalStateClass = globalStateClassesMapping[slot];
        return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClass/index.js
  var require_generateUtilityClass2 = __commonJS({
    "node_modules/@mui/utils/generateUtilityClass/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _generateUtilityClass[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js
  var require_generateUtilityClasses = __commonJS({
    "node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generateUtilityClasses2;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
      function generateUtilityClasses2(componentName, slots, globalStatePrefix = "Mui") {
        const result = {};
        slots.forEach((slot) => {
          result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
        });
        return result;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClasses/index.js
  var require_generateUtilityClasses2 = __commonJS({
    "node_modules/@mui/utils/generateUtilityClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses());
    }
  });

  // node_modules/@mui/utils/index.js
  var require_utils = __commonJS({
    "node_modules/@mui/utils/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        chainPropTypes: true,
        deepmerge: true,
        isPlainObject: true,
        elementAcceptingRef: true,
        elementTypeAcceptingRef: true,
        exactProp: true,
        formatMuiErrorMessage: true,
        getDisplayName: true,
        HTMLElementType: true,
        ponyfillGlobal: true,
        refType: true,
        unstable_capitalize: true,
        unstable_createChainedFunction: true,
        unstable_debounce: true,
        unstable_deprecatedPropType: true,
        unstable_isMuiElement: true,
        unstable_ownerDocument: true,
        unstable_ownerWindow: true,
        unstable_requirePropFactory: true,
        unstable_setRef: true,
        unstable_useEnhancedEffect: true,
        unstable_useId: true,
        unstable_unsupportedProp: true,
        unstable_useControlled: true,
        unstable_useEventCallback: true,
        unstable_useForkRef: true,
        unstable_useIsFocusVisible: true,
        unstable_getScrollbarSize: true,
        unstable_detectScrollType: true,
        unstable_getNormalizedScrollLeft: true,
        usePreviousProps: true,
        visuallyHidden: true,
        integerPropType: true,
        internal_resolveProps: true,
        unstable_composeClasses: true,
        unstable_generateUtilityClass: true,
        unstable_generateUtilityClasses: true,
        unstable_ClassNameGenerator: true
      };
      Object.defineProperty(exports, "HTMLElementType", {
        enumerable: true,
        get: function() {
          return _HTMLElementType.default;
        }
      });
      Object.defineProperty(exports, "chainPropTypes", {
        enumerable: true,
        get: function() {
          return _chainPropTypes.default;
        }
      });
      Object.defineProperty(exports, "deepmerge", {
        enumerable: true,
        get: function() {
          return _deepmerge.default;
        }
      });
      Object.defineProperty(exports, "elementAcceptingRef", {
        enumerable: true,
        get: function() {
          return _elementAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "elementTypeAcceptingRef", {
        enumerable: true,
        get: function() {
          return _elementTypeAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "exactProp", {
        enumerable: true,
        get: function() {
          return _exactProp.default;
        }
      });
      Object.defineProperty(exports, "formatMuiErrorMessage", {
        enumerable: true,
        get: function() {
          return _formatMuiErrorMessage.default;
        }
      });
      Object.defineProperty(exports, "getDisplayName", {
        enumerable: true,
        get: function() {
          return _getDisplayName.default;
        }
      });
      Object.defineProperty(exports, "integerPropType", {
        enumerable: true,
        get: function() {
          return _integerPropType.default;
        }
      });
      Object.defineProperty(exports, "internal_resolveProps", {
        enumerable: true,
        get: function() {
          return _resolveProps.default;
        }
      });
      Object.defineProperty(exports, "isPlainObject", {
        enumerable: true,
        get: function() {
          return _deepmerge.isPlainObject;
        }
      });
      Object.defineProperty(exports, "ponyfillGlobal", {
        enumerable: true,
        get: function() {
          return _ponyfillGlobal.default;
        }
      });
      Object.defineProperty(exports, "refType", {
        enumerable: true,
        get: function() {
          return _refType.default;
        }
      });
      Object.defineProperty(exports, "unstable_ClassNameGenerator", {
        enumerable: true,
        get: function() {
          return _ClassNameGenerator.default;
        }
      });
      Object.defineProperty(exports, "unstable_capitalize", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "unstable_composeClasses", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_createChainedFunction", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "unstable_debounce", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "unstable_deprecatedPropType", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "unstable_detectScrollType", {
        enumerable: true,
        get: function() {
          return _scrollLeft.detectScrollType;
        }
      });
      Object.defineProperty(exports, "unstable_generateUtilityClass", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      Object.defineProperty(exports, "unstable_generateUtilityClasses", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_getNormalizedScrollLeft", {
        enumerable: true,
        get: function() {
          return _scrollLeft.getNormalizedScrollLeft;
        }
      });
      Object.defineProperty(exports, "unstable_getScrollbarSize", {
        enumerable: true,
        get: function() {
          return _getScrollbarSize.default;
        }
      });
      Object.defineProperty(exports, "unstable_isMuiElement", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "unstable_ownerDocument", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "unstable_ownerWindow", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "unstable_requirePropFactory", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "unstable_setRef", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_unsupportedProp", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_useControlled", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "unstable_useEnhancedEffect", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      Object.defineProperty(exports, "unstable_useEventCallback", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "unstable_useForkRef", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      Object.defineProperty(exports, "unstable_useIsFocusVisible", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      Object.defineProperty(exports, "usePreviousProps", {
        enumerable: true,
        get: function() {
          return _usePreviousProps.default;
        }
      });
      Object.defineProperty(exports, "visuallyHidden", {
        enumerable: true,
        get: function() {
          return _visuallyHidden.default;
        }
      });
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      var _deepmerge = _interopRequireWildcard(require_deepmerge());
      var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef());
      var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef());
      var _exactProp = _interopRequireDefault(require_exactProp());
      var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName());
      var _HTMLElementType = _interopRequireDefault(require_HTMLElementType());
      var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal());
      var _refType = _interopRequireDefault(require_refType());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction());
      var _debounce = _interopRequireDefault(require_debounce());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory());
      var _setRef = _interopRequireDefault(require_setRef());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect());
      var _useId = _interopRequireDefault(require_useId());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp());
      var _useControlled = _interopRequireDefault(require_useControlled());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible());
      var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize());
      var _scrollLeft = require_scrollLeft();
      var _usePreviousProps = _interopRequireDefault(require_usePreviousProps());
      var _visuallyHidden = _interopRequireDefault(require_visuallyHidden());
      var _integerPropType = _interopRequireDefault(require_integerPropType());
      var _resolveProps = _interopRequireDefault(require_resolveProps());
      var _composeClasses = _interopRequireDefault(require_composeClasses2());
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass2());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _generateUtilityClass[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var init_extends = __esm({
    "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0)
        cache[arg] = fn(arg);
      return cache[arg];
    };
  }
  var init_emotion_memoize_esm = __esm({
    "node_modules/@emotion/memoize/dist/emotion-memoize.esm.js"() {
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex, isPropValid;
  var init_emotion_is_prop_valid_esm = __esm({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js"() {
      init_emotion_memoize_esm();
      reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      isPropValid = /* @__PURE__ */ memoize(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet;
  var init_emotion_sheet_browser_esm = __esm({
    "node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js"() {
      StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (true) {
            var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
              console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
          }
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
              if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
                console.error('There was a problem inserting the following rule: "' + rule + '"', e);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          if (true) {
            this._alreadyInsertedOrderInsensitiveRule = false;
          }
        };
        return StyleSheet2;
      }();
    }
  });

  // node_modules/stylis/src/Enum.js
  var MS, MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, IMPORT, KEYFRAMES, LAYER;
  var init_Enum = __esm({
    "node_modules/stylis/src/Enum.js"() {
      MS = "-ms-";
      MOZ = "-moz-";
      WEBKIT = "-webkit-";
      COMMENT = "comm";
      RULESET = "rule";
      DECLARATION = "decl";
      IMPORT = "@import";
      KEYFRAMES = "@keyframes";
      LAYER = "@layer";
    }
  });

  // node_modules/stylis/src/Utility.js
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var abs, from, assign;
  var init_Utility = __esm({
    "node_modules/stylis/src/Utility.js"() {
      abs = Math.abs;
      from = String.fromCharCode;
      assign = Object.assign;
    }
  });

  // node_modules/stylis/src/Tokenizer.js
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }
  var line, column, length, position, character, characters;
  var init_Tokenizer = __esm({
    "node_modules/stylis/src/Tokenizer.js"() {
      init_Utility();
      line = 1;
      column = 1;
      length = 0;
      position = 0;
      character = 0;
      characters = "";
    }
  });

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset === 0)
                  parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length2) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }
  var init_Parser = __esm({
    "node_modules/stylis/src/Parser.js"() {
      init_Enum();
      init_Utility();
      init_Tokenizer();
    }
  });

  // node_modules/stylis/src/Prefixer.js
  var init_Prefixer = __esm({
    "node_modules/stylis/src/Prefixer.js"() {
    }
  });

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  var init_Serializer = __esm({
    "node_modules/stylis/src/Serializer.js"() {
      init_Enum();
      init_Utility();
    }
  });

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index, children, callback) || "";
      return output;
    };
  }
  var init_Middleware = __esm({
    "node_modules/stylis/src/Middleware.js"() {
      init_Utility();
    }
  });

  // node_modules/stylis/index.js
  var init_stylis = __esm({
    "node_modules/stylis/index.js"() {
      init_Enum();
      init_Utility();
      init_Parser();
      init_Prefixer();
      init_Tokenizer();
      init_Serializer();
      init_Middleware();
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
  var weakMemoize;
  var init_emotion_weak_memoize_esm = __esm({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js"() {
      weakMemoize = function weakMemoize2(func) {
        var cache = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache.has(arg)) {
            return cache.get(arg);
          }
          var ret = func(arg);
          cache.set(arg, ret);
          return ret;
        };
      };
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var emotion_cache_browser_esm_exports = {};
  __export(emotion_cache_browser_esm_exports, {
    default: () => createCache
  });
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var identifierWithPointTracking, toRules, getRules, fixedElements, compat, removeLabel, ignoreFlag, isIgnoringComment, createUnsafeSelectorsAlarm, isImportRule, isPrependedWithRegularRules, nullifyElement, incorrectImportAlarm, prefixer, defaultStylisPlugins, createCache;
  var init_emotion_cache_browser_esm = __esm({
    "node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js"() {
      init_emotion_sheet_browser_esm();
      init_stylis();
      init_emotion_weak_memoize_esm();
      init_emotion_memoize_esm();
      identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
        var previous = 0;
        var character2 = 0;
        while (true) {
          previous = character2;
          character2 = peek();
          if (previous === 38 && character2 === 12) {
            points[index] = 1;
          }
          if (token(character2)) {
            break;
          }
          next();
        }
        return slice(begin, position);
      };
      toRules = function toRules2(parsed, points) {
        var index = -1;
        var character2 = 44;
        do {
          switch (token(character2)) {
            case 0:
              if (character2 === 38 && peek() === 12) {
                points[index] = 1;
              }
              parsed[index] += identifierWithPointTracking(position - 1, points, index);
              break;
            case 2:
              parsed[index] += delimit(character2);
              break;
            case 4:
              if (character2 === 44) {
                parsed[++index] = peek() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
              }
            default:
              parsed[index] += from(character2);
          }
        } while (character2 = next());
        return parsed;
      };
      getRules = function getRules2(value, points) {
        return dealloc(toRules(alloc(value), points));
      };
      fixedElements = /* @__PURE__ */ new WeakMap();
      compat = function compat2(element) {
        if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
        // negative .length indicates that this rule has been already prefixed
        element.length < 1) {
          return;
        }
        var value = element.value, parent = element.parent;
        var isImplicitRule = element.column === parent.column && element.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent)
            return;
        }
        if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i = 0, k = 0; i < rules.length; i++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
          }
        }
      };
      removeLabel = function removeLabel2(element) {
        if (element.type === "decl") {
          var value = element.value;
          if (
            // charcode for l
            value.charCodeAt(0) === 108 && // charcode for b
            value.charCodeAt(2) === 98
          ) {
            element["return"] = "";
            element.value = "";
          }
        }
      };
      ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
      isIgnoringComment = function isIgnoringComment2(element) {
        return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
      };
      createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
        return function(element, index, children) {
          if (element.type !== "rule" || cache.compat)
            return;
          var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
          if (unsafePseudoClasses) {
            var isNested = !!element.parent;
            var commentContainer = isNested ? element.parent.children : (
              // global rule at the root level
              children
            );
            for (var i = commentContainer.length - 1; i >= 0; i--) {
              var node2 = commentContainer[i];
              if (node2.line < element.line) {
                break;
              }
              if (node2.column < element.column) {
                if (isIgnoringComment(node2)) {
                  return;
                }
                break;
              }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
              console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
          }
        };
      };
      isImportRule = function isImportRule2(element) {
        return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
      };
      isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
        for (var i = index - 1; i >= 0; i--) {
          if (!isImportRule(children[i])) {
            return true;
          }
        }
        return false;
      };
      nullifyElement = function nullifyElement2(element) {
        element.type = "";
        element.value = "";
        element["return"] = "";
        element.children = "";
        element.props = "";
      };
      incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
        if (!isImportRule(element)) {
          return;
        }
        if (element.parent) {
          console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
          nullifyElement(element);
        } else if (isPrependedWithRegularRules(index, children)) {
          console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
          nullifyElement(element);
        }
      };
      prefixer = function prefixer2(element, index, children, callback) {
        if (element.length > -1) {
          if (!element["return"])
            switch (element.type) {
              case DECLARATION:
                element["return"] = prefix(element.value, element.length);
                break;
              case KEYFRAMES:
                return serialize([copy(element, {
                  value: replace(element.value, "@", "@" + WEBKIT)
                })], callback);
              case RULESET:
                if (element.length)
                  return combine(element.props, function(value) {
                    switch (match(value, /(::plac\w+|:read-\w+)/)) {
                      case ":read-only":
                      case ":read-write":
                        return serialize([copy(element, {
                          props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                        })], callback);
                      case "::placeholder":
                        return serialize([copy(element, {
                          props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                        }), copy(element, {
                          props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                        }), copy(element, {
                          props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                        })], callback);
                    }
                    return "";
                  });
            }
        }
      };
      defaultStylisPlugins = [prefixer];
      createCache = function createCache2(options) {
        var key = options.key;
        if (!key) {
          throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
        }
        if (key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node2) {
            var dataEmotionAttribute = node2.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node2);
            node2.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container;
        var nodesToHydrate = [];
        {
          container = options.container || document.head;
          Array.prototype.forEach.call(
            // this means we will ignore elements which don't have a space in them which
            // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function(node2) {
              var attrib = node2.getAttribute("data-emotion").split(" ");
              for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
              }
              nodesToHydrate.push(node2);
            }
          );
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        if (true) {
          omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
              return cache.compat;
            }
          }), incorrectImportAlarm);
        }
        {
          var currentSheet;
          var finalizingPlugins = [stringify, true ? function(element) {
            if (!element.root) {
              if (element["return"]) {
                currentSheet.insert(element["return"]);
              } else if (element.value && element.type !== COMMENT) {
                currentSheet.insert(element.value + "{}");
              }
            }
          } : rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis = function stylis2(styles) {
            return serialize(compile(styles), serializer);
          };
          _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet;
            if (serialized.map !== void 0) {
              currentSheet = {
                insert: function insert2(rule) {
                  sheet.insert(rule + serialized.map);
                }
              };
            }
            stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache.inserted[serialized.name] = true;
            }
          };
        }
        var cache = {
          key,
          sheet: new StyleSheet({
            key,
            container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache.sheet.hydrate(nodesToHydrate);
        return cache;
      };
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is3();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics2;
    }
  });

  // node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js
  var import_hoist_non_react_statics, hoistNonReactStatics;
  var init_emotion_react_isolated_hnrs_browser_esm = __esm({
    "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js"() {
      import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
      hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return (0, import_hoist_non_react_statics.default)(targetComponent, sourceComponent);
      };
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var isBrowser, registerStyles, insertStyles;
  var init_emotion_utils_browser_esm = __esm({
    "node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js"() {
      isBrowser = true;
      registerStyles = function registerStyles2(cache, serialized, isStringTag) {
        var className = cache.key + "-" + serialized.name;
        if (
          // we only need to add the styles to the registered cache if the
          // class name could be used further down
          // the tree but if it's a string tag, we know it won't
          // so we don't have to add it to registered cache.
          // this improves memory usage since we can avoid storing the whole style string
          (isStringTag === false || // we need to always store it if we're in compat mode and
          // in node since emotion-server relies on whether a style is in
          // the registered cache to know whether a style is global or not
          // also, note that this check will be dead code eliminated in the browser
          isBrowser === false) && cache.registered[className] === void 0
        ) {
          cache.registered[className] = serialized.styles;
        }
      };
      insertStyles = function insertStyles2(cache, serialized, isStringTag) {
        registerStyles(cache, serialized, isStringTag);
        var className = cache.key + "-" + serialized.name;
        if (cache.inserted[serialized.name] === void 0) {
          var current = serialized;
          do {
            cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            current = current.next;
          } while (current !== void 0);
        }
      };
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var init_emotion_hash_esm = __esm({
    "node_modules/@emotion/hash/dist/emotion-hash.esm.js"() {
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys;
  var init_emotion_unitless_esm = __esm({
    "node_modules/@emotion/unitless/dist/emotion-unitless.esm.js"() {
      unitlessKeys = {
        animationIterationCount: 1,
        aspectRatio: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        // SVG-related properties
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error(noComponentSelectorMessage);
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles += interpolation.map;
          }
          return styles;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR, UNDEFINED_AS_OBJECT_KEY_ERROR, hyphenateRegex, animationRegex, isCustomProperty, isProcessableValue, processStyleName, processStyleValue, contentValuePattern, contentValues, oldProcessStyleValue, msPattern, hyphenPattern, hyphenatedCache, noComponentSelectorMessage, labelPattern, sourceMapPattern, cursor, serializeStyles;
  var init_emotion_serialize_browser_esm = __esm({
    "node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js"() {
      init_emotion_hash_esm();
      init_emotion_unitless_esm();
      init_emotion_memoize_esm();
      ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      hyphenateRegex = /[A-Z]|^ms/g;
      animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      processStyleName = /* @__PURE__ */ memoize(function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match2, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        contentValues = ["normal", "none", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue3(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
      }
      serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles = "";
        cursor = void 0;
        var strings = args[0];
        if (strings == null || strings.raw === void 0) {
          stringMode = false;
          styles += handleInterpolation(mergedProps, registered, strings);
        } else {
          if (strings[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles += strings[0];
        }
        for (var i = 1; i < args.length; i++) {
          styles += handleInterpolation(mergedProps, registered, args[i]);
          if (stringMode) {
            if (strings[i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles += strings[i];
          }
        }
        var sourceMap;
        if (true) {
          styles = styles.replace(sourceMapPattern, function(match3) {
            sourceMap = match3;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match2;
        while ((match2 = labelPattern.exec(styles)) !== null) {
          identifierName += "-" + // $FlowFixMe we know it's not null
          match2[1];
        }
        var name = murmur2(styles) + identifierName;
        if (true) {
          return {
            name,
            styles,
            map: sourceMap,
            next: cursor,
            toString: function toString() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name,
          styles,
          next: cursor
        };
      };
    }
  });

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React, syncFallback, useInsertionEffect2, useInsertionEffectAlwaysWithSyncFallback, useInsertionEffectWithLayoutFallback;
  var init_emotion_use_insertion_effect_with_fallbacks_browser_esm = __esm({
    "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js"() {
      React = __toESM(require_react());
      syncFallback = function syncFallback2(create) {
        return create();
      };
      useInsertionEffect2 = React["useInsertionEffect"] ? React["useInsertionEffect"] : false;
      useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
      useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React.useLayoutEffect;
    }
  });

  // node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js
  function withTheme(Component) {
    var componentName = Component.displayName || Component.name || "Component";
    var render = function render2(props, ref) {
      var theme = React2.useContext(ThemeContext);
      return /* @__PURE__ */ React2.createElement(Component, _extends({
        theme,
        ref
      }, props));
    };
    var WithTheme = /* @__PURE__ */ React2.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return hoistNonReactStatics(WithTheme, Component);
  }
  var React2, import_react, isBrowser2, hasOwnProperty, EmotionCacheContext, CacheProvider, __unsafe_useEmotionCache, withEmotionCache, ThemeContext, useTheme, getTheme, createCacheWithTheme, ThemeProvider, getLastPart, getFunctionNameFromStackTraceLine, internalReactFunctionNames, sanitizeIdentifier, getLabelFromStackTrace, typePropName, labelPropName, createEmotionProps, Insertion, Emotion, Emotion$1;
  var init_emotion_element_c39617d8_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js"() {
      React2 = __toESM(require_react());
      import_react = __toESM(require_react());
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      init_emotion_react_isolated_hnrs_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      isBrowser2 = true;
      hasOwnProperty = {}.hasOwnProperty;
      EmotionCacheContext = /* @__PURE__ */ React2.createContext(
        // we're doing this to avoid preconstruct's dead code elimination in this one case
        // because this module is primarily intended for the browser and node
        // but it's also required in react native and similar environments sometimes
        // and we could have a special build just for that
        // but this is much easier and the native packages
        // might use a different theme context in the future anyway
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
          key: "css"
        }) : null
      );
      if (true) {
        EmotionCacheContext.displayName = "EmotionCacheContext";
      }
      CacheProvider = EmotionCacheContext.Provider;
      __unsafe_useEmotionCache = function useEmotionCache() {
        return (0, import_react.useContext)(EmotionCacheContext);
      };
      withEmotionCache = function withEmotionCache2(func) {
        return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
          var cache = (0, import_react.useContext)(EmotionCacheContext);
          return func(props, cache, ref);
        });
      };
      if (!isBrowser2) {
        withEmotionCache = function withEmotionCache3(func) {
          return function(props) {
            var cache = (0, import_react.useContext)(EmotionCacheContext);
            if (cache === null) {
              cache = createCache({
                key: "css"
              });
              return /* @__PURE__ */ React2.createElement(EmotionCacheContext.Provider, {
                value: cache
              }, func(props, cache));
            } else {
              return func(props, cache);
            }
          };
        };
      }
      ThemeContext = /* @__PURE__ */ React2.createContext({});
      if (true) {
        ThemeContext.displayName = "EmotionThemeContext";
      }
      useTheme = function useTheme2() {
        return React2.useContext(ThemeContext);
      };
      getTheme = function getTheme2(outerTheme, theme) {
        if (typeof theme === "function") {
          var mergedTheme = theme(outerTheme);
          if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (theme == null || typeof theme !== "object" || Array.isArray(theme)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends({}, outerTheme, theme);
      };
      createCacheWithTheme = /* @__PURE__ */ weakMemoize(function(outerTheme) {
        return weakMemoize(function(theme) {
          return getTheme(outerTheme, theme);
        });
      });
      ThemeProvider = function ThemeProvider2(props) {
        var theme = React2.useContext(ThemeContext);
        if (props.theme !== theme) {
          theme = createCacheWithTheme(theme)(props.theme);
        }
        return /* @__PURE__ */ React2.createElement(ThemeContext.Provider, {
          value: theme
        }, props.children);
      };
      getLastPart = function getLastPart2(functionName) {
        var parts = functionName.split(".");
        return parts[parts.length - 1];
      };
      getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
        var match2 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
        if (match2)
          return getLastPart(match2[1]);
        match2 = /^([A-Za-z0-9$.]+)@/.exec(line2);
        if (match2)
          return getLastPart(match2[1]);
        return void 0;
      };
      internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
      sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
        return identifier2.replace(/\$/g, "-");
      };
      getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
        if (!stackTrace)
          return void 0;
        var lines = stackTrace.split("\n");
        for (var i = 0; i < lines.length; i++) {
          var functionName = getFunctionNameFromStackTraceLine(lines[i]);
          if (!functionName)
            continue;
          if (internalReactFunctionNames.has(functionName))
            break;
          if (/^[A-Z]/.test(functionName))
            return sanitizeIdentifier(functionName);
        }
        return void 0;
      };
      typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
      createEmotionProps = function createEmotionProps2(type, props) {
        if (typeof props.css === "string" && // check if there is a css declaration
        props.css.indexOf(":") !== -1) {
          throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
        }
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty.call(props, key)) {
            newProps[key] = props[key];
          }
        }
        newProps[typePropName] = type;
        if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
          var label = getLabelFromStackTrace(new Error().stack);
          if (label)
            newProps[labelPropName] = label;
        }
        return newProps;
      };
      Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        registerStyles(cache, serialized, isStringTag);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache, serialized, isStringTag);
        });
        return null;
      };
      Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
        var cssProp = props.css;
        if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
          cssProp = cache.registered[cssProp];
        }
        var WrappedComponent = props[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(registeredStyles, void 0, React2.useContext(ThemeContext));
        if (serialized.name.indexOf("-") === -1) {
          var labelFromStack = props[labelPropName];
          if (labelFromStack) {
            serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
          }
        }
        className += cache.key + "-" + serialized.name;
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
            newProps[key] = props[key];
          }
        }
        newProps.ref = ref;
        newProps.className = className;
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Insertion, {
          cache,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React2.createElement(WrappedComponent, newProps));
      });
      if (true) {
        Emotion.displayName = "EmotionCssPropInternal";
      }
      Emotion$1 = Emotion;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var emotion_react_browser_esm_exports = {};
  __export(emotion_react_browser_esm_exports, {
    CacheProvider: () => CacheProvider,
    ClassNames: () => ClassNames,
    Global: () => Global,
    ThemeContext: () => ThemeContext,
    ThemeProvider: () => ThemeProvider,
    __unsafe_useEmotionCache: () => __unsafe_useEmotionCache,
    createElement: () => jsx,
    css: () => css,
    jsx: () => jsx,
    keyframes: () => keyframes,
    useTheme: () => useTheme,
    withEmotionCache: () => withEmotionCache,
    withTheme: () => withTheme
  });
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  function merge(registered, css3, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css3(registeredStyles);
  }
  var React3, import_hoist_non_react_statics2, pkg, jsx, warnedAboutCssPropForGlobal, Global, keyframes, classnames, Insertion3, ClassNames, isBrowser3, isTestEnv, globalContext, globalKey;
  var init_emotion_react_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-react.browser.esm.js"() {
      init_emotion_element_c39617d8_browser_esm();
      init_emotion_element_c39617d8_browser_esm();
      React3 = __toESM(require_react());
      init_emotion_utils_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
      pkg = {
        name: "@emotion/react",
        version: "11.11.0",
        main: "dist/emotion-react.cjs.js",
        module: "dist/emotion-react.esm.js",
        browser: {
          "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
        },
        exports: {
          ".": {
            module: {
              worker: "./dist/emotion-react.worker.esm.js",
              browser: "./dist/emotion-react.browser.esm.js",
              "default": "./dist/emotion-react.esm.js"
            },
            "import": "./dist/emotion-react.cjs.mjs",
            "default": "./dist/emotion-react.cjs.js"
          },
          "./jsx-runtime": {
            module: {
              worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
              browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
              "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
          },
          "./_isolated-hnrs": {
            module: {
              worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
              browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
              "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
          },
          "./jsx-dev-runtime": {
            module: {
              worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
              browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
              "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
          },
          "./package.json": "./package.json",
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": {
            types: {
              "import": "./macro.d.mts",
              "default": "./macro.d.ts"
            },
            "default": "./macro.js"
          }
        },
        types: "types/index.d.ts",
        files: [
          "src",
          "dist",
          "jsx-runtime",
          "jsx-dev-runtime",
          "_isolated-hnrs",
          "types/*.d.ts",
          "macro.*"
        ],
        sideEffects: false,
        author: "Emotion Contributors",
        license: "MIT",
        scripts: {
          "test:typescript": "dtslint types"
        },
        dependencies: {
          "@babel/runtime": "^7.18.3",
          "@emotion/babel-plugin": "^11.11.0",
          "@emotion/cache": "^11.11.0",
          "@emotion/serialize": "^1.1.2",
          "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
          "@emotion/utils": "^1.2.1",
          "@emotion/weak-memoize": "^0.3.1",
          "hoist-non-react-statics": "^3.3.1"
        },
        peerDependencies: {
          react: ">=16.8.0"
        },
        peerDependenciesMeta: {
          "@types/react": {
            optional: true
          }
        },
        devDependencies: {
          "@definitelytyped/dtslint": "0.0.112",
          "@emotion/css": "11.11.0",
          "@emotion/css-prettifier": "1.1.3",
          "@emotion/server": "11.11.0",
          "@emotion/styled": "11.11.0",
          "html-tag-names": "^1.1.2",
          react: "16.14.0",
          "svg-tag-names": "^1.1.1",
          typescript: "^4.5.5"
        },
        repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
        publishConfig: {
          access: "public"
        },
        "umd:main": "dist/emotion-react.umd.min.js",
        preconstruct: {
          entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
          ],
          umdName: "emotionReact",
          exports: {
            envConditions: [
              "browser",
              "worker"
            ],
            extra: {
              "./types/css-prop": "./types/css-prop.d.ts",
              "./macro": {
                types: {
                  "import": "./macro.d.mts",
                  "default": "./macro.d.ts"
                },
                "default": "./macro.js"
              }
            }
          }
        }
      };
      jsx = function jsx2(type, props) {
        var args = arguments;
        if (props == null || !hasOwnProperty.call(props, "css")) {
          return React3.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = Emotion$1;
        createElementArgArray[1] = createEmotionProps(type, props);
        for (var i = 2; i < argsLength; i++) {
          createElementArgArray[i] = args[i];
        }
        return React3.createElement.apply(null, createElementArgArray);
      };
      warnedAboutCssPropForGlobal = false;
      Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
        if (!warnedAboutCssPropForGlobal && // check for className as well since the user is
        // probably using the custom createElement which
        // means it will be turned into a className prop
        // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
        (props.className || props.css)) {
          console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
          warnedAboutCssPropForGlobal = true;
        }
        var styles = props.styles;
        var serialized = serializeStyles([styles], void 0, React3.useContext(ThemeContext));
        if (!isBrowser2) {
          var _ref;
          var serializedNames = serialized.name;
          var serializedStyles = serialized.styles;
          var next2 = serialized.next;
          while (next2 !== void 0) {
            serializedNames += " " + next2.name;
            serializedStyles += next2.styles;
            next2 = next2.next;
          }
          var shouldCache = cache.compat === true;
          var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
          }, cache.sheet, shouldCache);
          if (shouldCache) {
            return null;
          }
          return /* @__PURE__ */ React3.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = cache.sheet.nonce, _ref));
        }
        var sheetRef = React3.useRef();
        useInsertionEffectWithLayoutFallback(function() {
          var key = cache.key + "-global";
          var sheet = new cache.sheet.constructor({
            key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
          });
          var rehydrating = false;
          var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache.sheet.tags.length) {
            sheet.before = cache.sheet.tags[0];
          }
          if (node2 !== null) {
            rehydrating = true;
            node2.setAttribute("data-emotion", key);
            sheet.hydrate([node2]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache]);
        useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            insertStyles(cache, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
          }
          cache.insert("", serialized, sheet, false);
        }, [cache, serialized.name]);
        return null;
      });
      if (true) {
        Global.displayName = "EmotionGlobal";
      }
      keyframes = function keyframes2() {
        var insertable = css.apply(void 0, arguments);
        var name = "animation-" + insertable.name;
        return {
          name,
          styles: "@keyframes " + name + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                if (arg.styles !== void 0 && arg.name !== void 0) {
                  console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                }
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      Insertion3 = function Insertion4(_ref) {
        var cache = _ref.cache, serializedArr = _ref.serializedArr;
        useInsertionEffectAlwaysWithSyncFallback(function() {
          for (var i = 0; i < serializedArr.length; i++) {
            insertStyles(cache, serializedArr[i], false);
          }
        });
        return null;
      };
      ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
        var hasRendered = false;
        var serializedArr = [];
        var css3 = function css4() {
          if (hasRendered && true) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serializeStyles(args, cache.registered);
          serializedArr.push(serialized);
          registerStyles(cache, serialized, false);
          return cache.key + "-" + serialized.name;
        };
        var cx = function cx2() {
          if (hasRendered && true) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge(cache.registered, css3, classnames(args));
        };
        var content = {
          css: css3,
          cx,
          theme: React3.useContext(ThemeContext)
        };
        var ele = props.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Insertion3, {
          cache,
          serializedArr
        }), ele);
      });
      if (true) {
        ClassNames.displayName = "EmotionClassNames";
      }
      if (true) {
        isBrowser3 = true;
        isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
        if (isBrowser3 && !isTestEnv) {
          globalContext = // $FlowIgnore
          typeof globalThis !== "undefined" ? globalThis : isBrowser3 ? window : global;
          globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
          if (globalContext[globalKey]) {
            console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
          }
          globalContext[globalKey] = true;
        }
      }
    }
  });

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React4, testOmitPropsOnStringTag, testOmitPropsOnComponent, getDefaultShouldForwardProp, composeShouldForwardProps, ILLEGAL_ESCAPE_SEQUENCE_ERROR2, Insertion5, createStyled;
  var init_emotion_styled_base_browser_esm = __esm({
    "node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"() {
      init_extends();
      React4 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_react_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      testOmitPropsOnStringTag = isPropValid;
      testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp2;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp2 !== "function" && isReal) {
          shouldForwardProp2 = tag.__emotion_forwardProp;
        }
        return shouldForwardProp2;
      };
      ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      Insertion5 = function Insertion6(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        registerStyles(cache, serialized, isStringTag);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache, serialized, isStringTag);
        });
        return null;
      };
      createStyled = function createStyled2(tag, options) {
        if (true) {
          if (tag === void 0) {
            throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
          }
        }
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles.push.apply(styles, args);
          } else {
            if (args[0][0] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
            }
            styles.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for (; i < len; i++) {
              if (args[0][i] === void 0) {
                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
              }
              styles.push(args[i], args[0][i]);
            }
          }
          var Styled = withEmotionCache(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
              mergedProps = {};
              for (var key in props) {
                mergedProps[key] = props[key];
              }
              mergedProps.theme = React4.useContext(ThemeContext);
            }
            if (typeof props.className === "string") {
              className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
            } else if (props.className != null) {
              className = props.className + " ";
            }
            var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props) {
              if (shouldUseAs && _key === "as")
                continue;
              if (
                // $FlowFixMe
                finalShouldForwardProp(_key)
              ) {
                newProps[_key] = props[_key];
              }
            }
            newProps.className = className;
            newProps.ref = ref;
            return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(Insertion5, {
              cache,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React4.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles;
          Styled.__emotion_forwardProp = shouldForwardProp2;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && true) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled2(nextTag, _extends({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles);
          };
          return Styled;
        };
      };
    }
  });

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var emotion_styled_browser_esm_exports = {};
  __export(emotion_styled_browser_esm_exports, {
    default: () => newStyled
  });
  var import_react3, tags, newStyled;
  var init_emotion_styled_browser_esm = __esm({
    "node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"() {
      init_emotion_styled_base_browser_esm();
      init_extends();
      import_react3 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        // SVG
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      newStyled = createStyled.bind();
      tags.forEach(function(tagName) {
        newStyled[tagName] = newStyled(tagName);
      });
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React16 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React16.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx3 = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx3;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js
  var require_StyledEngineProvider = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = StyledEngineProvider;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _cache = _interopRequireDefault((init_emotion_cache_browser_esm(), __toCommonJS(emotion_cache_browser_esm_exports)));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache2 = _getRequireWildcardCache(nodeInterop);
        if (cache2 && cache2.has(obj)) {
          return cache2.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache2) {
          cache2.set(obj, newObj);
        }
        return newObj;
      }
      var cache;
      if (typeof document === "object") {
        cache = (0, _cache.default)({
          key: "css",
          prepend: true
        });
      }
      function StyledEngineProvider(props) {
        const {
          injectFirst,
          children
        } = props;
        return injectFirst && cache ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
          value: cache,
          children
        }) : children;
      }
      true ? StyledEngineProvider.propTypes = {
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * By default, the styles are injected last in the <head> element of the page.
         * As a result, they gain more specificity than any other style sheet.
         * If you want to override MUI's styles, set this prop.
         */
        injectFirst: _propTypes.default.bool
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js
  var require_StyledEngineProvider2 = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider());
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = GlobalStyles;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function isEmpty(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0;
      }
      function GlobalStyles(props) {
        const {
          styles,
          defaultTheme: defaultTheme2 = {}
        } = props;
        const globalStyles = typeof styles === "function" ? (themeInput) => styles(isEmpty(themeInput) ? defaultTheme2 : themeInput) : styles;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles.propTypes = {
        defaultTheme: _propTypes.default.object,
        styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/index.js
  var require_GlobalStyles2 = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles());
    }
  });

  // node_modules/@mui/styled-engine/node/index.js
  var require_node = __commonJS({
    "node_modules/@mui/styled-engine/node/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      Object.defineProperty(exports, "ThemeContext", {
        enumerable: true,
        get: function() {
          return _react.ThemeContext;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _react.css;
        }
      });
      exports.default = styled2;
      exports.internal_processStyles = void 0;
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _react.keyframes;
        }
      });
      var _styled = _interopRequireDefault((init_emotion_styled_browser_esm(), __toCommonJS(emotion_styled_browser_esm_exports)));
      var _react = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider2());
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles2());
      function styled2(tag, options) {
        const stylesFactory = (0, _styled.default)(tag, options);
        if (true) {
          return (...styles) => {
            const component = typeof tag === "string" ? `"${tag}"` : "component";
            if (styles.length === 0) {
              console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
            } else if (styles.some((style) => style === void 0)) {
              console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
            }
            return stylesFactory(...styles);
          };
        }
        return stylesFactory;
      }
      var internal_processStyles = (tag, processor) => {
        if (Array.isArray(tag.__emotion_styles)) {
          tag.__emotion_styles = processor(tag.__emotion_styles);
        }
      };
      exports.internal_processStyles = internal_processStyles;
    }
  });

  // node_modules/@mui/system/createTheme/createBreakpoints.js
  var require_createBreakpoints = __commonJS({
    "node_modules/@mui/system/createTheme/createBreakpoints.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.breakpointKeys = void 0;
      exports.default = createBreakpoints;
      var breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
      exports.breakpointKeys = breakpointKeys;
      var sortBreakpointsValues = (values) => {
        const breakpointsAsArray = Object.keys(values).map((key) => ({
          key,
          val: values[key]
        })) || [];
        breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
        return breakpointsAsArray.reduce((acc, obj) => {
          return {
            ...acc,
            [obj.key]: obj.val
          };
        }, {});
      };
      function createBreakpoints(breakpoints) {
        const {
          // The breakpoint **start** at this value.
          // For instance with the first breakpoint xs: [xs, sm).
          values = {
            xs: 0,
            // phone
            sm: 600,
            // tablet
            md: 900,
            // small laptop
            lg: 1200,
            // desktop
            xl: 1536
            // large screen
          },
          unit = "px",
          step = 5,
          ...other
        } = breakpoints;
        const sortedValues = sortBreakpointsValues(values);
        const keys = Object.keys(sortedValues);
        function up(key) {
          const value = typeof values[key] === "number" ? values[key] : key;
          return `@media (min-width:${value}${unit})`;
        }
        function down(key) {
          const value = typeof values[key] === "number" ? values[key] : key;
          return `@media (max-width:${value - step / 100}${unit})`;
        }
        function between(start, end) {
          const endIndex = keys.indexOf(end);
          return `@media (min-width:${typeof values[start] === "number" ? values[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === "number" ? values[keys[endIndex]] : end) - step / 100}${unit})`;
        }
        function only(key) {
          if (keys.indexOf(key) + 1 < keys.length) {
            return between(key, keys[keys.indexOf(key) + 1]);
          }
          return up(key);
        }
        function not(key) {
          const keyIndex = keys.indexOf(key);
          if (keyIndex === 0) {
            return up(keys[1]);
          }
          if (keyIndex === keys.length - 1) {
            return down(keys[keyIndex]);
          }
          return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
        }
        return {
          keys,
          values: sortedValues,
          up,
          down,
          between,
          only,
          not,
          unit,
          ...other
        };
      }
    }
  });

  // node_modules/@mui/system/createTheme/shape.js
  var require_shape = __commonJS({
    "node_modules/@mui/system/createTheme/shape.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shape = {
        borderRadius: 4
      };
      var _default = shape;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/responsivePropType.js
  var require_responsivePropType = __commonJS({
    "node_modules/@mui/system/responsivePropType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var responsivePropType = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
      var _default = responsivePropType;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/merge.js
  var require_merge = __commonJS({
    "node_modules/@mui/system/merge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      function merge2(acc, item) {
        if (!item) {
          return acc;
        }
        return (0, _utils.deepmerge)(acc, item, {
          clone: false
          // No need to clone deep, it's way faster.
        });
      }
      var _default = merge2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/breakpoints.js
  var require_breakpoints = __commonJS({
    "node_modules/@mui/system/breakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.computeBreakpointsBase = computeBreakpointsBase;
      exports.createEmptyBreakpointObject = createEmptyBreakpointObject;
      exports.default = void 0;
      exports.handleBreakpoints = handleBreakpoints;
      exports.mergeBreakpointsInOrder = mergeBreakpointsInOrder;
      exports.removeUnusedBreakpoints = removeUnusedBreakpoints;
      exports.resolveBreakpointValues = resolveBreakpointValues;
      exports.values = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _merge = _interopRequireDefault(require_merge());
      var values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      };
      exports.values = values;
      var defaultBreakpoints = {
        // Sorted ASC by size. That's important.
        // It can't be configured as it's used statically for propTypes.
        keys: ["xs", "sm", "md", "lg", "xl"],
        up: (key) => `@media (min-width:${values[key]}px)`
      };
      function handleBreakpoints(props, propValue, styleFromPropValue) {
        const theme = props.theme || {};
        if (Array.isArray(propValue)) {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
          return propValue.reduce((acc, item, index) => {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
          }, {});
        }
        if (typeof propValue === "object") {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
          return Object.keys(propValue).reduce((acc, breakpoint) => {
            if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
              const mediaKey = themeBreakpoints.up(breakpoint);
              acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
              const cssKey = breakpoint;
              acc[cssKey] = propValue[cssKey];
            }
            return acc;
          }, {});
        }
        const output = styleFromPropValue(propValue);
        return output;
      }
      function breakpoints(styleFunction) {
        const newStyleFunction = (props) => {
          const theme = props.theme || {};
          const base = styleFunction(props);
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
          const extended = themeBreakpoints.keys.reduce((acc, key) => {
            if (props[key]) {
              acc = acc || {};
              acc[themeBreakpoints.up(key)] = styleFunction({
                theme,
                ...props[key]
              });
            }
            return acc;
          }, null);
          return (0, _merge.default)(base, extended);
        };
        newStyleFunction.propTypes = true ? {
          ...styleFunction.propTypes,
          xs: _propTypes.default.object,
          sm: _propTypes.default.object,
          md: _propTypes.default.object,
          lg: _propTypes.default.object,
          xl: _propTypes.default.object
        } : {};
        newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
        return newStyleFunction;
      }
      function createEmptyBreakpointObject(breakpointsInput = {}) {
        var _breakpointsInput$key;
        const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
          const breakpointStyleKey = breakpointsInput.up(key);
          acc[breakpointStyleKey] = {};
          return acc;
        }, {});
        return breakpointsInOrder || {};
      }
      function removeUnusedBreakpoints(breakpointKeys, style) {
        return breakpointKeys.reduce((acc, key) => {
          const breakpointOutput = acc[key];
          const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
          if (isBreakpointUnused) {
            delete acc[key];
          }
          return acc;
        }, style);
      }
      function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
        const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
        const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev2, next2) => (0, _utils.deepmerge)(prev2, next2), {});
        return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
      }
      function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
        if (typeof breakpointValues !== "object") {
          return {};
        }
        const base = {};
        const breakpointsKeys = Object.keys(themeBreakpoints);
        if (Array.isArray(breakpointValues)) {
          breakpointsKeys.forEach((breakpoint, i) => {
            if (i < breakpointValues.length) {
              base[breakpoint] = true;
            }
          });
        } else {
          breakpointsKeys.forEach((breakpoint) => {
            if (breakpointValues[breakpoint] != null) {
              base[breakpoint] = true;
            }
          });
        }
        return base;
      }
      function resolveBreakpointValues({
        values: breakpointValues,
        breakpoints: themeBreakpoints,
        base: customBase
      }) {
        const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
        const keys = Object.keys(base);
        if (keys.length === 0) {
          return breakpointValues;
        }
        let previous;
        return keys.reduce((acc, breakpoint, i) => {
          if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
          } else if (typeof breakpointValues === "object") {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
          } else {
            acc[breakpoint] = breakpointValues;
          }
          return acc;
        }, {});
      }
      var _default = breakpoints;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/style.js
  var require_style = __commonJS({
    "node_modules/@mui/system/style.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPath = getPath;
      exports.getStyleValue = getStyleValue;
      var _utils = require_utils();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      function getPath(obj, path, checkVars = true) {
        if (!path || typeof path !== "string") {
          return null;
        }
        if (obj && obj.vars && checkVars) {
          const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
          if (val != null) {
            return val;
          }
        }
        return path.split(".").reduce((acc, item) => {
          if (acc && acc[item] != null) {
            return acc[item];
          }
          return null;
        }, obj);
      }
      function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
        let value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || userValue;
        } else {
          value = getPath(themeMapping, propValueFinal) || userValue;
        }
        if (transform) {
          value = transform(value, userValue, themeMapping);
        }
        return value;
      }
      function style(options) {
        const {
          prop,
          cssProperty = options.prop,
          themeKey,
          transform
        } = options;
        const fn = (props) => {
          if (props[prop] == null) {
            return null;
          }
          const propValue = props[prop];
          const theme = props.theme;
          const themeMapping = getPath(theme, themeKey) || {};
          const styleFromPropValue = (propValueFinal) => {
            let value = getStyleValue(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _utils.unstable_capitalize)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
        };
        fn.propTypes = true ? {
          [prop]: _responsivePropType.default
        } : {};
        fn.filterProps = [prop];
        return fn;
      }
      var _default = style;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/memoize.js
  var require_memoize = __commonJS({
    "node_modules/@mui/system/memoize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = memoize2;
      function memoize2(fn) {
        const cache = {};
        return (arg) => {
          if (cache[arg] === void 0) {
            cache[arg] = fn(arg);
          }
          return cache[arg];
        };
      }
    }
  });

  // node_modules/@mui/system/spacing.js
  var require_spacing = __commonJS({
    "node_modules/@mui/system/spacing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createUnarySpacing = createUnarySpacing;
      exports.createUnaryUnit = createUnaryUnit;
      exports.default = void 0;
      exports.getStyleFromPropValue = getStyleFromPropValue;
      exports.getValue = getValue;
      exports.margin = margin;
      exports.marginKeys = void 0;
      exports.padding = padding;
      exports.paddingKeys = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      var _style = require_style();
      var _merge = _interopRequireDefault(require_merge());
      var _memoize = _interopRequireDefault(require_memoize());
      var properties = {
        m: "margin",
        p: "padding"
      };
      var directions = {
        t: "Top",
        r: "Right",
        b: "Bottom",
        l: "Left",
        x: ["Left", "Right"],
        y: ["Top", "Bottom"]
      };
      var aliases = {
        marginX: "mx",
        marginY: "my",
        paddingX: "px",
        paddingY: "py"
      };
      var getCssProperties = (0, _memoize.default)((prop) => {
        if (prop.length > 2) {
          if (aliases[prop]) {
            prop = aliases[prop];
          } else {
            return [prop];
          }
        }
        const [a, b] = prop.split("");
        const property = properties[a];
        const direction = directions[b] || "";
        return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
      });
      var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
      exports.marginKeys = marginKeys;
      var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
      exports.paddingKeys = paddingKeys;
      var spacingKeys = [...marginKeys, ...paddingKeys];
      function createUnaryUnit(theme, themeKey, defaultValue, propName) {
        var _getPath;
        const themeSpacing = (_getPath = (0, _style.getPath)(theme, themeKey, false)) != null ? _getPath : defaultValue;
        if (typeof themeSpacing === "number") {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (typeof abs2 !== "number") {
                console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
              }
            }
            return themeSpacing * abs2;
          };
        }
        if (Array.isArray(themeSpacing)) {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (!Number.isInteger(abs2)) {
                console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
              } else if (abs2 > themeSpacing.length - 1) {
                console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
              }
            }
            return themeSpacing[abs2];
          };
        }
        if (typeof themeSpacing === "function") {
          return themeSpacing;
        }
        if (true) {
          console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
        }
        return () => void 0;
      }
      function createUnarySpacing(theme) {
        return createUnaryUnit(theme, "spacing", 8, "spacing");
      }
      function getValue(transformer, propValue) {
        if (typeof propValue === "string" || propValue == null) {
          return propValue;
        }
        const abs2 = Math.abs(propValue);
        const transformed = transformer(abs2);
        if (propValue >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      }
      function getStyleFromPropValue(cssProperties, transformer) {
        return (propValue) => cssProperties.reduce((acc, cssProperty) => {
          acc[cssProperty] = getValue(transformer, propValue);
          return acc;
        }, {});
      }
      function resolveCssProperty(props, keys, prop, transformer) {
        if (keys.indexOf(prop) === -1) {
          return null;
        }
        const cssProperties = getCssProperties(prop);
        const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
        const propValue = props[prop];
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
      }
      function style(props, keys) {
        const transformer = createUnarySpacing(props.theme);
        return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(_merge.default, {});
      }
      function margin(props) {
        return style(props, marginKeys);
      }
      margin.propTypes = true ? marginKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      margin.filterProps = marginKeys;
      function padding(props) {
        return style(props, paddingKeys);
      }
      padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      padding.filterProps = paddingKeys;
      function spacing(props) {
        return style(props, spacingKeys);
      }
      spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      spacing.filterProps = spacingKeys;
      var _default = spacing;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createTheme/createSpacing.js
  var require_createSpacing = __commonJS({
    "node_modules/@mui/system/createTheme/createSpacing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSpacing;
      var _spacing = require_spacing();
      function createSpacing(spacingInput = 8) {
        if (spacingInput.mui) {
          return spacingInput;
        }
        const transform = (0, _spacing.createUnarySpacing)({
          spacing: spacingInput
        });
        const spacing = (...argsInput) => {
          if (true) {
            if (!(argsInput.length <= 4)) {
              console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
            }
          }
          const args = argsInput.length === 0 ? [1] : argsInput;
          return args.map((argument) => {
            const output = transform(argument);
            return typeof output === "number" ? `${output}px` : output;
          }).join(" ");
        };
        spacing.mui = true;
        return spacing;
      }
    }
  });

  // node_modules/@mui/system/compose.js
  var require_compose = __commonJS({
    "node_modules/@mui/system/compose.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _merge = _interopRequireDefault(require_merge());
      function compose(...styles) {
        const handlers = styles.reduce((acc, style) => {
          style.filterProps.forEach((prop) => {
            acc[prop] = style;
          });
          return acc;
        }, {});
        const fn = (props) => {
          return Object.keys(props).reduce((acc, prop) => {
            if (handlers[prop]) {
              return (0, _merge.default)(acc, handlers[prop](props));
            }
            return acc;
          }, {});
        };
        fn.propTypes = true ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};
        fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
        return fn;
      }
      var _default = compose;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/borders.js
  var require_borders = __commonJS({
    "node_modules/@mui/system/borders.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.borderTopColor = exports.borderTop = exports.borderRightColor = exports.borderRight = exports.borderRadius = exports.borderLeftColor = exports.borderLeft = exports.borderColor = exports.borderBottomColor = exports.borderBottom = exports.border = void 0;
      exports.borderTransform = borderTransform;
      exports.default = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      function borderTransform(value) {
        if (typeof value !== "number") {
          return value;
        }
        return `${value}px solid`;
      }
      var border = (0, _style.default)({
        prop: "border",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.border = border;
      var borderTop = (0, _style.default)({
        prop: "borderTop",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.borderTop = borderTop;
      var borderRight = (0, _style.default)({
        prop: "borderRight",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.borderRight = borderRight;
      var borderBottom = (0, _style.default)({
        prop: "borderBottom",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.borderBottom = borderBottom;
      var borderLeft = (0, _style.default)({
        prop: "borderLeft",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.borderLeft = borderLeft;
      var borderColor = (0, _style.default)({
        prop: "borderColor",
        themeKey: "palette"
      });
      exports.borderColor = borderColor;
      var borderTopColor = (0, _style.default)({
        prop: "borderTopColor",
        themeKey: "palette"
      });
      exports.borderTopColor = borderTopColor;
      var borderRightColor = (0, _style.default)({
        prop: "borderRightColor",
        themeKey: "palette"
      });
      exports.borderRightColor = borderRightColor;
      var borderBottomColor = (0, _style.default)({
        prop: "borderBottomColor",
        themeKey: "palette"
      });
      exports.borderBottomColor = borderBottomColor;
      var borderLeftColor = (0, _style.default)({
        prop: "borderLeftColor",
        themeKey: "palette"
      });
      exports.borderLeftColor = borderLeftColor;
      var borderRadius = (props) => {
        if (props.borderRadius !== void 0 && props.borderRadius !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "shape.borderRadius", 4, "borderRadius");
          const styleFromPropValue = (propValue) => ({
            borderRadius: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
        }
        return null;
      };
      exports.borderRadius = borderRadius;
      borderRadius.propTypes = true ? {
        borderRadius: _responsivePropType.default
      } : {};
      borderRadius.filterProps = ["borderRadius"];
      var borders = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
      var _default = borders;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/cssGrid.js
  var require_cssGrid = __commonJS({
    "node_modules/@mui/system/cssGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.rowGap = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridTemplateAreas = exports.gridRow = exports.gridColumn = exports.gridAutoRows = exports.gridAutoFlow = exports.gridAutoColumns = exports.gridArea = exports.gap = exports.default = exports.columnGap = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var gap = (props) => {
        if (props.gap !== void 0 && props.gap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "gap");
          const styleFromPropValue = (propValue) => ({
            gap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
        }
        return null;
      };
      exports.gap = gap;
      gap.propTypes = true ? {
        gap: _responsivePropType.default
      } : {};
      gap.filterProps = ["gap"];
      var columnGap = (props) => {
        if (props.columnGap !== void 0 && props.columnGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "columnGap");
          const styleFromPropValue = (propValue) => ({
            columnGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
        }
        return null;
      };
      exports.columnGap = columnGap;
      columnGap.propTypes = true ? {
        columnGap: _responsivePropType.default
      } : {};
      columnGap.filterProps = ["columnGap"];
      var rowGap = (props) => {
        if (props.rowGap !== void 0 && props.rowGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "rowGap");
          const styleFromPropValue = (propValue) => ({
            rowGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
        }
        return null;
      };
      exports.rowGap = rowGap;
      rowGap.propTypes = true ? {
        rowGap: _responsivePropType.default
      } : {};
      rowGap.filterProps = ["rowGap"];
      var gridColumn = (0, _style.default)({
        prop: "gridColumn"
      });
      exports.gridColumn = gridColumn;
      var gridRow = (0, _style.default)({
        prop: "gridRow"
      });
      exports.gridRow = gridRow;
      var gridAutoFlow = (0, _style.default)({
        prop: "gridAutoFlow"
      });
      exports.gridAutoFlow = gridAutoFlow;
      var gridAutoColumns = (0, _style.default)({
        prop: "gridAutoColumns"
      });
      exports.gridAutoColumns = gridAutoColumns;
      var gridAutoRows = (0, _style.default)({
        prop: "gridAutoRows"
      });
      exports.gridAutoRows = gridAutoRows;
      var gridTemplateColumns = (0, _style.default)({
        prop: "gridTemplateColumns"
      });
      exports.gridTemplateColumns = gridTemplateColumns;
      var gridTemplateRows = (0, _style.default)({
        prop: "gridTemplateRows"
      });
      exports.gridTemplateRows = gridTemplateRows;
      var gridTemplateAreas = (0, _style.default)({
        prop: "gridTemplateAreas"
      });
      exports.gridTemplateAreas = gridTemplateAreas;
      var gridArea = (0, _style.default)({
        prop: "gridArea"
      });
      exports.gridArea = gridArea;
      var grid = (0, _compose.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
      var _default = grid;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/palette.js
  var require_palette = __commonJS({
    "node_modules/@mui/system/palette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.color = exports.bgcolor = exports.backgroundColor = void 0;
      exports.paletteTransform = paletteTransform;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      function paletteTransform(value, userValue) {
        if (userValue === "grey") {
          return userValue;
        }
        return value;
      }
      var color = (0, _style.default)({
        prop: "color",
        themeKey: "palette",
        transform: paletteTransform
      });
      exports.color = color;
      var bgcolor = (0, _style.default)({
        prop: "bgcolor",
        cssProperty: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform
      });
      exports.bgcolor = bgcolor;
      var backgroundColor = (0, _style.default)({
        prop: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform
      });
      exports.backgroundColor = backgroundColor;
      var palette = (0, _compose.default)(color, bgcolor, backgroundColor);
      var _default = palette;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/sizing.js
  var require_sizing = __commonJS({
    "node_modules/@mui/system/sizing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.sizeWidth = exports.sizeHeight = exports.minWidth = exports.minHeight = exports.maxWidth = exports.maxHeight = exports.height = exports.default = exports.boxSizing = void 0;
      exports.sizingTransform = sizingTransform;
      exports.width = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _breakpoints = require_breakpoints();
      function sizingTransform(value) {
        return value <= 1 && value !== 0 ? `${value * 100}%` : value;
      }
      var width = (0, _style.default)({
        prop: "width",
        transform: sizingTransform
      });
      exports.width = width;
      var maxWidth = (props) => {
        if (props.maxWidth !== void 0 && props.maxWidth !== null) {
          const styleFromPropValue = (propValue) => {
            var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
            const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || _breakpoints.values[propValue];
            return {
              maxWidth: breakpoint || sizingTransform(propValue)
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
        }
        return null;
      };
      exports.maxWidth = maxWidth;
      maxWidth.filterProps = ["maxWidth"];
      var minWidth = (0, _style.default)({
        prop: "minWidth",
        transform: sizingTransform
      });
      exports.minWidth = minWidth;
      var height = (0, _style.default)({
        prop: "height",
        transform: sizingTransform
      });
      exports.height = height;
      var maxHeight = (0, _style.default)({
        prop: "maxHeight",
        transform: sizingTransform
      });
      exports.maxHeight = maxHeight;
      var minHeight = (0, _style.default)({
        prop: "minHeight",
        transform: sizingTransform
      });
      exports.minHeight = minHeight;
      var sizeWidth = (0, _style.default)({
        prop: "size",
        cssProperty: "width",
        transform: sizingTransform
      });
      exports.sizeWidth = sizeWidth;
      var sizeHeight = (0, _style.default)({
        prop: "size",
        cssProperty: "height",
        transform: sizingTransform
      });
      exports.sizeHeight = sizeHeight;
      var boxSizing = (0, _style.default)({
        prop: "boxSizing"
      });
      exports.boxSizing = boxSizing;
      var sizing = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
      var _default = sizing;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
  var require_defaultSxConfig = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _spacing = require_spacing();
      var _borders = require_borders();
      var _cssGrid = require_cssGrid();
      var _palette = require_palette();
      var _sizing = require_sizing();
      var defaultSxConfig2 = {
        // borders
        border: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderTop: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderRight: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderBottom: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderLeft: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderColor: {
          themeKey: "palette"
        },
        borderTopColor: {
          themeKey: "palette"
        },
        borderRightColor: {
          themeKey: "palette"
        },
        borderBottomColor: {
          themeKey: "palette"
        },
        borderLeftColor: {
          themeKey: "palette"
        },
        borderRadius: {
          themeKey: "shape.borderRadius",
          style: _borders.borderRadius
        },
        // palette
        color: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        bgcolor: {
          themeKey: "palette",
          cssProperty: "backgroundColor",
          transform: _palette.paletteTransform
        },
        backgroundColor: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        // spacing
        p: {
          style: _spacing.padding
        },
        pt: {
          style: _spacing.padding
        },
        pr: {
          style: _spacing.padding
        },
        pb: {
          style: _spacing.padding
        },
        pl: {
          style: _spacing.padding
        },
        px: {
          style: _spacing.padding
        },
        py: {
          style: _spacing.padding
        },
        padding: {
          style: _spacing.padding
        },
        paddingTop: {
          style: _spacing.padding
        },
        paddingRight: {
          style: _spacing.padding
        },
        paddingBottom: {
          style: _spacing.padding
        },
        paddingLeft: {
          style: _spacing.padding
        },
        paddingX: {
          style: _spacing.padding
        },
        paddingY: {
          style: _spacing.padding
        },
        paddingInline: {
          style: _spacing.padding
        },
        paddingInlineStart: {
          style: _spacing.padding
        },
        paddingInlineEnd: {
          style: _spacing.padding
        },
        paddingBlock: {
          style: _spacing.padding
        },
        paddingBlockStart: {
          style: _spacing.padding
        },
        paddingBlockEnd: {
          style: _spacing.padding
        },
        m: {
          style: _spacing.margin
        },
        mt: {
          style: _spacing.margin
        },
        mr: {
          style: _spacing.margin
        },
        mb: {
          style: _spacing.margin
        },
        ml: {
          style: _spacing.margin
        },
        mx: {
          style: _spacing.margin
        },
        my: {
          style: _spacing.margin
        },
        margin: {
          style: _spacing.margin
        },
        marginTop: {
          style: _spacing.margin
        },
        marginRight: {
          style: _spacing.margin
        },
        marginBottom: {
          style: _spacing.margin
        },
        marginLeft: {
          style: _spacing.margin
        },
        marginX: {
          style: _spacing.margin
        },
        marginY: {
          style: _spacing.margin
        },
        marginInline: {
          style: _spacing.margin
        },
        marginInlineStart: {
          style: _spacing.margin
        },
        marginInlineEnd: {
          style: _spacing.margin
        },
        marginBlock: {
          style: _spacing.margin
        },
        marginBlockStart: {
          style: _spacing.margin
        },
        marginBlockEnd: {
          style: _spacing.margin
        },
        // display
        displayPrint: {
          cssProperty: false,
          transform: (value) => ({
            "@media print": {
              display: value
            }
          })
        },
        display: {},
        overflow: {},
        textOverflow: {},
        visibility: {},
        whiteSpace: {},
        // flexbox
        flexBasis: {},
        flexDirection: {},
        flexWrap: {},
        justifyContent: {},
        alignItems: {},
        alignContent: {},
        order: {},
        flex: {},
        flexGrow: {},
        flexShrink: {},
        alignSelf: {},
        justifyItems: {},
        justifySelf: {},
        // grid
        gap: {
          style: _cssGrid.gap
        },
        rowGap: {
          style: _cssGrid.rowGap
        },
        columnGap: {
          style: _cssGrid.columnGap
        },
        gridColumn: {},
        gridRow: {},
        gridAutoFlow: {},
        gridAutoColumns: {},
        gridAutoRows: {},
        gridTemplateColumns: {},
        gridTemplateRows: {},
        gridTemplateAreas: {},
        gridArea: {},
        // positions
        position: {},
        zIndex: {
          themeKey: "zIndex"
        },
        top: {},
        right: {},
        bottom: {},
        left: {},
        // shadows
        boxShadow: {
          themeKey: "shadows"
        },
        // sizing
        width: {
          transform: _sizing.sizingTransform
        },
        maxWidth: {
          style: _sizing.maxWidth
        },
        minWidth: {
          transform: _sizing.sizingTransform
        },
        height: {
          transform: _sizing.sizingTransform
        },
        maxHeight: {
          transform: _sizing.sizingTransform
        },
        minHeight: {
          transform: _sizing.sizingTransform
        },
        boxSizing: {},
        // typography
        fontFamily: {
          themeKey: "typography"
        },
        fontSize: {
          themeKey: "typography"
        },
        fontStyle: {
          themeKey: "typography"
        },
        fontWeight: {
          themeKey: "typography"
        },
        letterSpacing: {},
        textTransform: {},
        lineHeight: {},
        textAlign: {},
        typography: {
          cssProperty: false,
          themeKey: "typography"
        }
      };
      var _default = defaultSxConfig2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
  var require_styleFunctionSx = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx;
      var _utils = require_utils();
      var _merge = _interopRequireDefault(require_merge());
      var _style = require_style();
      var _breakpoints = require_breakpoints();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function objectsHaveSameKeys(...objects) {
        const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
        const union = new Set(allKeys);
        return objects.every((object) => union.size === Object.keys(object).length);
      }
      function callIfFn(maybeFn, arg) {
        return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
      }
      function unstable_createStyleFunctionSx() {
        function getThemeValue(prop, val, theme, config) {
          const props = {
            [prop]: val,
            theme
          };
          const options = config[prop];
          if (!options) {
            return {
              [prop]: val
            };
          }
          const {
            cssProperty = prop,
            themeKey,
            transform,
            style
          } = options;
          if (val == null) {
            return null;
          }
          if (themeKey === "typography" && val === "inherit") {
            return {
              [prop]: val
            };
          }
          const themeMapping = (0, _style.getPath)(theme, themeKey) || {};
          if (style) {
            return style(props);
          }
          const styleFromPropValue = (propValueFinal) => {
            let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _utils.unstable_capitalize)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
        }
        function styleFunctionSx3(props) {
          var _theme$unstable_sxCon;
          const {
            sx,
            theme = {}
          } = props || {};
          if (!sx) {
            return null;
          }
          const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : _defaultSxConfig.default;
          function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === "function") {
              sxObject = sxInput(theme);
            } else if (typeof sxInput !== "object") {
              return sxInput;
            }
            if (!sxObject) {
              return null;
            }
            const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css3 = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey) => {
              const value = callIfFn(sxObject[styleKey], theme);
              if (value !== null && value !== void 0) {
                if (typeof value === "object") {
                  if (config[styleKey]) {
                    css3 = (0, _merge.default)(css3, getThemeValue(styleKey, value, theme, config));
                  } else {
                    const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                      theme
                    }, value, (x) => ({
                      [styleKey]: x
                    }));
                    if (objectsHaveSameKeys(breakpointsValues, value)) {
                      css3[styleKey] = styleFunctionSx3({
                        sx: value,
                        theme
                      });
                    } else {
                      css3 = (0, _merge.default)(css3, breakpointsValues);
                    }
                  }
                } else {
                  css3 = (0, _merge.default)(css3, getThemeValue(styleKey, value, theme, config));
                }
              }
            });
            return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css3);
          }
          return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
        }
        return styleFunctionSx3;
      }
      var styleFunctionSx2 = unstable_createStyleFunctionSx();
      styleFunctionSx2.filterProps = ["sx"];
      var _default = styleFunctionSx2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createTheme/createTheme.js
  var require_createTheme = __commonJS({
    "node_modules/@mui/system/createTheme/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _shape = _interopRequireDefault(require_shape());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function createTheme2(options = {}, ...args) {
        const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {},
          ...other
        } = options;
        const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
        const spacing = (0, _createSpacing.default)(spacingInput);
        let muiTheme = (0, _utils.deepmerge)({
          breakpoints,
          direction: "ltr",
          components: {},
          // Inject component definitions.
          palette: {
            mode: "light",
            ...paletteInput
          },
          spacing,
          shape: {
            ..._shape.default,
            ...shapeInput
          }
        }, other);
        muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
        muiTheme.unstable_sxConfig = {
          ..._defaultSxConfig.default,
          ...other == null ? void 0 : other.unstable_sxConfig
        };
        muiTheme.unstable_sx = function sx(props) {
          return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var _default = createTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createTheme/index.js
  var require_createTheme2 = __commonJS({
    "node_modules/@mui/system/createTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      var _createTheme = _interopRequireDefault(require_createTheme());
    }
  });

  // node_modules/@mui/system/useThemeWithoutDefault.js
  var require_useThemeWithoutDefault = __commonJS({
    "node_modules/@mui/system/useThemeWithoutDefault.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _styledEngine = require_node();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function isObjectEmpty(obj) {
        return Object.keys(obj).length === 0;
      }
      function useTheme4(defaultTheme2 = null) {
        const contextTheme = React16.useContext(_styledEngine.ThemeContext);
        return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme2 : contextTheme;
      }
      var _default = useTheme4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/useTheme.js
  var require_useTheme = __commonJS({
    "node_modules/@mui/system/useTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.systemDefaultTheme = exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var systemDefaultTheme = (0, _createTheme.default)();
      exports.systemDefaultTheme = systemDefaultTheme;
      function useTheme4(defaultTheme2 = systemDefaultTheme) {
        return (0, _useThemeWithoutDefault.default)(defaultTheme2);
      }
      var _default = useTheme4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles3 = __commonJS({
    "node_modules/@mui/system/GlobalStyles/GlobalStyles.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _styledEngine = require_node();
      var _useTheme = _interopRequireDefault(require_useTheme());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function GlobalStyles({
        styles,
        themeId,
        defaultTheme: defaultTheme2 = {}
      }) {
        const upperTheme = (0, _useTheme.default)(defaultTheme2);
        const globalStyles = typeof styles === "function" ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        defaultTheme: _propTypes.default.object,
        /**
         * @ignore
         */
        styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.func, _propTypes.default.number, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool]),
        /**
         * @ignore
         */
        themeId: _propTypes.default.string
      } : void 0;
      var _default = GlobalStyles;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/GlobalStyles/index.js
  var require_GlobalStyles4 = __commonJS({
    "node_modules/@mui/system/GlobalStyles/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireWildcard(require_GlobalStyles3());
      Object.keys(_GlobalStyles).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _GlobalStyles[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _GlobalStyles[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/display.js
  var require_display = __commonJS({
    "node_modules/@mui/system/display.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.whiteSpace = exports.visibility = exports.textOverflow = exports.overflow = exports.displayRaw = exports.displayPrint = exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var displayPrint = (0, _style.default)({
        prop: "displayPrint",
        cssProperty: false,
        transform: (value) => ({
          "@media print": {
            display: value
          }
        })
      });
      exports.displayPrint = displayPrint;
      var displayRaw = (0, _style.default)({
        prop: "display"
      });
      exports.displayRaw = displayRaw;
      var overflow = (0, _style.default)({
        prop: "overflow"
      });
      exports.overflow = overflow;
      var textOverflow = (0, _style.default)({
        prop: "textOverflow"
      });
      exports.textOverflow = textOverflow;
      var visibility = (0, _style.default)({
        prop: "visibility"
      });
      exports.visibility = visibility;
      var whiteSpace = (0, _style.default)({
        prop: "whiteSpace"
      });
      exports.whiteSpace = whiteSpace;
      var _default = (0, _compose.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/flexbox.js
  var require_flexbox = __commonJS({
    "node_modules/@mui/system/flexbox.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.order = exports.justifySelf = exports.justifyItems = exports.justifyContent = exports.flexWrap = exports.flexShrink = exports.flexGrow = exports.flexDirection = exports.flexBasis = exports.flex = exports.default = exports.alignSelf = exports.alignItems = exports.alignContent = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var flexBasis = (0, _style.default)({
        prop: "flexBasis"
      });
      exports.flexBasis = flexBasis;
      var flexDirection = (0, _style.default)({
        prop: "flexDirection"
      });
      exports.flexDirection = flexDirection;
      var flexWrap = (0, _style.default)({
        prop: "flexWrap"
      });
      exports.flexWrap = flexWrap;
      var justifyContent = (0, _style.default)({
        prop: "justifyContent"
      });
      exports.justifyContent = justifyContent;
      var alignItems = (0, _style.default)({
        prop: "alignItems"
      });
      exports.alignItems = alignItems;
      var alignContent = (0, _style.default)({
        prop: "alignContent"
      });
      exports.alignContent = alignContent;
      var order = (0, _style.default)({
        prop: "order"
      });
      exports.order = order;
      var flex = (0, _style.default)({
        prop: "flex"
      });
      exports.flex = flex;
      var flexGrow = (0, _style.default)({
        prop: "flexGrow"
      });
      exports.flexGrow = flexGrow;
      var flexShrink = (0, _style.default)({
        prop: "flexShrink"
      });
      exports.flexShrink = flexShrink;
      var alignSelf = (0, _style.default)({
        prop: "alignSelf"
      });
      exports.alignSelf = alignSelf;
      var justifyItems = (0, _style.default)({
        prop: "justifyItems"
      });
      exports.justifyItems = justifyItems;
      var justifySelf = (0, _style.default)({
        prop: "justifySelf"
      });
      exports.justifySelf = justifySelf;
      var flexbox = (0, _compose.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
      var _default = flexbox;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/positions.js
  var require_positions = __commonJS({
    "node_modules/@mui/system/positions.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.zIndex = exports.top = exports.right = exports.position = exports.left = exports.default = exports.bottom = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var position2 = (0, _style.default)({
        prop: "position"
      });
      exports.position = position2;
      var zIndex2 = (0, _style.default)({
        prop: "zIndex",
        themeKey: "zIndex"
      });
      exports.zIndex = zIndex2;
      var top = (0, _style.default)({
        prop: "top"
      });
      exports.top = top;
      var right = (0, _style.default)({
        prop: "right"
      });
      exports.right = right;
      var bottom = (0, _style.default)({
        prop: "bottom"
      });
      exports.bottom = bottom;
      var left = (0, _style.default)({
        prop: "left"
      });
      exports.left = left;
      var _default = (0, _compose.default)(position2, zIndex2, top, right, bottom, left);
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/shadows.js
  var require_shadows = __commonJS({
    "node_modules/@mui/system/shadows.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var boxShadow = (0, _style.default)({
        prop: "boxShadow",
        themeKey: "shadows"
      });
      var _default = boxShadow;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/typography.js
  var require_typography = __commonJS({
    "node_modules/@mui/system/typography.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.typographyVariant = exports.textTransform = exports.textAlign = exports.lineHeight = exports.letterSpacing = exports.fontWeight = exports.fontStyle = exports.fontSize = exports.fontFamily = exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var fontFamily = (0, _style.default)({
        prop: "fontFamily",
        themeKey: "typography"
      });
      exports.fontFamily = fontFamily;
      var fontSize = (0, _style.default)({
        prop: "fontSize",
        themeKey: "typography"
      });
      exports.fontSize = fontSize;
      var fontStyle = (0, _style.default)({
        prop: "fontStyle",
        themeKey: "typography"
      });
      exports.fontStyle = fontStyle;
      var fontWeight = (0, _style.default)({
        prop: "fontWeight",
        themeKey: "typography"
      });
      exports.fontWeight = fontWeight;
      var letterSpacing = (0, _style.default)({
        prop: "letterSpacing"
      });
      exports.letterSpacing = letterSpacing;
      var textTransform = (0, _style.default)({
        prop: "textTransform"
      });
      exports.textTransform = textTransform;
      var lineHeight = (0, _style.default)({
        prop: "lineHeight"
      });
      exports.lineHeight = lineHeight;
      var textAlign = (0, _style.default)({
        prop: "textAlign"
      });
      exports.textAlign = textAlign;
      var typographyVariant = (0, _style.default)({
        prop: "typography",
        cssProperty: false,
        themeKey: "typography"
      });
      exports.typographyVariant = typographyVariant;
      var typography = (0, _compose.default)(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
      var _default = typography;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/extendSxProp.js
  var require_extendSxProp = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = extendSxProp;
      var _utils = require_utils();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var splitProps = (props) => {
        var _props$theme$unstable, _props$theme;
        const result = {
          systemProps: {},
          otherProps: {}
        };
        const config = (_props$theme$unstable = props == null ? void 0 : (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : _defaultSxConfig.default;
        Object.keys(props).forEach((prop) => {
          if (config[prop]) {
            result.systemProps[prop] = props[prop];
          } else {
            result.otherProps[prop] = props[prop];
          }
        });
        return result;
      };
      function extendSxProp(props) {
        const {
          sx: inSx,
          ...other
        } = props;
        const {
          systemProps,
          otherProps
        } = splitProps(other);
        let finalSx;
        if (Array.isArray(inSx)) {
          finalSx = [systemProps, ...inSx];
        } else if (typeof inSx === "function") {
          finalSx = (...args) => {
            const result = inSx(...args);
            if (!(0, _utils.isPlainObject)(result)) {
              return systemProps;
            }
            return {
              ...systemProps,
              ...result
            };
          };
        } else {
          finalSx = {
            ...systemProps,
            ...inSx
          };
        }
        return {
          ...otherProps,
          sx: finalSx
        };
      }
    }
  });

  // node_modules/@mui/system/styleFunctionSx/index.js
  var require_styleFunctionSx2 = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "extendSxProp", {
        enumerable: true,
        get: function() {
          return _extendSxProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports, "unstable_defaultSxConfig", {
        enumerable: true,
        get: function() {
          return _defaultSxConfig.default;
        }
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
      var _extendSxProp = _interopRequireDefault(require_extendSxProp());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/getThemeValue.js
  var require_getThemeValue = __commonJS({
    "node_modules/@mui/system/getThemeValue.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.styleFunctionMapping = exports.propToStyleFunction = exports.default = void 0;
      var _borders = _interopRequireDefault(require_borders());
      var _display = _interopRequireDefault(require_display());
      var _flexbox = _interopRequireDefault(require_flexbox());
      var _cssGrid = _interopRequireDefault(require_cssGrid());
      var _positions = _interopRequireDefault(require_positions());
      var _palette = _interopRequireDefault(require_palette());
      var _shadows = _interopRequireDefault(require_shadows());
      var _sizing = _interopRequireDefault(require_sizing());
      var _spacing = _interopRequireDefault(require_spacing());
      var _typography = _interopRequireDefault(require_typography());
      var filterPropsMapping = {
        borders: _borders.default.filterProps,
        display: _display.default.filterProps,
        flexbox: _flexbox.default.filterProps,
        grid: _cssGrid.default.filterProps,
        positions: _positions.default.filterProps,
        palette: _palette.default.filterProps,
        shadows: _shadows.default.filterProps,
        sizing: _sizing.default.filterProps,
        spacing: _spacing.default.filterProps,
        typography: _typography.default.filterProps
      };
      var styleFunctionMapping = {
        borders: _borders.default,
        display: _display.default,
        flexbox: _flexbox.default,
        grid: _cssGrid.default,
        positions: _positions.default,
        palette: _palette.default,
        shadows: _shadows.default,
        sizing: _sizing.default,
        spacing: _spacing.default,
        typography: _typography.default
      };
      exports.styleFunctionMapping = styleFunctionMapping;
      var propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
        filterPropsMapping[styleFnName].forEach((propName) => {
          acc[propName] = styleFunctionMapping[styleFnName];
        });
        return acc;
      }, {});
      exports.propToStyleFunction = propToStyleFunction;
      function getThemeValue(prop, value, theme) {
        const inputProps = {
          [prop]: value,
          theme
        };
        const styleFunction = propToStyleFunction[prop];
        return styleFunction ? styleFunction(inputProps) : {
          [prop]: value
        };
      }
      var _default = getThemeValue;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createBox.js
  var require_createBox = __commonJS({
    "node_modules/@mui/system/createBox.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createBox;
      var React16 = _interopRequireWildcard(require_react());
      var _clsx = _interopRequireDefault(require_clsx());
      var _styledEngine = _interopRequireDefault(require_node());
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
      var _useTheme = _interopRequireDefault(require_useTheme());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function createBox(options = {}) {
        const {
          themeId,
          defaultTheme: defaultTheme2,
          defaultClassName = "MuiBox-root",
          generateClassName
        } = options;
        const BoxRoot = (0, _styledEngine.default)("div", {
          shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
        })(_styleFunctionSx.default);
        const Box = /* @__PURE__ */ React16.forwardRef(function Box2(inProps, ref) {
          const theme = (0, _useTheme.default)(defaultTheme2);
          const {
            className,
            component = "div",
            ...other
          } = (0, _styleFunctionSx.extendSxProp)(inProps);
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(BoxRoot, {
            as: component,
            ref,
            className: (0, _clsx.default)(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
            theme: themeId ? theme[themeId] || theme : theme,
            ...other
          });
        });
        return Box;
      }
    }
  });

  // node_modules/@mui/system/Box/Box.js
  var require_Box = __commonJS({
    "node_modules/@mui/system/Box/Box.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createBox = _interopRequireDefault(require_createBox());
      var Box = (0, _createBox.default)();
      true ? Box.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit the d.ts file and run "yarn proptypes"     |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * The system prop that allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      var _default = Box;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Box/index.js
  var require_Box2 = __commonJS({
    "node_modules/@mui/system/Box/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Box.default;
        }
      });
      var _Box = _interopRequireDefault(require_Box());
    }
  });

  // node_modules/@mui/system/propsToClassKey.js
  var require_propsToClassKey = __commonJS({
    "node_modules/@mui/system/propsToClassKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = propsToClassKey;
      var _utils = require_utils();
      function isEmpty(string) {
        return string.length === 0;
      }
      function propsToClassKey(props) {
        const {
          variant,
          ...other
        } = props;
        let classKey = variant || "";
        Object.keys(other).sort().forEach((key) => {
          if (key === "color") {
            classKey += isEmpty(classKey) ? props[key] : (0, _utils.unstable_capitalize)(props[key]);
          } else {
            classKey += `${isEmpty(classKey) ? key : (0, _utils.unstable_capitalize)(key)}${(0, _utils.unstable_capitalize)(props[key].toString())}`;
          }
        });
        return classKey;
      }
    }
  });

  // node_modules/@mui/system/createStyled.js
  var require_createStyled = __commonJS({
    "node_modules/@mui/system/createStyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStyled4;
      exports.shouldForwardProp = shouldForwardProp2;
      exports.systemDefaultTheme = void 0;
      var _styledEngine = _interopRequireWildcard(require_node());
      var _utils = require_utils();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _propsToClassKey = _interopRequireDefault(require_propsToClassKey());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function isEmpty(obj) {
        return Object.keys(obj).length === 0;
      }
      function isStringTag(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96;
      }
      var getStyleOverrides = (name, theme) => {
        if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
          return theme.components[name].styleOverrides;
        }
        return null;
      };
      var getVariantStyles = (name, theme) => {
        let variants = [];
        if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
          variants = theme.components[name].variants;
        }
        const variantsStyles = {};
        variants.forEach((definition) => {
          const key = (0, _propsToClassKey.default)(definition.props);
          variantsStyles[key] = definition.style;
        });
        return variantsStyles;
      };
      var variantsResolver = (props, styles, theme, name) => {
        var _theme$components, _theme$components$nam;
        const {
          ownerState = {}
        } = props;
        const variantsStyles = [];
        const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
        if (themeVariants) {
          themeVariants.forEach((themeVariant) => {
            let isMatch = true;
            Object.keys(themeVariant.props).forEach((key) => {
              if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
                isMatch = false;
              }
            });
            if (isMatch) {
              variantsStyles.push(styles[(0, _propsToClassKey.default)(themeVariant.props)]);
            }
          });
        }
        return variantsStyles;
      };
      function shouldForwardProp2(prop) {
        return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
      }
      var systemDefaultTheme = (0, _createTheme.default)();
      exports.systemDefaultTheme = systemDefaultTheme;
      var lowercaseFirstLetter = (string) => {
        return string.charAt(0).toLowerCase() + string.slice(1);
      };
      function resolveTheme({
        defaultTheme: defaultTheme2,
        theme,
        themeId
      }) {
        return isEmpty(theme) ? defaultTheme2 : theme[themeId] || theme;
      }
      function createStyled4(input = {}) {
        const {
          themeId,
          defaultTheme: defaultTheme2 = systemDefaultTheme,
          rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp2,
          slotShouldForwardProp = shouldForwardProp2
        } = input;
        const systemSx = (props) => {
          return (0, _styleFunctionSx.default)({
            ...props,
            theme: resolveTheme({
              ...props,
              defaultTheme: defaultTheme2,
              themeId
            })
          });
        };
        systemSx.__mui_systemSx = true;
        return (tag, inputOptions = {}) => {
          (0, _styledEngine.internal_processStyles)(tag, (styles) => styles.filter((style) => !(style != null && style.__mui_systemSx)));
          const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            overridesResolver,
            ...options
          } = inputOptions;
          const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : componentSlot && componentSlot !== "Root" || false;
          const skipSx = inputSkipSx || false;
          let label;
          if (true) {
            if (componentName) {
              label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
            }
          }
          let shouldForwardPropOption = shouldForwardProp2;
          if (componentSlot === "Root") {
            shouldForwardPropOption = rootShouldForwardProp2;
          } else if (componentSlot) {
            shouldForwardPropOption = slotShouldForwardProp;
          } else if (isStringTag(tag)) {
            shouldForwardPropOption = void 0;
          }
          const defaultStyledResolver = (0, _styledEngine.default)(tag, {
            shouldForwardProp: shouldForwardPropOption,
            label,
            ...options
          });
          const muiStyledResolver = (styleArg, ...expressions) => {
            const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
              return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (props) => {
                return stylesArg({
                  ...props,
                  theme: resolveTheme({
                    ...props,
                    defaultTheme: defaultTheme2,
                    themeId
                  })
                });
              } : stylesArg;
            }) : [];
            let transformedStyleArg = styleArg;
            if (componentName && overridesResolver) {
              expressionsWithDefaultTheme.push((props) => {
                const theme = resolveTheme({
                  ...props,
                  defaultTheme: defaultTheme2,
                  themeId
                });
                const styleOverrides = getStyleOverrides(componentName, theme);
                if (styleOverrides) {
                  const resolvedStyleOverrides = {};
                  Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                    resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle({
                      ...props,
                      theme
                    }) : slotStyle;
                  });
                  return overridesResolver(props, resolvedStyleOverrides);
                }
                return null;
              });
            }
            if (componentName && !skipVariantsResolver) {
              expressionsWithDefaultTheme.push((props) => {
                const theme = resolveTheme({
                  ...props,
                  defaultTheme: defaultTheme2,
                  themeId
                });
                return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
              });
            }
            if (!skipSx) {
              expressionsWithDefaultTheme.push(systemSx);
            }
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
              const placeholders = new Array(numOfCustomFnsApplied).fill("");
              transformedStyleArg = [...styleArg, ...placeholders];
              transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
            } else if (typeof styleArg === "function" && // On the server Emotion doesn't use React.forwardRef for creating components, so the created
            // component stays as a function. This condition makes sure that we do not interpolate functions
            // which are basically components used as a selectors.
            styleArg.__emotion_real !== styleArg) {
              transformedStyleArg = (props) => styleArg({
                ...props,
                theme: resolveTheme({
                  ...props,
                  defaultTheme: defaultTheme2,
                  themeId
                })
              });
            }
            const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            if (true) {
              let displayName;
              if (componentName) {
                displayName = `${componentName}${componentSlot || ""}`;
              }
              if (displayName === void 0) {
                displayName = `Styled(${(0, _utils.getDisplayName)(tag)})`;
              }
              Component.displayName = displayName;
            }
            if (tag.muiName) {
              Component.muiName = tag.muiName;
            }
            return Component;
          };
          if (defaultStyledResolver.withConfig) {
            muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
          }
          return muiStyledResolver;
        };
      }
    }
  });

  // node_modules/@mui/system/styled.js
  var require_styled = __commonJS({
    "node_modules/@mui/system/styled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createStyled = _interopRequireDefault(require_createStyled());
      var styled2 = (0, _createStyled.default)();
      var _default = styled2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/useThemeProps/getThemeProps.js
  var require_getThemeProps = __commonJS({
    "node_modules/@mui/system/useThemeProps/getThemeProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getThemeProps;
      var _utils = require_utils();
      function getThemeProps(params) {
        const {
          theme,
          name,
          props
        } = params;
        if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
          return props;
        }
        return (0, _utils.internal_resolveProps)(theme.components[name].defaultProps, props);
      }
    }
  });

  // node_modules/@mui/system/useThemeProps/useThemeProps.js
  var require_useThemeProps = __commonJS({
    "node_modules/@mui/system/useThemeProps/useThemeProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useThemeProps2;
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
      var _useTheme = _interopRequireDefault(require_useTheme());
      function useThemeProps2({
        props,
        name,
        defaultTheme: defaultTheme2,
        themeId
      }) {
        let theme = (0, _useTheme.default)(defaultTheme2);
        if (themeId) {
          theme = theme[themeId] || theme;
        }
        const mergedProps = (0, _getThemeProps.default)({
          theme,
          name,
          props
        });
        return mergedProps;
      }
    }
  });

  // node_modules/@mui/system/useThemeProps/index.js
  var require_useThemeProps2 = __commonJS({
    "node_modules/@mui/system/useThemeProps/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useThemeProps.default;
        }
      });
      Object.defineProperty(exports, "getThemeProps", {
        enumerable: true,
        get: function() {
          return _getThemeProps.default;
        }
      });
      var _useThemeProps = _interopRequireDefault(require_useThemeProps());
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
    }
  });

  // node_modules/@mui/system/colorManipulator.js
  var require_colorManipulator = __commonJS({
    "node_modules/@mui/system/colorManipulator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.alpha = alpha2;
      exports.colorChannel = void 0;
      exports.darken = darken3;
      exports.decomposeColor = decomposeColor2;
      exports.emphasize = emphasize2;
      exports.getContrastRatio = getContrastRatio3;
      exports.getLuminance = getLuminance2;
      exports.hexToRgb = hexToRgb2;
      exports.hslToRgb = hslToRgb2;
      exports.lighten = lighten3;
      exports.private_safeAlpha = private_safeAlpha;
      exports.private_safeColorChannel = void 0;
      exports.private_safeDarken = private_safeDarken;
      exports.private_safeEmphasize = private_safeEmphasize;
      exports.private_safeLighten = private_safeLighten;
      exports.recomposeColor = recomposeColor2;
      exports.rgbToHex = rgbToHex2;
      var _utils = require_utils();
      function clamp(value, min = 0, max = 1) {
        if (true) {
          if (value < min || value > max) {
            console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
          }
        }
        return Math.min(Math.max(min, value), max);
      }
      function hexToRgb2(color) {
        color = color.slice(1);
        const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, "g");
        let colors = color.match(re);
        if (colors && colors[0].length === 1) {
          colors = colors.map((n) => n + n);
        }
        return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
          return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
        }).join(", ")})` : "";
      }
      function intToHex(int) {
        const hex = int.toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }
      function decomposeColor2(color) {
        if (color.type) {
          return color;
        }
        if (color.charAt(0) === "#") {
          return decomposeColor2(hexToRgb2(color));
        }
        const marker = color.indexOf("(");
        const type = color.substring(0, marker);
        if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
          throw new Error(true ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));
        }
        let values = color.substring(marker + 1, color.length - 1);
        let colorSpace;
        if (type === "color") {
          values = values.split(" ");
          colorSpace = values.shift();
          if (values.length === 4 && values[3].charAt(0) === "/") {
            values[3] = values[3].slice(1);
          }
          if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
            throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));
          }
        } else {
          values = values.split(",");
        }
        values = values.map((value) => parseFloat(value));
        return {
          type,
          values,
          colorSpace
        };
      }
      var colorChannel = (color) => {
        const decomposedColor = decomposeColor2(color);
        return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
      };
      exports.colorChannel = colorChannel;
      var private_safeColorChannel = (color, warning) => {
        try {
          return colorChannel(color);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color;
        }
      };
      exports.private_safeColorChannel = private_safeColorChannel;
      function recomposeColor2(color) {
        const {
          type,
          colorSpace
        } = color;
        let {
          values
        } = color;
        if (type.indexOf("rgb") !== -1) {
          values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
        } else if (type.indexOf("hsl") !== -1) {
          values[1] = `${values[1]}%`;
          values[2] = `${values[2]}%`;
        }
        if (type.indexOf("color") !== -1) {
          values = `${colorSpace} ${values.join(" ")}`;
        } else {
          values = `${values.join(", ")}`;
        }
        return `${type}(${values})`;
      }
      function rgbToHex2(color) {
        if (color.indexOf("#") === 0) {
          return color;
        }
        const {
          values
        } = decomposeColor2(color);
        return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
      }
      function hslToRgb2(color) {
        color = decomposeColor2(color);
        const {
          values
        } = color;
        const h = values[0];
        const s = values[1] / 100;
        const l = values[2] / 100;
        const a = s * Math.min(l, 1 - l);
        const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        let type = "rgb";
        const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        if (color.type === "hsla") {
          type += "a";
          rgb.push(values[3]);
        }
        return recomposeColor2({
          type,
          values: rgb
        });
      }
      function getLuminance2(color) {
        color = decomposeColor2(color);
        let rgb = color.type === "hsl" || color.type === "hsla" ? decomposeColor2(hslToRgb2(color)).values : color.values;
        rgb = rgb.map((val) => {
          if (color.type !== "color") {
            val /= 255;
          }
          return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
        });
        return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
      }
      function getContrastRatio3(foreground, background) {
        const lumA = getLuminance2(foreground);
        const lumB = getLuminance2(background);
        return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
      }
      function alpha2(color, value) {
        color = decomposeColor2(color);
        value = clamp(value);
        if (color.type === "rgb" || color.type === "hsl") {
          color.type += "a";
        }
        if (color.type === "color") {
          color.values[3] = `/${value}`;
        } else {
          color.values[3] = value;
        }
        return recomposeColor2(color);
      }
      function private_safeAlpha(color, value, warning) {
        try {
          return alpha2(color, value);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color;
        }
      }
      function darken3(color, coefficient) {
        color = decomposeColor2(color);
        coefficient = clamp(coefficient);
        if (color.type.indexOf("hsl") !== -1) {
          color.values[2] *= 1 - coefficient;
        } else if (color.type.indexOf("rgb") !== -1 || color.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] *= 1 - coefficient;
          }
        }
        return recomposeColor2(color);
      }
      function private_safeDarken(color, coefficient, warning) {
        try {
          return darken3(color, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color;
        }
      }
      function lighten3(color, coefficient) {
        color = decomposeColor2(color);
        coefficient = clamp(coefficient);
        if (color.type.indexOf("hsl") !== -1) {
          color.values[2] += (100 - color.values[2]) * coefficient;
        } else if (color.type.indexOf("rgb") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] += (255 - color.values[i]) * coefficient;
          }
        } else if (color.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] += (1 - color.values[i]) * coefficient;
          }
        }
        return recomposeColor2(color);
      }
      function private_safeLighten(color, coefficient, warning) {
        try {
          return lighten3(color, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color;
        }
      }
      function emphasize2(color, coefficient = 0.15) {
        return getLuminance2(color) > 0.5 ? darken3(color, coefficient) : lighten3(color, coefficient);
      }
      function private_safeEmphasize(color, coefficient, warning) {
        try {
          return private_safeEmphasize(color, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color;
        }
      }
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/ThemeContext.js
  var require_ThemeContext = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/ThemeContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var ThemeContext2 = /* @__PURE__ */ React16.createContext(null);
      if (true) {
        ThemeContext2.displayName = "ThemeContext";
      }
      var _default = ThemeContext2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/useTheme.js
  var require_useTheme2 = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/useTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useTheme4;
      var React16 = _interopRequireWildcard(require_react());
      var _ThemeContext = _interopRequireDefault(require_ThemeContext());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useTheme4() {
        const theme = React16.useContext(_ThemeContext.default);
        if (true) {
          React16.useDebugValue(theme);
        }
        return theme;
      }
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/index.js
  var require_useTheme3 = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      var _useTheme = _interopRequireDefault(require_useTheme2());
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/nested.js
  var require_nested = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/nested.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var _default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
      exports.default = _default;
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/ThemeProvider.js
  var require_ThemeProvider = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/ThemeProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _ThemeContext = _interopRequireDefault(require_ThemeContext());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _nested = _interopRequireDefault(require_nested());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function mergeOuterLocalTheme(outerTheme, localTheme) {
        if (typeof localTheme === "function") {
          const mergedTheme = localTheme(outerTheme);
          if (true) {
            if (!mergedTheme) {
              console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
            }
          }
          return mergedTheme;
        }
        return {
          ...outerTheme,
          ...localTheme
        };
      }
      function ThemeProvider3(props) {
        const {
          children,
          theme: localTheme
        } = props;
        const outerTheme = (0, _useTheme.default)();
        if (true) {
          if (outerTheme === null && typeof localTheme === "function") {
            console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
          }
        }
        const theme = React16.useMemo(() => {
          const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
          if (output != null) {
            output[_nested.default] = outerTheme !== null;
          }
          return output;
        }, [localTheme, outerTheme]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeContext.default.Provider, {
          value: theme,
          children
        });
      }
      true ? ThemeProvider3.propTypes = {
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * A theme object. You can provide a function to extend the outer theme.
         */
        theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired
      } : void 0;
      if (true) {
        true ? ThemeProvider3.propTypes = (0, _utils.exactProp)(ThemeProvider3.propTypes) : void 0;
      }
      var _default = ThemeProvider3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/index.js
  var require_ThemeProvider2 = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "unstable_nested", {
        enumerable: true,
        get: function() {
          return _nested.default;
        }
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider());
      var _nested = _interopRequireDefault(require_nested());
    }
  });

  // node_modules/@mui/private-theming/node/index.js
  var require_node2 = __commonJS({
    "node_modules/@mui/private-theming/node/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        ThemeProvider: true,
        useTheme: true
      };
      Object.defineProperty(exports, "ThemeProvider", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "useTheme", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      var _ThemeProvider = _interopRequireWildcard(require_ThemeProvider2());
      Object.keys(_ThemeProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ThemeProvider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ThemeProvider[key];
          }
        });
      });
      var _useTheme = _interopRequireDefault(require_useTheme3());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/ThemeProvider/ThemeProvider.js
  var require_ThemeProvider3 = __commonJS({
    "node_modules/@mui/system/ThemeProvider/ThemeProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _privateTheming = require_node2();
      var _utils = require_utils();
      var _styledEngine = require_node();
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var EMPTY_THEME = {};
      function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
        return React16.useMemo(() => {
          const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
          if (typeof localTheme === "function") {
            const mergedTheme = localTheme(resolvedTheme);
            const result = themeId ? {
              ...upperTheme,
              [themeId]: mergedTheme
            } : mergedTheme;
            if (isPrivate) {
              return () => result;
            }
            return result;
          }
          return themeId ? {
            ...upperTheme,
            [themeId]: localTheme
          } : {
            ...upperTheme,
            ...localTheme
          };
        }, [themeId, upperTheme, localTheme, isPrivate]);
      }
      function ThemeProvider3(props) {
        const {
          children,
          theme: localTheme,
          themeId
        } = props;
        const upperTheme = (0, _useThemeWithoutDefault.default)(EMPTY_THEME);
        const upperPrivateTheme = (0, _privateTheming.useTheme)() || EMPTY_THEME;
        if (true) {
          if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
            console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
          }
        }
        const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
        const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_privateTheming.ThemeProvider, {
          theme: privateTheme,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.ThemeContext.Provider, {
            value: engineTheme,
            children
          })
        });
      }
      true ? ThemeProvider3.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit the d.ts file and run "yarn proptypes"     |
        // ----------------------------------------------------------------------
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * A theme object. You can provide a function to extend the outer theme.
         */
        theme: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]).isRequired,
        /**
         * The design system's unique id for getting the corresponded theme when there are multiple design systems.
         */
        themeId: _propTypes.default.string
      } : void 0;
      if (true) {
        true ? ThemeProvider3.propTypes = (0, _utils.exactProp)(ThemeProvider3.propTypes) : void 0;
      }
      var _default = ThemeProvider3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/ThemeProvider/index.js
  var require_ThemeProvider4 = __commonJS({
    "node_modules/@mui/system/ThemeProvider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider3());
    }
  });

  // node_modules/@mui/system/cssVars/getInitColorSchemeScript.js
  var require_getInitColorSchemeScript = __commonJS({
    "node_modules/@mui/system/cssVars/getInitColorSchemeScript.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DEFAULT_MODE_STORAGE_KEY = exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports.DEFAULT_ATTRIBUTE = void 0;
      exports.default = getInitColorSchemeScript;
      var React16 = _interopRequireWildcard(require_react());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var DEFAULT_MODE_STORAGE_KEY = "mode";
      exports.DEFAULT_MODE_STORAGE_KEY = DEFAULT_MODE_STORAGE_KEY;
      var DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
      exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = DEFAULT_COLOR_SCHEME_STORAGE_KEY;
      var DEFAULT_ATTRIBUTE = "data-color-scheme";
      exports.DEFAULT_ATTRIBUTE = DEFAULT_ATTRIBUTE;
      function getInitColorSchemeScript(options) {
        const {
          defaultMode = "light",
          defaultLightColorScheme = "light",
          defaultDarkColorScheme = "dark",
          modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          attribute = DEFAULT_ATTRIBUTE,
          colorSchemeNode = "document.documentElement"
        } = options || {};
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)("script", {
          // eslint-disable-next-line react/no-danger
          dangerouslySetInnerHTML: {
            __html: `(function() { try {
        var mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
        var cssColorScheme = mode;
        var colorScheme = '';
        if (mode === 'system') {
          // handle system mode
          var mql = window.matchMedia('(prefers-color-scheme: dark)');
          if (mql.matches) {
            cssColorScheme = 'dark';
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
          } else {
            cssColorScheme = 'light';
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
          }
        }
        if (mode === 'light') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
        }
        if (mode === 'dark') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
        }
        if (colorScheme) {
          ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);
        }
      } catch (e) {} })();`
          }
        }, "mui-color-scheme-init");
      }
    }
  });

  // node_modules/@mui/system/cssVars/useCurrentColorScheme.js
  var require_useCurrentColorScheme = __commonJS({
    "node_modules/@mui/system/cssVars/useCurrentColorScheme.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useCurrentColorScheme;
      exports.getColorScheme = getColorScheme;
      exports.getSystemMode = getSystemMode;
      var React16 = _interopRequireWildcard(require_react());
      var _getInitColorSchemeScript = require_getInitColorSchemeScript();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getSystemMode(mode) {
        if (typeof window !== "undefined" && mode === "system") {
          const mql = window.matchMedia("(prefers-color-scheme: dark)");
          if (mql.matches) {
            return "dark";
          }
          return "light";
        }
        return void 0;
      }
      function processState(state, callback) {
        if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
          return callback("light");
        }
        if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
          return callback("dark");
        }
        return void 0;
      }
      function getColorScheme(state) {
        return processState(state, (mode) => {
          if (mode === "light") {
            return state.lightColorScheme;
          }
          if (mode === "dark") {
            return state.darkColorScheme;
          }
          return void 0;
        });
      }
      function initializeValue(key, defaultValue) {
        if (typeof window === "undefined") {
          return void 0;
        }
        let value;
        try {
          value = localStorage.getItem(key) || void 0;
          if (!value) {
            localStorage.setItem(key, defaultValue);
          }
        } catch (e) {
        }
        return value || defaultValue;
      }
      function useCurrentColorScheme(options) {
        const {
          defaultMode = "light",
          defaultLightColorScheme,
          defaultDarkColorScheme,
          supportedColorSchemes = [],
          modeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          storageWindow = typeof window === "undefined" ? void 0 : window
        } = options;
        const joinedColorSchemes = supportedColorSchemes.join(",");
        const [state, setState] = React16.useState(() => {
          const initialMode = initializeValue(modeStorageKey, defaultMode);
          const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
          const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
          return {
            mode: initialMode,
            systemMode: getSystemMode(initialMode),
            lightColorScheme,
            darkColorScheme
          };
        });
        const colorScheme = getColorScheme(state);
        const setMode = React16.useCallback((mode) => {
          setState((currentState) => {
            if (mode === currentState.mode) {
              return currentState;
            }
            const newMode = !mode ? defaultMode : mode;
            try {
              localStorage.setItem(modeStorageKey, newMode);
            } catch (e) {
            }
            return {
              ...currentState,
              mode: newMode,
              systemMode: getSystemMode(newMode)
            };
          });
        }, [modeStorageKey, defaultMode]);
        const setColorScheme = React16.useCallback((value) => {
          if (!value) {
            setState((currentState) => {
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
                localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
              } catch (e) {
              }
              return {
                ...currentState,
                lightColorScheme: defaultLightColorScheme,
                darkColorScheme: defaultDarkColorScheme
              };
            });
          } else if (typeof value === "string") {
            if (value && !joinedColorSchemes.includes(value)) {
              console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              setState((currentState) => {
                const newState = {
                  ...currentState
                };
                processState(currentState, (mode) => {
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);
                  } catch (e) {
                  }
                  if (mode === "light") {
                    newState.lightColorScheme = value;
                  }
                  if (mode === "dark") {
                    newState.darkColorScheme = value;
                  }
                });
                return newState;
              });
            }
          } else {
            setState((currentState) => {
              const newState = {
                ...currentState
              };
              const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
              const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
              if (newLightColorScheme) {
                if (!joinedColorSchemes.includes(newLightColorScheme)) {
                  console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
                } else {
                  newState.lightColorScheme = newLightColorScheme;
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);
                  } catch (error) {
                  }
                }
              }
              if (newDarkColorScheme) {
                if (!joinedColorSchemes.includes(newDarkColorScheme)) {
                  console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
                } else {
                  newState.darkColorScheme = newDarkColorScheme;
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);
                  } catch (error) {
                  }
                }
              }
              return newState;
            });
          }
        }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);
        const handleMediaQuery = React16.useCallback((e) => {
          if (state.mode === "system") {
            setState((currentState) => ({
              ...currentState,
              systemMode: e != null && e.matches ? "dark" : "light"
            }));
          }
        }, [state.mode]);
        const mediaListener = React16.useRef(handleMediaQuery);
        mediaListener.current = handleMediaQuery;
        React16.useEffect(() => {
          const handler = (...args) => mediaListener.current(...args);
          const media = window.matchMedia("(prefers-color-scheme: dark)");
          media.addListener(handler);
          handler(media);
          return () => media.removeListener(handler);
        }, []);
        React16.useEffect(() => {
          const handleStorage = (event) => {
            const value = event.newValue;
            if (typeof event.key === "string" && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
              if (event.key.endsWith("light")) {
                setColorScheme({
                  light: value
                });
              }
              if (event.key.endsWith("dark")) {
                setColorScheme({
                  dark: value
                });
              }
            }
            if (event.key === modeStorageKey && (!value || ["light", "dark", "system"].includes(value))) {
              setMode(value || defaultMode);
            }
          };
          if (storageWindow) {
            storageWindow.addEventListener("storage", handleStorage);
            return () => storageWindow.removeEventListener("storage", handleStorage);
          }
          return void 0;
        }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
        return {
          ...state,
          colorScheme,
          setMode,
          setColorScheme
        };
      }
    }
  });

  // node_modules/@mui/system/cssVars/createCssVarsProvider.js
  var require_createCssVarsProvider = __commonJS({
    "node_modules/@mui/system/cssVars/createCssVarsProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DISABLE_CSS_TRANSITION = void 0;
      exports.default = createCssVarsProvider;
      var _utils = require_utils();
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _styledEngine = require_node();
      var _privateTheming = require_node2();
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider4());
      var _getInitColorSchemeScript = _interopRequireWildcard(require_getInitColorSchemeScript());
      var _useCurrentColorScheme = _interopRequireDefault(require_useCurrentColorScheme());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
      exports.DISABLE_CSS_TRANSITION = DISABLE_CSS_TRANSITION;
      function createCssVarsProvider(options) {
        const {
          themeId,
          theme: defaultTheme2 = {},
          attribute: defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE,
          modeStorageKey: defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey: defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          defaultMode: designSystemMode = "light",
          defaultColorScheme: designSystemColorScheme,
          disableTransitionOnChange: designSystemTransitionOnChange = false,
          resolveTheme,
          excludeVariablesFromRoot
        } = options;
        if (!defaultTheme2.colorSchemes || typeof designSystemColorScheme === "string" && !defaultTheme2.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === "object" && !defaultTheme2.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === "object" && !defaultTheme2.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
          console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
        }
        const ColorSchemeContext = /* @__PURE__ */ React16.createContext(void 0);
        const useColorScheme = () => {
          const value = React16.useContext(ColorSchemeContext);
          if (!value) {
            throw new Error(true ? `MUI: \`useColorScheme\` must be called under <CssVarsProvider />` : (0, _utils.formatMuiErrorMessage)(19));
          }
          return value;
        };
        function CssVarsProvider({
          children,
          theme: themeProp = defaultTheme2,
          modeStorageKey = defaultModeStorageKey,
          colorSchemeStorageKey = defaultColorSchemeStorageKey,
          attribute = defaultAttribute,
          defaultMode = designSystemMode,
          defaultColorScheme = designSystemColorScheme,
          disableTransitionOnChange = designSystemTransitionOnChange,
          storageWindow = typeof window === "undefined" ? void 0 : window,
          documentNode = typeof document === "undefined" ? void 0 : document,
          colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
          colorSchemeSelector = ":root",
          disableNestedContext = false,
          disableStyleSheetGeneration = false
        }) {
          const hasMounted = React16.useRef(false);
          const upperTheme = (0, _privateTheming.useTheme)();
          const ctx = React16.useContext(ColorSchemeContext);
          const nested = !!ctx && !disableNestedContext;
          const scopedTheme = themeProp[themeId];
          const {
            colorSchemes = {},
            components = {},
            generateCssVars = () => ({
              vars: {},
              css: {}
            }),
            cssVarPrefix,
            ...restThemeProp
          } = scopedTheme || themeProp;
          const allColorSchemes = Object.keys(colorSchemes);
          const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
          const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
          const {
            mode: stateMode,
            setMode,
            systemMode,
            lightColorScheme,
            darkColorScheme,
            colorScheme: stateColorScheme,
            setColorScheme
          } = (0, _useCurrentColorScheme.default)({
            supportedColorSchemes: allColorSchemes,
            defaultLightColorScheme: defaultLightColorScheme2,
            defaultDarkColorScheme: defaultDarkColorScheme2,
            modeStorageKey,
            colorSchemeStorageKey,
            defaultMode,
            storageWindow
          });
          let mode = stateMode;
          let colorScheme = stateColorScheme;
          if (nested) {
            mode = ctx.mode;
            colorScheme = ctx.colorScheme;
          }
          const calculatedMode = (() => {
            if (mode) {
              return mode;
            }
            if (defaultMode === "system") {
              return designSystemMode;
            }
            return defaultMode;
          })();
          const calculatedColorScheme = (() => {
            if (!colorScheme) {
              if (calculatedMode === "dark") {
                return defaultDarkColorScheme2;
              }
              return defaultLightColorScheme2;
            }
            return colorScheme;
          })();
          const {
            css: rootCss,
            vars: rootVars
          } = generateCssVars();
          const theme = {
            ...restThemeProp,
            components,
            colorSchemes,
            cssVarPrefix,
            vars: rootVars,
            getColorSchemeSelector: (targetColorScheme) => `[${attribute}="${targetColorScheme}"] &`
          };
          const defaultColorSchemeStyleSheet = {};
          const otherColorSchemesStyleSheet = {};
          Object.entries(colorSchemes).forEach(([key, scheme]) => {
            const {
              css: css3,
              vars
            } = generateCssVars(key);
            theme.vars = (0, _utils.deepmerge)(theme.vars, vars);
            if (key === calculatedColorScheme) {
              Object.keys(scheme).forEach((schemeKey) => {
                if (scheme[schemeKey] && typeof scheme[schemeKey] === "object") {
                  theme[schemeKey] = {
                    ...theme[schemeKey],
                    ...scheme[schemeKey]
                  };
                } else {
                  theme[schemeKey] = scheme[schemeKey];
                }
              });
              if (theme.palette) {
                theme.palette.colorScheme = key;
              }
            }
            const resolvedDefaultColorScheme = (() => {
              if (typeof defaultColorScheme === "string") {
                return defaultColorScheme;
              }
              if (defaultMode === "dark") {
                return defaultColorScheme.dark;
              }
              return defaultColorScheme.light;
            })();
            if (key === resolvedDefaultColorScheme) {
              if (excludeVariablesFromRoot) {
                const excludedVariables = {};
                excludeVariablesFromRoot(cssVarPrefix).forEach((cssVar) => {
                  excludedVariables[cssVar] = css3[cssVar];
                  delete css3[cssVar];
                });
                defaultColorSchemeStyleSheet[`[${attribute}="${key}"]`] = excludedVariables;
              }
              defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}="${key}"]`] = css3;
            } else {
              otherColorSchemesStyleSheet[`${colorSchemeSelector === ":root" ? "" : colorSchemeSelector}[${attribute}="${key}"]`] = css3;
            }
          });
          theme.vars = (0, _utils.deepmerge)(theme.vars, rootVars);
          React16.useEffect(() => {
            if (colorScheme && colorSchemeNode) {
              colorSchemeNode.setAttribute(attribute, colorScheme);
            }
          }, [colorScheme, attribute, colorSchemeNode]);
          React16.useEffect(() => {
            let timer;
            if (disableTransitionOnChange && hasMounted.current && documentNode) {
              const css3 = documentNode.createElement("style");
              css3.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
              documentNode.head.appendChild(css3);
              (() => window.getComputedStyle(documentNode.body))();
              timer = setTimeout(() => {
                documentNode.head.removeChild(css3);
              }, 1);
            }
            return () => {
              clearTimeout(timer);
            };
          }, [colorScheme, disableTransitionOnChange, documentNode]);
          React16.useEffect(() => {
            hasMounted.current = true;
            return () => {
              hasMounted.current = false;
            };
          }, []);
          const contextValue = React16.useMemo(() => ({
            mode,
            systemMode,
            setMode,
            lightColorScheme,
            darkColorScheme,
            colorScheme,
            setColorScheme,
            allColorSchemes
          }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);
          let shouldGenerateStyleSheet = true;
          if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {
            shouldGenerateStyleSheet = false;
          }
          const element = /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React16.Fragment, {
            children: [shouldGenerateStyleSheet && /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React16.Fragment, {
              children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
                styles: {
                  [colorSchemeSelector]: rootCss
                }
              }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
                styles: defaultColorSchemeStyleSheet
              }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
                styles: otherColorSchemesStyleSheet
              })]
            }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProvider.default, {
              themeId: scopedTheme ? themeId : void 0,
              theme: resolveTheme ? resolveTheme(theme) : theme,
              children
            })]
          });
          if (nested) {
            return element;
          }
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {
            value: contextValue,
            children: element
          });
        }
        true ? CssVarsProvider.propTypes = {
          /**
           * The body attribute name to attach colorScheme.
           */
          attribute: _propTypes.default.string,
          /**
           * The component tree.
           */
          children: _propTypes.default.node,
          /**
           * The node used to attach the color-scheme attribute
           */
          colorSchemeNode: _propTypes.default.any,
          /**
           * The CSS selector for attaching the generated custom properties
           */
          colorSchemeSelector: _propTypes.default.string,
          /**
           * localStorage key used to store `colorScheme`
           */
          colorSchemeStorageKey: _propTypes.default.string,
          /**
           * The initial color scheme used.
           */
          defaultColorScheme: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
          /**
           * The initial mode used.
           */
          defaultMode: _propTypes.default.string,
          /**
           * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
           */
          disableNestedContext: _propTypes.default.bool,
          /**
           * If `true`, the style sheet won't be generated.
           *
           * This is useful for controlling nested CssVarsProvider behavior.
           */
          disableStyleSheetGeneration: _propTypes.default.bool,
          /**
           * Disable CSS transitions when switching between modes or color schemes
           */
          disableTransitionOnChange: _propTypes.default.bool,
          /**
           * The document to attach the attribute to
           */
          documentNode: _propTypes.default.any,
          /**
           * The key in the local storage used to store current color scheme.
           */
          modeStorageKey: _propTypes.default.string,
          /**
           * The window that attaches the 'storage' event listener
           * @default window
           */
          storageWindow: _propTypes.default.any,
          /**
           * The calculated theme object that will be passed through context.
           */
          theme: _propTypes.default.object
        } : void 0;
        const defaultLightColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.light;
        const defaultDarkColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.dark;
        const getInitColorSchemeScript = (params) => (0, _getInitColorSchemeScript.default)({
          attribute: defaultAttribute,
          colorSchemeStorageKey: defaultColorSchemeStorageKey,
          defaultMode: designSystemMode,
          defaultLightColorScheme,
          defaultDarkColorScheme,
          modeStorageKey: defaultModeStorageKey,
          ...params
        });
        return {
          CssVarsProvider,
          useColorScheme,
          getInitColorSchemeScript
        };
      }
    }
  });

  // node_modules/@mui/system/cssVars/createGetCssVar.js
  var require_createGetCssVar = __commonJS({
    "node_modules/@mui/system/cssVars/createGetCssVar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createGetCssVar;
      function createGetCssVar(prefix2 = "") {
        function appendVar(...vars) {
          if (!vars.length) {
            return "";
          }
          const value = vars[0];
          if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
            return `, var(--${prefix2 ? `${prefix2}-` : ""}${value}${appendVar(...vars.slice(1))})`;
          }
          return `, ${value}`;
        }
        const getCssVar = (field, ...fallbacks) => {
          return `var(--${prefix2 ? `${prefix2}-` : ""}${field}${appendVar(...fallbacks)})`;
        };
        return getCssVar;
      }
    }
  });

  // node_modules/@mui/system/cssVars/cssVarsParser.js
  var require_cssVarsParser = __commonJS({
    "node_modules/@mui/system/cssVars/cssVarsParser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.assignNestedKeys = void 0;
      exports.default = cssVarsParser;
      exports.walkObjectDeep = void 0;
      var assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
        let temp = obj;
        keys.forEach((k, index) => {
          if (index === keys.length - 1) {
            if (Array.isArray(temp)) {
              temp[Number(k)] = value;
            } else if (temp && typeof temp === "object") {
              temp[k] = value;
            }
          } else if (temp && typeof temp === "object") {
            if (!temp[k]) {
              temp[k] = arrayKeys.includes(k) ? [] : {};
            }
            temp = temp[k];
          }
        });
      };
      exports.assignNestedKeys = assignNestedKeys;
      var walkObjectDeep = (obj, callback, shouldSkipPaths) => {
        function recurse(object, parentKeys = [], arrayKeys = []) {
          Object.entries(object).forEach(([key, value]) => {
            if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
              if (value !== void 0 && value !== null) {
                if (typeof value === "object" && Object.keys(value).length > 0) {
                  recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
                } else {
                  callback([...parentKeys, key], value, arrayKeys);
                }
              }
            }
          });
        }
        recurse(obj);
      };
      exports.walkObjectDeep = walkObjectDeep;
      var getCssValue = (keys, value) => {
        if (typeof value === "number") {
          if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys.includes(prop))) {
            return value;
          }
          const lastKey = keys[keys.length - 1];
          if (lastKey.toLowerCase().indexOf("opacity") >= 0) {
            return value;
          }
          return `${value}px`;
        }
        return value;
      };
      function cssVarsParser(theme, options) {
        const {
          prefix: prefix2,
          shouldSkipGeneratingVar
        } = options || {};
        const css3 = {};
        const vars = {};
        const varsWithDefaults = {};
        walkObjectDeep(
          theme,
          (keys, value, arrayKeys) => {
            if (typeof value === "string" || typeof value === "number") {
              if (!shouldSkipGeneratingVar || !shouldSkipGeneratingVar(keys, value)) {
                const cssVar = `--${prefix2 ? `${prefix2}-` : ""}${keys.join("-")}`;
                Object.assign(css3, {
                  [cssVar]: getCssValue(keys, value)
                });
                assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
                assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${value})`, arrayKeys);
              }
            }
          },
          (keys) => keys[0] === "vars"
          // skip 'vars/*' paths
        );
        return {
          css: css3,
          vars,
          varsWithDefaults
        };
      }
    }
  });

  // node_modules/@mui/system/cssVars/prepareCssVars.js
  var require_prepareCssVars = __commonJS({
    "node_modules/@mui/system/cssVars/prepareCssVars.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _cssVarsParser = _interopRequireDefault(require_cssVarsParser());
      function prepareCssVars(theme, parserConfig) {
        const {
          colorSchemes = {},
          components,
          ...otherTheme
        } = theme;
        const {
          vars: rootVars,
          css: rootCss,
          varsWithDefaults: rootVarsWithDefaults
        } = (0, _cssVarsParser.default)(otherTheme, parserConfig);
        let themeVars = rootVarsWithDefaults;
        const colorSchemesMap = {};
        const {
          light: light2,
          ...otherColorSchemes
        } = colorSchemes;
        Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
          const {
            vars,
            css: css3,
            varsWithDefaults
          } = (0, _cssVarsParser.default)(scheme, parserConfig);
          themeVars = (0, _utils.deepmerge)(themeVars, varsWithDefaults);
          colorSchemesMap[key] = {
            css: css3,
            vars
          };
        });
        if (light2) {
          const {
            css: css3,
            vars,
            varsWithDefaults
          } = (0, _cssVarsParser.default)(light2, parserConfig);
          themeVars = (0, _utils.deepmerge)(themeVars, varsWithDefaults);
          colorSchemesMap.light = {
            css: css3,
            vars
          };
        }
        const generateCssVars = (colorScheme) => {
          if (!colorScheme) {
            return {
              css: {
                ...rootCss
              },
              vars: rootVars
            };
          }
          return {
            css: {
              ...colorSchemesMap[colorScheme].css
            },
            vars: colorSchemesMap[colorScheme].vars
          };
        };
        return {
          vars: themeVars,
          generateCssVars
        };
      }
      var _default = prepareCssVars;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/cssVars/createCssVarsTheme.js
  var require_createCssVarsTheme = __commonJS({
    "node_modules/@mui/system/cssVars/createCssVarsTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _prepareCssVars = _interopRequireDefault(require_prepareCssVars());
      function createCssVarsTheme(theme) {
        const {
          cssVarPrefix,
          shouldSkipGeneratingVar,
          ...otherTheme
        } = theme;
        return {
          ...theme,
          ...(0, _prepareCssVars.default)(otherTheme, {
            prefix: cssVarPrefix,
            shouldSkipGeneratingVar
          })
        };
      }
      var _default = createCssVarsTheme;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Container/createContainer.js
  var require_createContainer = __commonJS({
    "node_modules/@mui/system/Container/createContainer.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createContainer;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _styled = _interopRequireDefault(require_styled());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme2 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiContainer",
        slot: "Root",
        overridesResolver: (props, styles) => {
          const {
            ownerState
          } = props;
          return [styles.root, styles[`maxWidth${(0, _utils.unstable_capitalize)(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
        }
      });
      var useThemePropsDefault = (inProps) => (0, _useThemeProps.default)({
        props: inProps,
        name: "MuiContainer",
        defaultTheme: defaultTheme2
      });
      var useUtilityClasses4 = (ownerState, componentName) => {
        const getContainerUtilityClass = (slot) => {
          return (0, _utils.unstable_generateUtilityClass)(componentName, slot);
        };
        const {
          classes,
          fixed,
          disableGutters,
          maxWidth
        } = ownerState;
        const slots = {
          root: ["root", maxWidth && `maxWidth${(0, _utils.unstable_capitalize)(String(maxWidth))}`, fixed && "fixed", disableGutters && "disableGutters"]
        };
        return (0, _utils.unstable_composeClasses)(slots, getContainerUtilityClass, classes);
      };
      function createContainer(options = {}) {
        const {
          // This will allow adding custom styled fn (for example for custom sx style function)
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps2 = useThemePropsDefault,
          componentName = "MuiContainer"
        } = options;
        const ContainerRoot = createStyledComponent(({
          theme,
          ownerState
        }) => ({
          width: "100%",
          marginLeft: "auto",
          boxSizing: "border-box",
          marginRight: "auto",
          display: "block",
          // Fix IE11 layout when used with main.
          ...!ownerState.disableGutters && {
            paddingLeft: theme.spacing(2),
            paddingRight: theme.spacing(2),
            // @ts-ignore module augmentation fails if custom breakpoints are used
            [theme.breakpoints.up("sm")]: {
              paddingLeft: theme.spacing(3),
              paddingRight: theme.spacing(3)
            }
          }
        }), ({
          theme,
          ownerState
        }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
          const breakpoint = breakpointValueKey;
          const value = theme.breakpoints.values[breakpoint];
          if (value !== 0) {
            acc[theme.breakpoints.up(breakpoint)] = {
              maxWidth: `${value}${theme.breakpoints.unit}`
            };
          }
          return acc;
        }, {}), ({
          theme,
          ownerState
        }) => ({
          // @ts-ignore module augmentation fails if custom breakpoints are used
          ...ownerState.maxWidth === "xs" && {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            [theme.breakpoints.up("xs")]: {
              // @ts-ignore module augmentation fails if custom breakpoints are used
              maxWidth: Math.max(theme.breakpoints.values.xs, 444)
            }
          },
          ...ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
          ownerState.maxWidth !== "xs" && {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            [theme.breakpoints.up(ownerState.maxWidth)]: {
              // @ts-ignore module augmentation fails if custom breakpoints are used
              maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
            }
          }
        }));
        const Container = /* @__PURE__ */ React16.forwardRef(function Container2(inProps, ref) {
          const props = useThemeProps2(inProps);
          const {
            className,
            component = "div",
            disableGutters = false,
            fixed = false,
            maxWidth = "lg",
            classes: classesProp,
            ...other
          } = props;
          const ownerState = {
            ...props,
            component,
            disableGutters,
            fixed,
            maxWidth
          };
          const classes = useUtilityClasses4(ownerState, componentName);
          return (
            // @ts-ignore theme is injected by the styled util
            /* @__PURE__ */ (0, _jsxRuntime.jsx)(ContainerRoot, {
              as: component,
              ownerState,
              className: (0, _clsx.default)(classes.root, className),
              ref,
              ...other
            })
          );
        });
        true ? Container.propTypes = {
          children: _propTypes.default.node,
          classes: _propTypes.default.object,
          className: _propTypes.default.string,
          component: _propTypes.default.elementType,
          disableGutters: _propTypes.default.bool,
          fixed: _propTypes.default.bool,
          maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
        } : void 0;
        return Container;
      }
    }
  });

  // node_modules/@mui/system/Container/Container.js
  var require_Container = __commonJS({
    "node_modules/@mui/system/Container/Container.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createContainer = _interopRequireDefault(require_createContainer());
      var Container = (0, _createContainer.default)();
      true ? Container.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * Override or extend the styles applied to the component.
         */
        classes: _propTypes.default.object,
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * If `true`, the left and right padding is removed.
         * @default false
         */
        disableGutters: _propTypes.default.bool,
        /**
         * Set the max-width to match the min-width of the current breakpoint.
         * This is useful if you'd prefer to design for a fixed set of sizes
         * instead of trying to accommodate a fully fluid viewport.
         * It's fluid by default.
         * @default false
         */
        fixed: _propTypes.default.bool,
        /**
         * Determine the max-width of the container.
         * The container width grows with the size of the screen.
         * Set to `false` to disable `maxWidth`.
         * @default 'lg'
         */
        maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
        /**
         * The system prop that allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      var _default = Container;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Container/containerClasses.js
  var require_containerClasses = __commonJS({
    "node_modules/@mui/system/Container/containerClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getContainerUtilityClass = getContainerUtilityClass;
      var _utils = require_utils();
      function getContainerUtilityClass(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiContainer", slot);
      }
      var containerClasses = (0, _utils.unstable_generateUtilityClasses)("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
      var _default = containerClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Container/index.js
  var require_Container2 = __commonJS({
    "node_modules/@mui/system/Container/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        containerClasses: true
      };
      Object.defineProperty(exports, "containerClasses", {
        enumerable: true,
        get: function() {
          return _containerClasses.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Container.default;
        }
      });
      var _Container = _interopRequireDefault(require_Container());
      var _containerClasses = _interopRequireWildcard(require_containerClasses());
      Object.keys(_containerClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _containerClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _containerClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/Unstable_Grid/gridGenerator.js
  var require_gridGenerator = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/gridGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.traverseBreakpoints = exports.generateSpacingClassNames = exports.generateSizeClassNames = exports.generateGridStyles = exports.generateGridSizeStyles = exports.generateGridRowSpacingStyles = exports.generateGridOffsetStyles = exports.generateGridDirectionStyles = exports.generateGridColumnsStyles = exports.generateGridColumnSpacingStyles = exports.generateDirectionClasses = exports.filterBreakpointKeys = void 0;
      function appendLevel(level) {
        if (!level) {
          return "";
        }
        return `Level${level}`;
      }
      function isNestedContainer(ownerState) {
        return ownerState.unstable_level > 0 && ownerState.container;
      }
      function createGetSelfSpacing(ownerState) {
        return function getSelfSpacing(axis) {
          return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level)})`;
        };
      }
      function createGetParentSpacing(ownerState) {
        return function getParentSpacing(axis) {
          if (ownerState.unstable_level === 0) {
            return `var(--Grid-${axis}Spacing)`;
          }
          return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level - 1)})`;
        };
      }
      function getParentColumns(ownerState) {
        if (ownerState.unstable_level === 0) {
          return `var(--Grid-columns)`;
        }
        return `var(--Grid-columns${appendLevel(ownerState.unstable_level - 1)})`;
      }
      var filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key) => responsiveKeys.includes(key));
      exports.filterBreakpointKeys = filterBreakpointKeys;
      var traverseBreakpoints = (breakpoints, responsive, iterator) => {
        const smallestBreakpoint = breakpoints.keys[0];
        if (Array.isArray(responsive)) {
          responsive.forEach((breakpointValue, index) => {
            iterator((responsiveStyles, style) => {
              if (index <= breakpoints.keys.length - 1) {
                if (index === 0) {
                  Object.assign(responsiveStyles, style);
                } else {
                  responsiveStyles[breakpoints.up(breakpoints.keys[index])] = style;
                }
              }
            }, breakpointValue);
          });
        } else if (responsive && typeof responsive === "object") {
          const keys = Object.keys(responsive).length > breakpoints.keys.length ? breakpoints.keys : filterBreakpointKeys(breakpoints.keys, Object.keys(responsive));
          keys.forEach((key) => {
            if (breakpoints.keys.indexOf(key) !== -1) {
              const breakpointValue = responsive[key];
              if (breakpointValue !== void 0) {
                iterator((responsiveStyles, style) => {
                  if (smallestBreakpoint === key) {
                    Object.assign(responsiveStyles, style);
                  } else {
                    responsiveStyles[breakpoints.up(key)] = style;
                  }
                }, breakpointValue);
              }
            }
          });
        } else if (typeof responsive === "number" || typeof responsive === "string") {
          iterator((responsiveStyles, style) => {
            Object.assign(responsiveStyles, style);
          }, responsive);
        }
      };
      exports.traverseBreakpoints = traverseBreakpoints;
      var generateGridSizeStyles = ({
        theme,
        ownerState
      }) => {
        const getSelfSpacing = createGetSelfSpacing(ownerState);
        const styles = {};
        traverseBreakpoints(theme.breakpoints, ownerState.gridSize, (appendStyle, value) => {
          let style = {};
          if (value === true) {
            style = {
              flexBasis: 0,
              flexGrow: 1,
              maxWidth: "100%"
            };
          }
          if (value === "auto") {
            style = {
              flexBasis: "auto",
              flexGrow: 0,
              flexShrink: 0,
              maxWidth: "none",
              width: "auto"
            };
          }
          if (typeof value === "number") {
            style = {
              flexGrow: 0,
              flexBasis: "auto",
              width: `calc(100% * ${value} / ${getParentColumns(ownerState)}${isNestedContainer(ownerState) ? ` + ${getSelfSpacing("column")}` : ""})`
            };
          }
          appendStyle(styles, style);
        });
        return styles;
      };
      exports.generateGridSizeStyles = generateGridSizeStyles;
      var generateGridOffsetStyles = ({
        theme,
        ownerState
      }) => {
        const styles = {};
        traverseBreakpoints(theme.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
          let style = {};
          if (value === "auto") {
            style = {
              marginLeft: "auto"
            };
          }
          if (typeof value === "number") {
            style = {
              marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / ${getParentColumns(ownerState)})`
            };
          }
          appendStyle(styles, style);
        });
        return styles;
      };
      exports.generateGridOffsetStyles = generateGridOffsetStyles;
      var generateGridColumnsStyles = ({
        theme,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const styles = isNestedContainer(ownerState) ? {
          [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: getParentColumns(ownerState)
        } : {
          "--Grid-columns": 12
        };
        traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
          appendStyle(styles, {
            [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: value
          });
        });
        return styles;
      };
      exports.generateGridColumnsStyles = generateGridColumnsStyles;
      var generateGridRowSpacingStyles = ({
        theme,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const getParentSpacing = createGetParentSpacing(ownerState);
        const styles = isNestedContainer(ownerState) ? {
          // Set the default spacing as its parent spacing.
          // It will be overridden if spacing props are provided
          [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("row")
        } : {};
        traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
          var _theme$spacing;
          appendStyle(styles, {
            [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
          });
        });
        return styles;
      };
      exports.generateGridRowSpacingStyles = generateGridRowSpacingStyles;
      var generateGridColumnSpacingStyles = ({
        theme,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const getParentSpacing = createGetParentSpacing(ownerState);
        const styles = isNestedContainer(ownerState) ? {
          // Set the default spacing as its parent spacing.
          // It will be overridden if spacing props are provided
          [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("column")
        } : {};
        traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
          var _theme$spacing2;
          appendStyle(styles, {
            [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing2 = theme.spacing) == null ? void 0 : _theme$spacing2.call(theme, value)
          });
        });
        return styles;
      };
      exports.generateGridColumnSpacingStyles = generateGridColumnSpacingStyles;
      var generateGridDirectionStyles = ({
        theme,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const styles = {};
        traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
          appendStyle(styles, {
            flexDirection: value
          });
        });
        return styles;
      };
      exports.generateGridDirectionStyles = generateGridDirectionStyles;
      var generateGridStyles = ({
        ownerState
      }) => {
        const getSelfSpacing = createGetSelfSpacing(ownerState);
        const getParentSpacing = createGetParentSpacing(ownerState);
        return {
          minWidth: 0,
          boxSizing: "border-box",
          ...ownerState.container && {
            display: "flex",
            flexWrap: "wrap",
            ...ownerState.wrap && ownerState.wrap !== "wrap" && {
              flexWrap: ownerState.wrap
            },
            margin: `calc(${getSelfSpacing("row")} / -2) calc(${getSelfSpacing("column")} / -2)`,
            ...ownerState.disableEqualOverflow && {
              margin: `calc(${getSelfSpacing("row")} * -1) 0px 0px calc(${getSelfSpacing("column")} * -1)`
            }
          },
          ...(!ownerState.container || isNestedContainer(ownerState)) && {
            padding: `calc(${getParentSpacing("row")} / 2) calc(${getParentSpacing("column")} / 2)`,
            ...(ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
              padding: `${getParentSpacing("row")} 0px 0px ${getParentSpacing("column")}`
            }
          }
        };
      };
      exports.generateGridStyles = generateGridStyles;
      var generateSizeClassNames = (gridSize) => {
        const classNames = [];
        Object.entries(gridSize).forEach(([key, value]) => {
          if (value !== false && value !== void 0) {
            classNames.push(`grid-${key}-${String(value)}`);
          }
        });
        return classNames;
      };
      exports.generateSizeClassNames = generateSizeClassNames;
      var generateSpacingClassNames = (spacing, smallestBreakpoint = "xs") => {
        function isValidSpacing(val) {
          if (val === void 0) {
            return false;
          }
          return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
        }
        if (isValidSpacing(spacing)) {
          return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
        }
        if (typeof spacing === "object" && !Array.isArray(spacing)) {
          const classNames = [];
          Object.entries(spacing).forEach(([key, value]) => {
            if (isValidSpacing(value)) {
              classNames.push(`spacing-${key}-${String(value)}`);
            }
          });
          return classNames;
        }
        return [];
      };
      exports.generateSpacingClassNames = generateSpacingClassNames;
      var generateDirectionClasses = (direction) => {
        if (direction === void 0) {
          return [];
        }
        if (typeof direction === "object") {
          return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
        }
        return [`direction-xs-${String(direction)}`];
      };
      exports.generateDirectionClasses = generateDirectionClasses;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/createGrid.js
  var require_createGrid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/createGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createGrid;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _styled = _interopRequireDefault(require_styled());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _useTheme = _interopRequireDefault(require_useTheme());
      var _styleFunctionSx = require_styleFunctionSx2();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _gridGenerator = require_gridGenerator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme2 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiGrid",
        slot: "Root",
        overridesResolver: (props, styles) => styles.root
      });
      function useThemePropsDefault(props) {
        return (0, _useThemeProps.default)({
          props,
          name: "MuiGrid",
          defaultTheme: defaultTheme2
        });
      }
      function createGrid(options = {}) {
        const {
          // This will allow adding custom styled fn (for example for custom sx style function)
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps2 = useThemePropsDefault,
          componentName = "MuiGrid"
        } = options;
        const OverflowContext = /* @__PURE__ */ React16.createContext(void 0);
        const useUtilityClasses4 = (ownerState, theme) => {
          const {
            container,
            direction,
            spacing,
            wrap,
            gridSize
          } = ownerState;
          const slots = {
            root: ["root", container && "container", wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...(0, _gridGenerator.generateDirectionClasses)(direction), ...(0, _gridGenerator.generateSizeClassNames)(gridSize), ...container ? (0, _gridGenerator.generateSpacingClassNames)(spacing, theme.breakpoints.keys[0]) : []]
          };
          return (0, _utils.unstable_composeClasses)(slots, (slot) => (0, _utils.unstable_generateUtilityClass)(componentName, slot), {});
        };
        const GridRoot = createStyledComponent(_gridGenerator.generateGridColumnsStyles, _gridGenerator.generateGridColumnSpacingStyles, _gridGenerator.generateGridRowSpacingStyles, _gridGenerator.generateGridSizeStyles, _gridGenerator.generateGridDirectionStyles, _gridGenerator.generateGridStyles, _gridGenerator.generateGridOffsetStyles);
        const Grid = /* @__PURE__ */ React16.forwardRef(function Grid2(inProps, ref) {
          var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
          const theme = (0, _useTheme.default)();
          const themeProps = useThemeProps2(inProps);
          const props = (0, _styleFunctionSx.extendSxProp)(themeProps);
          const overflow = React16.useContext(OverflowContext);
          const {
            className,
            children,
            columns: columnsProp = 12,
            container = false,
            component = "div",
            direction = "row",
            wrap = "wrap",
            spacing: spacingProp = 0,
            rowSpacing: rowSpacingProp = spacingProp,
            columnSpacing: columnSpacingProp = spacingProp,
            disableEqualOverflow: themeDisableEqualOverflow,
            unstable_level: level = 0,
            ...rest
          } = props;
          let disableEqualOverflow = themeDisableEqualOverflow;
          if (level && themeDisableEqualOverflow !== void 0) {
            disableEqualOverflow = inProps.disableEqualOverflow;
          }
          const gridSize = {};
          const gridOffset = {};
          const other = {};
          Object.entries(rest).forEach(([key, val]) => {
            if (theme.breakpoints.values[key] !== void 0) {
              gridSize[key] = val;
            } else if (theme.breakpoints.values[key.replace("Offset", "")] !== void 0) {
              gridOffset[key.replace("Offset", "")] = val;
            } else {
              other[key] = val;
            }
          });
          const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : level ? void 0 : columnsProp;
          const spacing = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : level ? void 0 : spacingProp;
          const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : level ? void 0 : rowSpacingProp;
          const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : level ? void 0 : columnSpacingProp;
          const ownerState = {
            ...props,
            level,
            columns,
            container,
            direction,
            wrap,
            spacing,
            rowSpacing,
            columnSpacing,
            gridSize,
            gridOffset,
            disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow) != null ? _ref3 : false,
            // use context value if exists.
            parentDisableEqualOverflow: overflow
            // for nested grid
          };
          const classes = useUtilityClasses4(ownerState, theme);
          let result = /* @__PURE__ */ (0, _jsxRuntime.jsx)(GridRoot, {
            ref,
            as: component,
            ownerState,
            className: (0, _clsx.default)(classes.root, className),
            ...other,
            children: React16.Children.map(children, (child) => {
              if (/* @__PURE__ */ React16.isValidElement(child) && (0, _utils.unstable_isMuiElement)(child, ["Grid"])) {
                var _child$props$unstable;
                return /* @__PURE__ */ React16.cloneElement(child, {
                  unstable_level: (_child$props$unstable = child.props.unstable_level) != null ? _child$props$unstable : level + 1
                });
              }
              return child;
            })
          });
          if (disableEqualOverflow !== void 0 && disableEqualOverflow !== (overflow != null ? overflow : false)) {
            result = /* @__PURE__ */ (0, _jsxRuntime.jsx)(OverflowContext.Provider, {
              value: disableEqualOverflow,
              children: result
            });
          }
          return result;
        });
        true ? Grid.propTypes = {
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
          columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          component: _propTypes.default.elementType,
          container: _propTypes.default.bool,
          direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
          disableEqualOverflow: _propTypes.default.bool,
          lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          lgOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          md: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          mdOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          smOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
          wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
          xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          xlOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          xsOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number])
        } : void 0;
        Grid.muiName = "Grid";
        return Grid;
      }
    }
  });

  // node_modules/@mui/system/Unstable_Grid/Grid.js
  var require_Grid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/Grid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createGrid = _interopRequireDefault(require_createGrid());
      var Grid = (0, _createGrid.default)();
      true ? Grid.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content of the component.
         */
        children: _propTypes.default.node,
        /**
         * The number of columns.
         * @default 12
         */
        columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
        /**
         * Defines the horizontal space between the type `item` components.
         * It overrides the value of the `spacing` prop.
         */
        columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        /**
         * If `true`, the component will have the flex *container* behavior.
         * You should be wrapping *items* with a *container*.
         * @default false
         */
        container: _propTypes.default.bool,
        /**
         * Defines the `flex-direction` style property.
         * It is applied for all screen sizes.
         * @default 'row'
         */
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        /**
         * If `true`, the negative margin and padding are apply only to the top and left sides of the grid.
         */
        disableEqualOverflow: _propTypes.default.bool,
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for the `lg` breakpoint and wider screens if not overridden.
         * @default false
         */
        lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `lg` breakpoint and wider screens if not overridden.
         */
        lgOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for the `md` breakpoint and wider screens if not overridden.
         * @default false
         */
        md: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `md` breakpoint and wider screens if not overridden.
         */
        mdOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        /**
         * Defines the vertical space between the type `item` components.
         * It overrides the value of the `spacing` prop.
         */
        rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for the `sm` breakpoint and wider screens if not overridden.
         * @default false
         */
        sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `sm` breakpoint and wider screens if not overridden.
         */
        smOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        /**
         * Defines the space between the type `item` components.
         * It can only be used on a type `container` component.
         * @default 0
         */
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        /**
         * @ignore
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        /**
         * Defines the `flex-wrap` style property.
         * It's applied for all screen sizes.
         * @default 'wrap'
         */
        wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for the `xl` breakpoint and wider screens if not overridden.
         * @default false
         */
        xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `xl` breakpoint and wider screens if not overridden.
         */
        xlOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for all the screen sizes with the lowest priority.
         * @default false
         */
        xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `xs` breakpoint and wider screens if not overridden.
         */
        xsOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number])
      } : void 0;
      var _default = Grid;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/GridProps.js
  var require_GridProps = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/GridProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/system/Unstable_Grid/gridClasses.js
  var require_gridClasses = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/gridClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getGridUtilityClass = getGridUtilityClass;
      var _utils = require_utils();
      function getGridUtilityClass(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiGrid", slot);
      }
      var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
      var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
      var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
      var gridClasses = (0, _utils.unstable_generateUtilityClasses)("MuiGrid", [
        "root",
        "container",
        "item",
        // spacings
        ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
        // direction values
        ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
        // wrap values
        ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
        // grid sizes for all breakpoints
        ...GRID_SIZES.map((size) => `grid-xs-${size}`),
        ...GRID_SIZES.map((size) => `grid-sm-${size}`),
        ...GRID_SIZES.map((size) => `grid-md-${size}`),
        ...GRID_SIZES.map((size) => `grid-lg-${size}`),
        ...GRID_SIZES.map((size) => `grid-xl-${size}`)
      ]);
      var _default = gridClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/index.js
  var require_Unstable_Grid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        createGrid: true,
        gridClasses: true
      };
      Object.defineProperty(exports, "createGrid", {
        enumerable: true,
        get: function() {
          return _createGrid.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Grid.default;
        }
      });
      Object.defineProperty(exports, "gridClasses", {
        enumerable: true,
        get: function() {
          return _gridClasses.default;
        }
      });
      var _Grid = _interopRequireDefault(require_Grid());
      var _createGrid = _interopRequireDefault(require_createGrid());
      var _GridProps = require_GridProps();
      Object.keys(_GridProps).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _GridProps[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _GridProps[key];
          }
        });
      });
      var _gridClasses = _interopRequireWildcard(require_gridClasses());
      Object.keys(_gridClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _gridClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _gridClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/Stack/createStack.js
  var require_createStack = __commonJS({
    "node_modules/@mui/system/Stack/createStack.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStack;
      exports.style = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _styled = _interopRequireDefault(require_styled());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _styleFunctionSx = require_styleFunctionSx2();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _breakpoints = require_breakpoints();
      var _spacing = require_spacing();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme2 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiStack",
        slot: "Root",
        overridesResolver: (props, styles) => styles.root
      });
      function useThemePropsDefault(props) {
        return (0, _useThemeProps.default)({
          props,
          name: "MuiStack",
          defaultTheme: defaultTheme2
        });
      }
      function joinChildren(children, separator) {
        const childrenArray = React16.Children.toArray(children).filter(Boolean);
        return childrenArray.reduce((output, child, index) => {
          output.push(child);
          if (index < childrenArray.length - 1) {
            output.push(/* @__PURE__ */ React16.cloneElement(separator, {
              key: `separator-${index}`
            }));
          }
          return output;
        }, []);
      }
      var getSideFromDirection = (direction) => {
        return {
          row: "Left",
          "row-reverse": "Right",
          column: "Top",
          "column-reverse": "Bottom"
        }[direction];
      };
      var style = ({
        ownerState,
        theme
      }) => {
        let styles = {
          display: "flex",
          flexDirection: "column",
          ...(0, _breakpoints.handleBreakpoints)({
            theme
          }, (0, _breakpoints.resolveBreakpointValues)({
            values: ownerState.direction,
            breakpoints: theme.breakpoints.values
          }), (propValue) => ({
            flexDirection: propValue
          }))
        };
        if (ownerState.spacing) {
          const transformer = (0, _spacing.createUnarySpacing)(theme);
          const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
            if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
              acc[breakpoint] = true;
            }
            return acc;
          }, {});
          const directionValues = (0, _breakpoints.resolveBreakpointValues)({
            values: ownerState.direction,
            base
          });
          const spacingValues = (0, _breakpoints.resolveBreakpointValues)({
            values: ownerState.spacing,
            base
          });
          if (typeof directionValues === "object") {
            Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
              const directionValue = directionValues[breakpoint];
              if (!directionValue) {
                const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : "column";
                directionValues[breakpoint] = previousDirectionValue;
              }
            });
          }
          const styleFromPropValue = (propValue, breakpoint) => {
            if (ownerState.useFlexGap) {
              return {
                gap: (0, _spacing.getValue)(transformer, propValue)
              };
            }
            return {
              "& > :not(style) + :not(style)": {
                margin: 0,
                [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: (0, _spacing.getValue)(transformer, propValue)
              }
            };
          };
          styles = (0, _utils.deepmerge)(styles, (0, _breakpoints.handleBreakpoints)({
            theme
          }, spacingValues, styleFromPropValue));
        }
        styles = (0, _breakpoints.mergeBreakpointsInOrder)(theme.breakpoints, styles);
        return styles;
      };
      exports.style = style;
      function createStack(options = {}) {
        const {
          // This will allow adding custom styled fn (for example for custom sx style function)
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps2 = useThemePropsDefault,
          componentName = "MuiStack"
        } = options;
        const useUtilityClasses4 = () => {
          const slots = {
            root: ["root"]
          };
          return (0, _utils.unstable_composeClasses)(slots, (slot) => (0, _utils.unstable_generateUtilityClass)(componentName, slot), {});
        };
        const StackRoot = createStyledComponent(style);
        const Stack = /* @__PURE__ */ React16.forwardRef(function Grid(inProps, ref) {
          const themeProps = useThemeProps2(inProps);
          const props = (0, _styleFunctionSx.extendSxProp)(themeProps);
          const {
            component = "div",
            direction = "column",
            spacing = 0,
            divider,
            children,
            className,
            useFlexGap = false,
            ...other
          } = props;
          const ownerState = {
            direction,
            spacing,
            useFlexGap
          };
          const classes = useUtilityClasses4();
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StackRoot, {
            as: component,
            ownerState,
            ref,
            className: (0, _clsx.default)(classes.root, className),
            ...other,
            children: divider ? joinChildren(children, divider) : children
          });
        });
        true ? Stack.propTypes = {
          children: _propTypes.default.node,
          direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
          divider: _propTypes.default.node,
          spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
        } : void 0;
        return Stack;
      }
    }
  });

  // node_modules/@mui/system/Stack/Stack.js
  var require_Stack = __commonJS({
    "node_modules/@mui/system/Stack/Stack.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createStack = _interopRequireDefault(require_createStack());
      var Stack = (0, _createStack.default)();
      true ? Stack.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content of the component.
         */
        children: _propTypes.default.node,
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * Defines the `flex-direction` style property.
         * It is applied for all screen sizes.
         * @default 'column'
         */
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        /**
         * Add an element between each child.
         */
        divider: _propTypes.default.node,
        /**
         * Defines the space between immediate children.
         * @default 0
         */
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        /**
         * The system prop, which allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        /**
         * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
         *
         * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
         * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
         *
         * To enable this flag globally, follow the theme's default props configuration.
         * @default false
         */
        useFlexGap: _propTypes.default.bool
      } : void 0;
      var _default = Stack;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Stack/StackProps.js
  var require_StackProps = __commonJS({
    "node_modules/@mui/system/Stack/StackProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/system/Stack/stackClasses.js
  var require_stackClasses = __commonJS({
    "node_modules/@mui/system/Stack/stackClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getStackUtilityClass = getStackUtilityClass;
      var _utils = require_utils();
      function getStackUtilityClass(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiStack", slot);
      }
      var stackClasses = (0, _utils.unstable_generateUtilityClasses)("MuiStack", ["root"]);
      var _default = stackClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Stack/index.js
  var require_Stack2 = __commonJS({
    "node_modules/@mui/system/Stack/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        createStack: true,
        stackClasses: true
      };
      Object.defineProperty(exports, "createStack", {
        enumerable: true,
        get: function() {
          return _createStack.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Stack.default;
        }
      });
      Object.defineProperty(exports, "stackClasses", {
        enumerable: true,
        get: function() {
          return _stackClasses.default;
        }
      });
      var _Stack = _interopRequireDefault(require_Stack());
      var _createStack = _interopRequireDefault(require_createStack());
      var _StackProps = require_StackProps();
      Object.keys(_StackProps).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _StackProps[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _StackProps[key];
          }
        });
      });
      var _stackClasses = _interopRequireWildcard(require_stackClasses());
      Object.keys(_stackClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _stackClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _stackClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/index.js
  var require_system = __commonJS({
    "node_modules/@mui/system/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        experimental_sx: true,
        css: true,
        keyframes: true,
        StyledEngineProvider: true,
        GlobalStyles: true,
        borders: true,
        breakpoints: true,
        handleBreakpoints: true,
        mergeBreakpointsInOrder: true,
        unstable_resolveBreakpointValues: true,
        compose: true,
        display: true,
        flexbox: true,
        grid: true,
        palette: true,
        positions: true,
        shadows: true,
        sizing: true,
        spacing: true,
        style: true,
        getPath: true,
        getStyleValue: true,
        typography: true,
        unstable_styleFunctionSx: true,
        unstable_createStyleFunctionSx: true,
        unstable_extendSxProp: true,
        unstable_defaultSxConfig: true,
        unstable_getThemeValue: true,
        Box: true,
        createBox: true,
        createStyled: true,
        styled: true,
        createTheme: true,
        createBreakpoints: true,
        createSpacing: true,
        shape: true,
        useThemeProps: true,
        getThemeProps: true,
        useTheme: true,
        useThemeWithoutDefault: true,
        ThemeProvider: true,
        unstable_createCssVarsProvider: true,
        unstable_createGetCssVar: true,
        unstable_cssVarsParser: true,
        unstable_prepareCssVars: true,
        unstable_createCssVarsTheme: true,
        responsivePropType: true,
        createContainer: true,
        Container: true,
        Unstable_Grid: true,
        Stack: true
      };
      Object.defineProperty(exports, "Box", {
        enumerable: true,
        get: function() {
          return _Box.default;
        }
      });
      Object.defineProperty(exports, "Container", {
        enumerable: true,
        get: function() {
          return _Container.default;
        }
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports, "Stack", {
        enumerable: true,
        get: function() {
          return _Stack.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _styledEngine.StyledEngineProvider;
        }
      });
      Object.defineProperty(exports, "ThemeProvider", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "Unstable_Grid", {
        enumerable: true,
        get: function() {
          return _Grid.default;
        }
      });
      Object.defineProperty(exports, "borders", {
        enumerable: true,
        get: function() {
          return _borders.default;
        }
      });
      Object.defineProperty(exports, "breakpoints", {
        enumerable: true,
        get: function() {
          return _breakpoints.default;
        }
      });
      Object.defineProperty(exports, "compose", {
        enumerable: true,
        get: function() {
          return _compose.default;
        }
      });
      Object.defineProperty(exports, "createBox", {
        enumerable: true,
        get: function() {
          return _createBox.default;
        }
      });
      Object.defineProperty(exports, "createBreakpoints", {
        enumerable: true,
        get: function() {
          return _createBreakpoints.default;
        }
      });
      Object.defineProperty(exports, "createContainer", {
        enumerable: true,
        get: function() {
          return _createContainer.default;
        }
      });
      Object.defineProperty(exports, "createSpacing", {
        enumerable: true,
        get: function() {
          return _createSpacing.default;
        }
      });
      Object.defineProperty(exports, "createStyled", {
        enumerable: true,
        get: function() {
          return _createStyled.default;
        }
      });
      Object.defineProperty(exports, "createTheme", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _styledEngine.css;
        }
      });
      Object.defineProperty(exports, "display", {
        enumerable: true,
        get: function() {
          return _display.default;
        }
      });
      exports.experimental_sx = experimental_sx;
      Object.defineProperty(exports, "flexbox", {
        enumerable: true,
        get: function() {
          return _flexbox.default;
        }
      });
      Object.defineProperty(exports, "getPath", {
        enumerable: true,
        get: function() {
          return _style.getPath;
        }
      });
      Object.defineProperty(exports, "getStyleValue", {
        enumerable: true,
        get: function() {
          return _style.getStyleValue;
        }
      });
      Object.defineProperty(exports, "getThemeProps", {
        enumerable: true,
        get: function() {
          return _useThemeProps.getThemeProps;
        }
      });
      Object.defineProperty(exports, "grid", {
        enumerable: true,
        get: function() {
          return _cssGrid.default;
        }
      });
      Object.defineProperty(exports, "handleBreakpoints", {
        enumerable: true,
        get: function() {
          return _breakpoints.handleBreakpoints;
        }
      });
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _styledEngine.keyframes;
        }
      });
      Object.defineProperty(exports, "mergeBreakpointsInOrder", {
        enumerable: true,
        get: function() {
          return _breakpoints.mergeBreakpointsInOrder;
        }
      });
      Object.defineProperty(exports, "palette", {
        enumerable: true,
        get: function() {
          return _palette.default;
        }
      });
      Object.defineProperty(exports, "positions", {
        enumerable: true,
        get: function() {
          return _positions.default;
        }
      });
      Object.defineProperty(exports, "responsivePropType", {
        enumerable: true,
        get: function() {
          return _responsivePropType.default;
        }
      });
      Object.defineProperty(exports, "shadows", {
        enumerable: true,
        get: function() {
          return _shadows.default;
        }
      });
      Object.defineProperty(exports, "shape", {
        enumerable: true,
        get: function() {
          return _shape.default;
        }
      });
      Object.defineProperty(exports, "sizing", {
        enumerable: true,
        get: function() {
          return _sizing.default;
        }
      });
      Object.defineProperty(exports, "spacing", {
        enumerable: true,
        get: function() {
          return _spacing.default;
        }
      });
      Object.defineProperty(exports, "style", {
        enumerable: true,
        get: function() {
          return _style.default;
        }
      });
      Object.defineProperty(exports, "styled", {
        enumerable: true,
        get: function() {
          return _styled.default;
        }
      });
      Object.defineProperty(exports, "typography", {
        enumerable: true,
        get: function() {
          return _typography.default;
        }
      });
      Object.defineProperty(exports, "unstable_createCssVarsProvider", {
        enumerable: true,
        get: function() {
          return _createCssVarsProvider.default;
        }
      });
      Object.defineProperty(exports, "unstable_createCssVarsTheme", {
        enumerable: true,
        get: function() {
          return _createCssVarsTheme.default;
        }
      });
      Object.defineProperty(exports, "unstable_createGetCssVar", {
        enumerable: true,
        get: function() {
          return _createGetCssVar.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports, "unstable_cssVarsParser", {
        enumerable: true,
        get: function() {
          return _cssVarsParser.default;
        }
      });
      Object.defineProperty(exports, "unstable_defaultSxConfig", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_defaultSxConfig;
        }
      });
      Object.defineProperty(exports, "unstable_extendSxProp", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.extendSxProp;
        }
      });
      Object.defineProperty(exports, "unstable_getThemeValue", {
        enumerable: true,
        get: function() {
          return _getThemeValue.default;
        }
      });
      Object.defineProperty(exports, "unstable_prepareCssVars", {
        enumerable: true,
        get: function() {
          return _prepareCssVars.default;
        }
      });
      Object.defineProperty(exports, "unstable_resolveBreakpointValues", {
        enumerable: true,
        get: function() {
          return _breakpoints.resolveBreakpointValues;
        }
      });
      Object.defineProperty(exports, "unstable_styleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "useTheme", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      Object.defineProperty(exports, "useThemeProps", {
        enumerable: true,
        get: function() {
          return _useThemeProps.default;
        }
      });
      Object.defineProperty(exports, "useThemeWithoutDefault", {
        enumerable: true,
        get: function() {
          return _useThemeWithoutDefault.default;
        }
      });
      var _utils = require_utils();
      var _styledEngine = require_node();
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles4());
      var _borders = _interopRequireWildcard(require_borders());
      Object.keys(_borders).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _borders[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _borders[key];
          }
        });
      });
      var _breakpoints = _interopRequireWildcard(require_breakpoints());
      var _compose = _interopRequireDefault(require_compose());
      var _display = _interopRequireDefault(require_display());
      var _flexbox = _interopRequireWildcard(require_flexbox());
      Object.keys(_flexbox).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _flexbox[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _flexbox[key];
          }
        });
      });
      var _cssGrid = _interopRequireWildcard(require_cssGrid());
      Object.keys(_cssGrid).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _cssGrid[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _cssGrid[key];
          }
        });
      });
      var _palette = _interopRequireWildcard(require_palette());
      Object.keys(_palette).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _palette[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _palette[key];
          }
        });
      });
      var _positions = _interopRequireWildcard(require_positions());
      Object.keys(_positions).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _positions[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _positions[key];
          }
        });
      });
      var _shadows = _interopRequireDefault(require_shadows());
      var _sizing = _interopRequireWildcard(require_sizing());
      Object.keys(_sizing).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _sizing[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _sizing[key];
          }
        });
      });
      var _spacing = _interopRequireWildcard(require_spacing());
      Object.keys(_spacing).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _spacing[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _spacing[key];
          }
        });
      });
      var _style = _interopRequireWildcard(require_style());
      var _typography = _interopRequireWildcard(require_typography());
      Object.keys(_typography).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _typography[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _typography[key];
          }
        });
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
      var _getThemeValue = _interopRequireDefault(require_getThemeValue());
      var _Box = _interopRequireDefault(require_Box2());
      var _createBox = _interopRequireDefault(require_createBox());
      var _createStyled = _interopRequireWildcard(require_createStyled());
      Object.keys(_createStyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _createStyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _createStyled[key];
          }
        });
      });
      var _styled = _interopRequireDefault(require_styled());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _shape = _interopRequireDefault(require_shape());
      var _useThemeProps = _interopRequireWildcard(require_useThemeProps2());
      var _useTheme = _interopRequireDefault(require_useTheme());
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var _colorManipulator = require_colorManipulator();
      Object.keys(_colorManipulator).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _colorManipulator[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _colorManipulator[key];
          }
        });
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider4());
      var _createCssVarsProvider = _interopRequireDefault(require_createCssVarsProvider());
      var _createGetCssVar = _interopRequireDefault(require_createGetCssVar());
      var _cssVarsParser = _interopRequireDefault(require_cssVarsParser());
      var _prepareCssVars = _interopRequireDefault(require_prepareCssVars());
      var _createCssVarsTheme = _interopRequireDefault(require_createCssVarsTheme());
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _createContainer = _interopRequireDefault(require_createContainer());
      var _Container = _interopRequireWildcard(require_Container2());
      Object.keys(_Container).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Container[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Container[key];
          }
        });
      });
      var _Grid = _interopRequireDefault(require_Grid());
      var _Unstable_Grid = require_Unstable_Grid();
      Object.keys(_Unstable_Grid).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Unstable_Grid[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Unstable_Grid[key];
          }
        });
      });
      var _Stack = _interopRequireDefault(require_Stack());
      var _Stack2 = require_Stack2();
      Object.keys(_Stack2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Stack2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Stack2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function experimental_sx() {
        throw new Error(true ? `MUI: The \`experimental_sx\` has been moved to \`theme.unstable_sx\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : (0, _utils.formatMuiErrorMessage)(20));
      }
    }
  });

  // node_modules/@mui/material/node/generateUtilityClass/index.js
  var require_generateUtilityClass3 = __commonJS({
    "node_modules/@mui/material/node/generateUtilityClass/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.unstable_generateUtilityClass;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/base/node/utils/isHostComponent.js
  var require_isHostComponent = __commonJS({
    "node_modules/@mui/base/node/utils/isHostComponent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isHostComponent;
      function isHostComponent(element) {
        return typeof element === "string";
      }
    }
  });

  // node_modules/@mui/base/node/utils/appendOwnerState.js
  var require_appendOwnerState = __commonJS({
    "node_modules/@mui/base/node/utils/appendOwnerState.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = appendOwnerState;
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      function appendOwnerState(elementType, otherProps, ownerState) {
        if (elementType === void 0 || (0, _isHostComponent.default)(elementType)) {
          return otherProps;
        }
        return {
          ...otherProps,
          ownerState: {
            ...otherProps.ownerState,
            ...ownerState
          }
        };
      }
    }
  });

  // node_modules/@mui/base/node/utils/areArraysEqual.js
  var require_areArraysEqual = __commonJS({
    "node_modules/@mui/base/node/utils/areArraysEqual.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = areArraysEqual;
      function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
        return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
      }
    }
  });

  // node_modules/@mui/base/node/utils/ClassNameConfigurator.js
  var require_ClassNameConfigurator = __commonJS({
    "node_modules/@mui/base/node/utils/ClassNameConfigurator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ClassNameConfigurator;
      exports.useClassNamesOverride = useClassNamesOverride;
      var React16 = _interopRequireWildcard(require_react());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var defaultContextValue = {
        disableDefaultClasses: false
      };
      var ClassNameConfiguratorContext = /* @__PURE__ */ React16.createContext(defaultContextValue);
      function useClassNamesOverride(generateUtilityClass5) {
        const {
          disableDefaultClasses
        } = React16.useContext(ClassNameConfiguratorContext);
        return (slot) => {
          if (disableDefaultClasses) {
            return "";
          }
          return generateUtilityClass5(slot);
        };
      }
      function ClassNameConfigurator(props) {
        const {
          disableDefaultClasses,
          children
        } = props;
        const contextValue = React16.useMemo(() => ({
          disableDefaultClasses: disableDefaultClasses != null ? disableDefaultClasses : false
        }), [disableDefaultClasses]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ClassNameConfiguratorContext.Provider, {
          value: contextValue,
          children
        });
      }
    }
  });

  // node_modules/@mui/base/node/utils/extractEventHandlers.js
  var require_extractEventHandlers = __commonJS({
    "node_modules/@mui/base/node/utils/extractEventHandlers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = extractEventHandlers;
      function extractEventHandlers(object, excludeKeys = []) {
        if (object === void 0) {
          return {};
        }
        const result = {};
        Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
          result[prop] = object[prop];
        });
        return result;
      }
    }
  });

  // node_modules/@mui/base/node/utils/resolveComponentProps.js
  var require_resolveComponentProps = __commonJS({
    "node_modules/@mui/base/node/utils/resolveComponentProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = resolveComponentProps;
      function resolveComponentProps(componentProps, ownerState) {
        if (typeof componentProps === "function") {
          return componentProps(ownerState);
        }
        return componentProps;
      }
    }
  });

  // node_modules/@mui/base/node/utils/omitEventHandlers.js
  var require_omitEventHandlers = __commonJS({
    "node_modules/@mui/base/node/utils/omitEventHandlers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = omitEventHandlers;
      function omitEventHandlers(object) {
        if (object === void 0) {
          return {};
        }
        const result = {};
        Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
          result[prop] = object[prop];
        });
        return result;
      }
    }
  });

  // node_modules/@mui/base/node/utils/mergeSlotProps.js
  var require_mergeSlotProps = __commonJS({
    "node_modules/@mui/base/node/utils/mergeSlotProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = mergeSlotProps;
      var _clsx = _interopRequireDefault(require_clsx());
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      var _omitEventHandlers = _interopRequireDefault(require_omitEventHandlers());
      function mergeSlotProps(parameters) {
        const {
          getSlotProps,
          additionalProps,
          externalSlotProps,
          externalForwardedProps,
          className
        } = parameters;
        if (!getSlotProps) {
          const joinedClasses2 = (0, _clsx.default)(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
          const mergedStyle2 = {
            ...additionalProps == null ? void 0 : additionalProps.style,
            ...externalForwardedProps == null ? void 0 : externalForwardedProps.style,
            ...externalSlotProps == null ? void 0 : externalSlotProps.style
          };
          const props2 = {
            ...additionalProps,
            ...externalForwardedProps,
            ...externalSlotProps
          };
          if (joinedClasses2.length > 0) {
            props2.className = joinedClasses2;
          }
          if (Object.keys(mergedStyle2).length > 0) {
            props2.style = mergedStyle2;
          }
          return {
            props: props2,
            internalRef: void 0
          };
        }
        const eventHandlers = (0, _extractEventHandlers.default)({
          ...externalForwardedProps,
          ...externalSlotProps
        });
        const componentsPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalSlotProps);
        const otherPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalForwardedProps);
        const internalSlotProps = getSlotProps(eventHandlers);
        const joinedClasses = (0, _clsx.default)(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
        const mergedStyle = {
          ...internalSlotProps == null ? void 0 : internalSlotProps.style,
          ...additionalProps == null ? void 0 : additionalProps.style,
          ...externalForwardedProps == null ? void 0 : externalForwardedProps.style,
          ...externalSlotProps == null ? void 0 : externalSlotProps.style
        };
        const props = {
          ...internalSlotProps,
          ...additionalProps,
          ...otherPropsWithoutEventHandlers,
          ...componentsPropsWithoutEventHandlers
        };
        if (joinedClasses.length > 0) {
          props.className = joinedClasses;
        }
        if (Object.keys(mergedStyle).length > 0) {
          props.style = mergedStyle;
        }
        return {
          props,
          internalRef: internalSlotProps.ref
        };
      }
    }
  });

  // node_modules/@mui/base/node/utils/useSlotProps.js
  var require_useSlotProps = __commonJS({
    "node_modules/@mui/base/node/utils/useSlotProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useSlotProps;
      var _utils = require_utils();
      var _appendOwnerState = _interopRequireDefault(require_appendOwnerState());
      var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps());
      var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps());
      function useSlotProps(parameters) {
        var _parameters$additiona;
        const {
          elementType,
          externalSlotProps,
          ownerState,
          ...rest
        } = parameters;
        const resolvedComponentsProps = (0, _resolveComponentProps.default)(externalSlotProps, ownerState);
        const {
          props: mergedProps,
          internalRef
        } = (0, _mergeSlotProps.default)({
          ...rest,
          externalSlotProps: resolvedComponentsProps
        });
        const ref = (0, _utils.unstable_useForkRef)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
        const props = (0, _appendOwnerState.default)(elementType, {
          ...mergedProps,
          ref
        }, ownerState);
        return props;
      }
    }
  });

  // node_modules/@mui/base/node/utils/PolymorphicComponent.js
  var require_PolymorphicComponent = __commonJS({
    "node_modules/@mui/base/node/utils/PolymorphicComponent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/utils/types.js
  var require_types = __commonJS({
    "node_modules/@mui/base/node/utils/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/utils/index.js
  var require_utils2 = __commonJS({
    "node_modules/@mui/base/node/utils/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        appendOwnerState: true,
        areArraysEqual: true,
        ClassNameConfigurator: true,
        extractEventHandlers: true,
        isHostComponent: true,
        resolveComponentProps: true,
        useSlotProps: true,
        mergeSlotProps: true
      };
      Object.defineProperty(exports, "ClassNameConfigurator", {
        enumerable: true,
        get: function() {
          return _ClassNameConfigurator.default;
        }
      });
      Object.defineProperty(exports, "appendOwnerState", {
        enumerable: true,
        get: function() {
          return _appendOwnerState.default;
        }
      });
      Object.defineProperty(exports, "areArraysEqual", {
        enumerable: true,
        get: function() {
          return _areArraysEqual.default;
        }
      });
      Object.defineProperty(exports, "extractEventHandlers", {
        enumerable: true,
        get: function() {
          return _extractEventHandlers.default;
        }
      });
      Object.defineProperty(exports, "isHostComponent", {
        enumerable: true,
        get: function() {
          return _isHostComponent.default;
        }
      });
      Object.defineProperty(exports, "mergeSlotProps", {
        enumerable: true,
        get: function() {
          return _mergeSlotProps.default;
        }
      });
      Object.defineProperty(exports, "resolveComponentProps", {
        enumerable: true,
        get: function() {
          return _resolveComponentProps.default;
        }
      });
      Object.defineProperty(exports, "useSlotProps", {
        enumerable: true,
        get: function() {
          return _useSlotProps.default;
        }
      });
      var _appendOwnerState = _interopRequireDefault(require_appendOwnerState());
      var _areArraysEqual = _interopRequireDefault(require_areArraysEqual());
      var _ClassNameConfigurator = _interopRequireDefault(require_ClassNameConfigurator());
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps());
      var _useSlotProps = _interopRequireDefault(require_useSlotProps());
      var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps());
      var _PolymorphicComponent = require_PolymorphicComponent();
      Object.keys(_PolymorphicComponent).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _PolymorphicComponent[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _PolymorphicComponent[key];
          }
        });
      });
      var _types = require_types();
      Object.keys(_types).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _types[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _types[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/composeClasses/index.js
  var require_composeClasses3 = __commonJS({
    "node_modules/@mui/base/node/composeClasses/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.unstable_composeClasses;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/base/node/useBadge/useBadge.js
  var require_useBadge = __commonJS({
    "node_modules/@mui/base/node/useBadge/useBadge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useBadge;
      var _utils = require_utils();
      function useBadge(parameters) {
        const {
          badgeContent: badgeContentProp,
          invisible: invisibleProp = false,
          max: maxProp = 99,
          showZero = false
        } = parameters;
        const prevProps = (0, _utils.usePreviousProps)({
          badgeContent: badgeContentProp,
          max: maxProp
        });
        let invisible = invisibleProp;
        if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
          invisible = true;
        }
        const {
          badgeContent,
          max = maxProp
        } = invisible ? prevProps : parameters;
        const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
        return {
          badgeContent,
          invisible,
          max,
          displayValue
        };
      }
    }
  });

  // node_modules/@mui/base/node/useBadge/useBadge.types.js
  var require_useBadge_types = __commonJS({
    "node_modules/@mui/base/node/useBadge/useBadge.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useBadge/index.js
  var require_useBadge2 = __commonJS({
    "node_modules/@mui/base/node/useBadge/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useBadge.default;
        }
      });
      var _useBadge = _interopRequireDefault(require_useBadge());
      var _useBadge2 = require_useBadge_types();
      Object.keys(_useBadge2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useBadge2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useBadge2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/generateUtilityClasses/index.js
  var require_generateUtilityClasses3 = __commonJS({
    "node_modules/@mui/base/node/generateUtilityClasses/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.unstable_generateUtilityClasses;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/base/node/generateUtilityClass/index.js
  var require_generateUtilityClass4 = __commonJS({
    "node_modules/@mui/base/node/generateUtilityClass/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.unstable_generateUtilityClass;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/base/node/Badge/badgeClasses.js
  var require_badgeClasses = __commonJS({
    "node_modules/@mui/base/node/Badge/badgeClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getBadgeUtilityClass = getBadgeUtilityClass;
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      function getBadgeUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiBadge", slot);
      }
      var badgeClasses = (0, _generateUtilityClasses.default)("MuiBadge", ["root", "badge", "invisible"]);
      var _default = badgeClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Badge/Badge.js
  var require_Badge = __commonJS({
    "node_modules/@mui/base/node/Badge/Badge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _useBadge = _interopRequireDefault(require_useBadge2());
      var _badgeClasses = require_badgeClasses();
      var _utils = require_utils2();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          invisible
        } = ownerState;
        const slots = {
          root: ["root"],
          badge: ["badge", invisible && "invisible"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_badgeClasses.getBadgeUtilityClass));
      };
      var Badge = /* @__PURE__ */ React16.forwardRef(function Badge2(props, forwardedRef) {
        var _slots$root, _slots$badge;
        const {
          badgeContent: badgeContentProp,
          children,
          invisible: invisibleProp,
          max: maxProp = 99,
          slotProps = {},
          slots = {},
          showZero = false,
          ...other
        } = props;
        const {
          badgeContent,
          max,
          displayValue,
          invisible
        } = (0, _useBadge.default)({
          ...props,
          max: maxProp
        });
        const ownerState = {
          ...props,
          badgeContent,
          invisible,
          max,
          showZero
        };
        const classes = useUtilityClasses4(ownerState);
        const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        const BadgeComponent = (_slots$badge = slots.badge) != null ? _slots$badge : "span";
        const badgeProps = (0, _utils.useSlotProps)({
          elementType: BadgeComponent,
          externalSlotProps: slotProps.badge,
          ownerState,
          className: classes.badge
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, {
          ...rootProps,
          children: [children, /* @__PURE__ */ (0, _jsxRuntime.jsx)(BadgeComponent, {
            ...badgeProps,
            children: displayValue
          })]
        });
      });
      true ? Badge.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content rendered within the badge.
         */
        badgeContent: _propTypes.default.node,
        /**
         * The badge will be added relative to this node.
         */
        children: _propTypes.default.node,
        /**
         * If `true`, the badge is invisible.
         * @default false
         */
        invisible: _propTypes.default.bool,
        /**
         * Max count to show.
         * @default 99
         */
        max: _propTypes.default.number,
        /**
         * Controls whether the badge is hidden when `badgeContent` is zero.
         * @default false
         */
        showZero: _propTypes.default.bool,
        /**
         * The props used for each slot inside the Badge.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          badge: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Badge.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          badge: _propTypes.default.elementType,
          root: _propTypes.default.elementType
        })
      } : void 0;
      var _default = Badge;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Badge/Badge.types.js
  var require_Badge_types = __commonJS({
    "node_modules/@mui/base/node/Badge/Badge.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Badge/index.js
  var require_Badge2 = __commonJS({
    "node_modules/@mui/base/node/Badge/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        badgeClasses: true
      };
      Object.defineProperty(exports, "badgeClasses", {
        enumerable: true,
        get: function() {
          return _badgeClasses.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Badge.default;
        }
      });
      var _Badge = _interopRequireDefault(require_Badge());
      var _Badge2 = require_Badge_types();
      Object.keys(_Badge2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Badge2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Badge2[key];
          }
        });
      });
      var _badgeClasses = _interopRequireWildcard(require_badgeClasses());
      Object.keys(_badgeClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _badgeClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _badgeClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Button/buttonClasses.js
  var require_buttonClasses = __commonJS({
    "node_modules/@mui/base/node/Button/buttonClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getButtonUtilityClass = getButtonUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getButtonUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiButton", slot);
      }
      var buttonClasses = (0, _generateUtilityClasses.default)("MuiButton", ["root", "active", "disabled", "focusVisible"]);
      var _default = buttonClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useButton/useButton.js
  var require_useButton = __commonJS({
    "node_modules/@mui/base/node/useButton/useButton.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useButton;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useButton(parameters = {}) {
        const {
          disabled = false,
          focusableWhenDisabled,
          href,
          rootRef: externalRef,
          tabIndex,
          to,
          type
        } = parameters;
        const buttonRef = React16.useRef();
        const [active, setActive] = React16.useState(false);
        const {
          isFocusVisibleRef,
          onFocus: handleFocusVisible,
          onBlur: handleBlurVisible,
          ref: focusVisibleRef
        } = (0, _utils.unstable_useIsFocusVisible)();
        const [focusVisible, setFocusVisible] = React16.useState(false);
        if (disabled && !focusableWhenDisabled && focusVisible) {
          setFocusVisible(false);
        }
        React16.useEffect(() => {
          isFocusVisibleRef.current = focusVisible;
        }, [focusVisible, isFocusVisibleRef]);
        const [hostElementName, setHostElementName] = React16.useState("");
        const createHandleMouseLeave = (otherHandlers) => (event) => {
          var _otherHandlers$onMous;
          if (focusVisible) {
            event.preventDefault();
          }
          (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
        };
        const createHandleBlur = (otherHandlers) => (event) => {
          var _otherHandlers$onBlur;
          handleBlurVisible(event);
          if (isFocusVisibleRef.current === false) {
            setFocusVisible(false);
          }
          (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
        };
        const createHandleFocus = (otherHandlers) => (event) => {
          var _otherHandlers$onFocu2;
          if (!buttonRef.current) {
            buttonRef.current = event.currentTarget;
          }
          handleFocusVisible(event);
          if (isFocusVisibleRef.current === true) {
            var _otherHandlers$onFocu;
            setFocusVisible(true);
            (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
          }
          (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
        };
        const isNativeButton = () => {
          const button = buttonRef.current;
          return hostElementName === "BUTTON" || hostElementName === "INPUT" && ["button", "submit", "reset"].includes(button == null ? void 0 : button.type) || hostElementName === "A" && (button == null ? void 0 : button.href);
        };
        const createHandleClick = (otherHandlers) => (event) => {
          if (!disabled) {
            var _otherHandlers$onClic;
            (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
          }
        };
        const createHandleMouseDown = (otherHandlers) => (event) => {
          var _otherHandlers$onMous2;
          if (!disabled) {
            setActive(true);
            document.addEventListener("mouseup", () => {
              setActive(false);
            }, {
              once: true
            });
          }
          (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
        };
        const createHandleKeyDown = (otherHandlers) => (event) => {
          var _otherHandlers$onKeyD;
          (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
          if (event.defaultMuiPrevented) {
            return;
          }
          if (event.target === event.currentTarget && !isNativeButton() && event.key === " ") {
            event.preventDefault();
          }
          if (event.target === event.currentTarget && event.key === " " && !disabled) {
            setActive(true);
          }
          if (event.target === event.currentTarget && !isNativeButton() && event.key === "Enter" && !disabled) {
            var _otherHandlers$onClic2;
            (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
            event.preventDefault();
          }
        };
        const createHandleKeyUp = (otherHandlers) => (event) => {
          var _otherHandlers$onKeyU;
          if (event.target === event.currentTarget) {
            setActive(false);
          }
          (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
          if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === " " && !event.defaultMuiPrevented) {
            var _otherHandlers$onClic3;
            (_otherHandlers$onClic3 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic3.call(otherHandlers, event);
          }
        };
        const updateHostElementName = React16.useCallback((instance) => {
          var _instance$tagName;
          setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : "");
        }, []);
        const handleRef = (0, _utils.unstable_useForkRef)(updateHostElementName, externalRef, focusVisibleRef, buttonRef);
        const buttonProps = {};
        if (hostElementName === "BUTTON") {
          buttonProps.type = type != null ? type : "button";
          if (focusableWhenDisabled) {
            buttonProps["aria-disabled"] = disabled;
          } else {
            buttonProps.disabled = disabled;
          }
        } else if (hostElementName !== "") {
          if (!href && !to) {
            buttonProps.role = "button";
            buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;
          }
          if (disabled) {
            buttonProps["aria-disabled"] = disabled;
            buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;
          }
        }
        const getRootProps = (otherHandlers = {}) => {
          const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
          const externalEventHandlers = {
            ...propsEventHandlers,
            ...otherHandlers
          };
          delete externalEventHandlers.onFocusVisible;
          return {
            type,
            ...externalEventHandlers,
            ...buttonProps,
            onBlur: createHandleBlur(externalEventHandlers),
            onClick: createHandleClick(externalEventHandlers),
            onFocus: createHandleFocus(externalEventHandlers),
            onKeyDown: createHandleKeyDown(externalEventHandlers),
            onKeyUp: createHandleKeyUp(externalEventHandlers),
            onMouseDown: createHandleMouseDown(externalEventHandlers),
            onMouseLeave: createHandleMouseLeave(externalEventHandlers),
            ref: handleRef
          };
        };
        return {
          getRootProps,
          focusVisible,
          setFocusVisible,
          active,
          rootRef: handleRef
        };
      }
    }
  });

  // node_modules/@mui/base/node/useButton/useButton.types.js
  var require_useButton_types = __commonJS({
    "node_modules/@mui/base/node/useButton/useButton.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useButton/index.js
  var require_useButton2 = __commonJS({
    "node_modules/@mui/base/node/useButton/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useButton.default;
        }
      });
      var _useButton = _interopRequireDefault(require_useButton());
      var _useButton2 = require_useButton_types();
      Object.keys(_useButton2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useButton2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useButton2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/Button/Button.js
  var require_Button = __commonJS({
    "node_modules/@mui/base/node/Button/Button.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _buttonClasses = require_buttonClasses();
      var _useButton = _interopRequireDefault(require_useButton2());
      var _utils = require_utils2();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          active,
          disabled,
          focusVisible
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_buttonClasses.getButtonUtilityClass));
      };
      var Button = /* @__PURE__ */ React16.forwardRef(function Button2(props, forwardedRef) {
        var _slots$root;
        const {
          action,
          children,
          disabled,
          focusableWhenDisabled = false,
          onFocusVisible,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const buttonRef = React16.useRef();
        const {
          active,
          focusVisible,
          setFocusVisible,
          getRootProps
        } = (0, _useButton.default)({
          ...props,
          focusableWhenDisabled
        });
        React16.useImperativeHandle(action, () => ({
          focusVisible: () => {
            setFocusVisible(true);
            buttonRef.current.focus();
          }
        }), [setFocusVisible]);
        const ownerState = {
          ...props,
          active,
          focusableWhenDisabled,
          focusVisible
        };
        const classes = useUtilityClasses4(ownerState);
        const defaultElement = other.href || other.to ? "a" : "button";
        const Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root,
          getSlotProps: getRootProps,
          externalForwardedProps: other,
          externalSlotProps: slotProps.root,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
          ...rootProps,
          children
        });
      });
      true ? Button.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * A ref for imperative actions. It currently only supports `focusVisible()` action.
         */
        action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
          current: _propTypes.default.shape({
            focusVisible: _propTypes.default.func.isRequired
          })
        })]),
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * If `true`, the component is disabled.
         * @default false
         */
        disabled: _propTypes.default.bool,
        /**
         * If `true`, allows a disabled button to receive focus.
         * @default false
         */
        focusableWhenDisabled: _propTypes.default.bool,
        /**
         * @ignore
         */
        href: _propTypes.default.string,
        /**
         * @ignore
         */
        onFocusVisible: _propTypes.default.func,
        /**
         * The props used for each slot inside the Button.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Button.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        }),
        /**
         * @ignore
         */
        to: _propTypes.default.string
      } : void 0;
      var _default = Button;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Button/Button.types.js
  var require_Button_types = __commonJS({
    "node_modules/@mui/base/node/Button/Button.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Button/index.js
  var require_Button2 = __commonJS({
    "node_modules/@mui/base/node/Button/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        buttonClasses: true
      };
      Object.defineProperty(exports, "buttonClasses", {
        enumerable: true,
        get: function() {
          return _buttonClasses.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Button.default;
        }
      });
      var _Button = _interopRequireDefault(require_Button());
      var _buttonClasses = _interopRequireWildcard(require_buttonClasses());
      Object.keys(_buttonClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _buttonClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _buttonClasses[key];
          }
        });
      });
      var _Button2 = require_Button_types();
      Object.keys(_Button2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Button2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Button2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/ClickAwayListener/ClickAwayListener.js
  var require_ClickAwayListener = __commonJS({
    "node_modules/@mui/base/node/ClickAwayListener/ClickAwayListener.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function mapEventPropToEvent(eventProp) {
        return eventProp.substring(2).toLowerCase();
      }
      function clickedRootScrollbar(event, doc) {
        return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
      }
      function ClickAwayListener(props) {
        const {
          children,
          disableReactTree = false,
          mouseEvent = "onClick",
          onClickAway,
          touchEvent = "onTouchEnd"
        } = props;
        const movedRef = React16.useRef(false);
        const nodeRef = React16.useRef(null);
        const activatedRef = React16.useRef(false);
        const syntheticEventRef = React16.useRef(false);
        React16.useEffect(() => {
          setTimeout(() => {
            activatedRef.current = true;
          }, 0);
          return () => {
            activatedRef.current = false;
          };
        }, []);
        const handleRef = (0, _utils.unstable_useForkRef)(
          // @ts-expect-error TODO upstream fix
          children.ref,
          nodeRef
        );
        const handleClickAway = (0, _utils.unstable_useEventCallback)((event) => {
          const insideReactTree = syntheticEventRef.current;
          syntheticEventRef.current = false;
          const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);
          if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
            return;
          }
          if (movedRef.current) {
            movedRef.current = false;
            return;
          }
          let insideDOM;
          if (event.composedPath) {
            insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
          } else {
            insideDOM = !doc.documentElement.contains(
              // @ts-expect-error returns `false` as intended when not dispatched from a Node
              event.target
            ) || nodeRef.current.contains(
              // @ts-expect-error returns `false` as intended when not dispatched from a Node
              event.target
            );
          }
          if (!insideDOM && (disableReactTree || !insideReactTree)) {
            onClickAway(event);
          }
        });
        const createHandleSynthetic = (handlerName) => (event) => {
          syntheticEventRef.current = true;
          const childrenPropsHandler = children.props[handlerName];
          if (childrenPropsHandler) {
            childrenPropsHandler(event);
          }
        };
        const childrenProps = {
          ref: handleRef
        };
        if (touchEvent !== false) {
          childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
        }
        React16.useEffect(() => {
          if (touchEvent !== false) {
            const mappedTouchEvent = mapEventPropToEvent(touchEvent);
            const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);
            const handleTouchMove = () => {
              movedRef.current = true;
            };
            doc.addEventListener(mappedTouchEvent, handleClickAway);
            doc.addEventListener("touchmove", handleTouchMove);
            return () => {
              doc.removeEventListener(mappedTouchEvent, handleClickAway);
              doc.removeEventListener("touchmove", handleTouchMove);
            };
          }
          return void 0;
        }, [handleClickAway, touchEvent]);
        if (mouseEvent !== false) {
          childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
        }
        React16.useEffect(() => {
          if (mouseEvent !== false) {
            const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
            const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);
            doc.addEventListener(mappedMouseEvent, handleClickAway);
            return () => {
              doc.removeEventListener(mappedMouseEvent, handleClickAway);
            };
          }
          return void 0;
        }, [handleClickAway, mouseEvent]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React16.Fragment, {
          children: /* @__PURE__ */ React16.cloneElement(children, childrenProps)
        });
      }
      true ? ClickAwayListener.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The wrapped element.
         */
        children: _utils.elementAcceptingRef.isRequired,
        /**
         * If `true`, the React tree is ignored and only the DOM tree is considered.
         * This prop changes how portaled elements are handled.
         * @default false
         */
        disableReactTree: _propTypes.default.bool,
        /**
         * The mouse event to listen to. You can disable the listener by providing `false`.
         * @default 'onClick'
         */
        mouseEvent: _propTypes.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
        /**
         * Callback fired when a "click away" event is detected.
         */
        onClickAway: _propTypes.default.func.isRequired,
        /**
         * The touch event to listen to. You can disable the listener by providing `false`.
         * @default 'onTouchEnd'
         */
        touchEvent: _propTypes.default.oneOf(["onTouchEnd", "onTouchStart", false])
      } : void 0;
      if (true) {
        ClickAwayListener["propTypes"] = (0, _utils.exactProp)(ClickAwayListener.propTypes);
      }
      var _default = ClickAwayListener;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/ClickAwayListener/index.js
  var require_ClickAwayListener2 = __commonJS({
    "node_modules/@mui/base/node/ClickAwayListener/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ClickAwayListener.default;
        }
      });
      var _ClickAwayListener = _interopRequireWildcard(require_ClickAwayListener());
      Object.keys(_ClickAwayListener).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ClickAwayListener[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ClickAwayListener[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/FocusTrap/FocusTrap.js
  var require_FocusTrap = __commonJS({
    "node_modules/@mui/base/node/FocusTrap/FocusTrap.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
      function getTabIndex(node2) {
        const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
        if (!Number.isNaN(tabindexAttr)) {
          return tabindexAttr;
        }
        if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
          return 0;
        }
        return node2.tabIndex;
      }
      function isNonTabbableRadio(node2) {
        if (node2.tagName !== "INPUT" || node2.type !== "radio") {
          return false;
        }
        if (!node2.name) {
          return false;
        }
        const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
        let roving = getRadio(`[name="${node2.name}"]:checked`);
        if (!roving) {
          roving = getRadio(`[name="${node2.name}"]`);
        }
        return roving !== node2;
      }
      function isNodeMatchingSelectorFocusable(node2) {
        if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
          return false;
        }
        return true;
      }
      function defaultGetTabbable(root) {
        const regularTabNodes = [];
        const orderedTabNodes = [];
        Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
          const nodeTabIndex = getTabIndex(node2);
          if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
            return;
          }
          if (nodeTabIndex === 0) {
            regularTabNodes.push(node2);
          } else {
            orderedTabNodes.push({
              documentOrder: i,
              tabIndex: nodeTabIndex,
              node: node2
            });
          }
        });
        return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
      }
      function defaultIsEnabled() {
        return true;
      }
      function FocusTrap(props) {
        const {
          children,
          disableAutoFocus = false,
          disableEnforceFocus = false,
          disableRestoreFocus = false,
          getTabbable = defaultGetTabbable,
          isEnabled = defaultIsEnabled,
          open
        } = props;
        const ignoreNextEnforceFocus = React16.useRef(false);
        const sentinelStart = React16.useRef(null);
        const sentinelEnd = React16.useRef(null);
        const nodeToRestore = React16.useRef(null);
        const reactFocusEventTarget = React16.useRef(null);
        const activated = React16.useRef(false);
        const rootRef = React16.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(children.ref, rootRef);
        const lastKeydown = React16.useRef(null);
        React16.useEffect(() => {
          if (!open || !rootRef.current) {
            return;
          }
          activated.current = !disableAutoFocus;
        }, [disableAutoFocus, open]);
        React16.useEffect(() => {
          if (!open || !rootRef.current) {
            return;
          }
          const doc = (0, _utils.unstable_ownerDocument)(rootRef.current);
          if (!rootRef.current.contains(doc.activeElement)) {
            if (!rootRef.current.hasAttribute("tabIndex")) {
              if (true) {
                console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
              }
              rootRef.current.setAttribute("tabIndex", "-1");
            }
            if (activated.current) {
              rootRef.current.focus();
            }
          }
          return () => {
            if (!disableRestoreFocus) {
              if (nodeToRestore.current && nodeToRestore.current.focus) {
                ignoreNextEnforceFocus.current = true;
                nodeToRestore.current.focus();
              }
              nodeToRestore.current = null;
            }
          };
        }, [open]);
        React16.useEffect(() => {
          if (!open || !rootRef.current) {
            return;
          }
          const doc = (0, _utils.unstable_ownerDocument)(rootRef.current);
          const contain = (nativeEvent) => {
            const {
              current: rootElement
            } = rootRef;
            if (rootElement === null) {
              return;
            }
            if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
              ignoreNextEnforceFocus.current = false;
              return;
            }
            if (!rootElement.contains(doc.activeElement)) {
              if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
                reactFocusEventTarget.current = null;
              } else if (reactFocusEventTarget.current !== null) {
                return;
              }
              if (!activated.current) {
                return;
              }
              let tabbable = [];
              if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
                tabbable = getTabbable(rootRef.current);
              }
              if (tabbable.length > 0) {
                var _lastKeydown$current, _lastKeydown$current2;
                const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
                const focusNext = tabbable[0];
                const focusPrevious = tabbable[tabbable.length - 1];
                if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
                  if (isShiftTab) {
                    focusPrevious.focus();
                  } else {
                    focusNext.focus();
                  }
                }
              } else {
                rootElement.focus();
              }
            }
          };
          const loopFocus = (nativeEvent) => {
            lastKeydown.current = nativeEvent;
            if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
              return;
            }
            if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
              ignoreNextEnforceFocus.current = true;
              if (sentinelEnd.current) {
                sentinelEnd.current.focus();
              }
            }
          };
          doc.addEventListener("focusin", contain);
          doc.addEventListener("keydown", loopFocus, true);
          const interval = setInterval(() => {
            if (doc.activeElement && doc.activeElement.tagName === "BODY") {
              contain(null);
            }
          }, 50);
          return () => {
            clearInterval(interval);
            doc.removeEventListener("focusin", contain);
            doc.removeEventListener("keydown", loopFocus, true);
          };
        }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
        const onFocus = (event) => {
          if (nodeToRestore.current === null) {
            nodeToRestore.current = event.relatedTarget;
          }
          activated.current = true;
          reactFocusEventTarget.current = event.target;
          const childrenPropsHandler = children.props.onFocus;
          if (childrenPropsHandler) {
            childrenPropsHandler(event);
          }
        };
        const handleFocusSentinel = (event) => {
          if (nodeToRestore.current === null) {
            nodeToRestore.current = event.relatedTarget;
          }
          activated.current = true;
        };
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React16.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
            tabIndex: open ? 0 : -1,
            onFocus: handleFocusSentinel,
            ref: sentinelStart,
            "data-testid": "sentinelStart"
          }), /* @__PURE__ */ React16.cloneElement(children, {
            ref: handleRef,
            onFocus
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
            tabIndex: open ? 0 : -1,
            onFocus: handleFocusSentinel,
            ref: sentinelEnd,
            "data-testid": "sentinelEnd"
          })]
        });
      }
      true ? FocusTrap.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * A single child content element.
         */
        children: _utils.elementAcceptingRef,
        /**
         * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
         * replace it to the last focused element when it closes.
         * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
         *
         * Generally this should never be set to `true` as it makes the focus trap less
         * accessible to assistive technologies, like screen readers.
         * @default false
         */
        disableAutoFocus: _propTypes.default.bool,
        /**
         * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
         *
         * Generally this should never be set to `true` as it makes the focus trap less
         * accessible to assistive technologies, like screen readers.
         * @default false
         */
        disableEnforceFocus: _propTypes.default.bool,
        /**
         * If `true`, the focus trap will not restore focus to previously focused element once
         * focus trap is hidden or unmounted.
         * @default false
         */
        disableRestoreFocus: _propTypes.default.bool,
        /**
         * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
         * For instance, you can provide the "tabbable" npm dependency.
         * @param {HTMLElement} root
         */
        getTabbable: _propTypes.default.func,
        /**
         * This prop extends the `open` prop.
         * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
         * This prop should be memoized.
         * It can be used to support multiple focus trap mounted at the same time.
         * @default function defaultIsEnabled(): boolean {
         *   return true;
         * }
         */
        isEnabled: _propTypes.default.func,
        /**
         * If `true`, focus is locked.
         */
        open: _propTypes.default.bool.isRequired
      } : void 0;
      if (true) {
        FocusTrap["propTypes"] = (0, _utils.exactProp)(FocusTrap.propTypes);
      }
      var _default = FocusTrap;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/FocusTrap/FocusTrap.types.js
  var require_FocusTrap_types = __commonJS({
    "node_modules/@mui/base/node/FocusTrap/FocusTrap.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/FocusTrap/index.js
  var require_FocusTrap2 = __commonJS({
    "node_modules/@mui/base/node/FocusTrap/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _FocusTrap.default;
        }
      });
      var _FocusTrap = _interopRequireDefault(require_FocusTrap());
      var _FocusTrap2 = require_FocusTrap_types();
      Object.keys(_FocusTrap2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _FocusTrap2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _FocusTrap2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/FormControl/FormControlContext.js
  var require_FormControlContext = __commonJS({
    "node_modules/@mui/base/node/FormControl/FormControlContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var FormControlContext = /* @__PURE__ */ React16.createContext(void 0);
      if (true) {
        FormControlContext.displayName = "FormControlContext";
      }
      var _default = FormControlContext;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/FormControl/formControlClasses.js
  var require_formControlClasses = __commonJS({
    "node_modules/@mui/base/node/FormControl/formControlClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getFormControlUtilityClass = getFormControlUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getFormControlUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiFormControl", slot);
      }
      var formControlClasses = (0, _generateUtilityClasses.default)("MuiFormControl", ["root", "disabled", "error", "filled", "focused", "required"]);
      var _default = formControlClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/FormControl/FormControl.js
  var require_FormControl = __commonJS({
    "node_modules/@mui/base/node/FormControl/FormControl.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _FormControlContext = _interopRequireDefault(require_FormControlContext());
      var _formControlClasses = require_formControlClasses();
      var _utils2 = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function hasValue(value) {
        return value != null && !(Array.isArray(value) && value.length === 0) && value !== "";
      }
      function useUtilityClasses4(ownerState) {
        const {
          disabled,
          error,
          filled,
          focused,
          required
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focused && "focused", error && "error", filled && "filled", required && "required"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_formControlClasses.getFormControlUtilityClass));
      }
      var FormControl = /* @__PURE__ */ React16.forwardRef(function FormControl2(props, forwardedRef) {
        var _slots$root;
        const {
          defaultValue,
          children,
          disabled = false,
          error = false,
          onChange,
          required = false,
          slotProps = {},
          slots = {},
          value: incomingValue,
          ...other
        } = props;
        const [value, setValue] = (0, _utils.unstable_useControlled)({
          controlled: incomingValue,
          default: defaultValue,
          name: "FormControl",
          state: "value"
        });
        const filled = hasValue(value);
        const [focusedState, setFocused] = React16.useState(false);
        const focused = focusedState && !disabled;
        React16.useEffect(() => setFocused((isFocused) => disabled ? false : isFocused), [disabled]);
        const ownerState = {
          ...props,
          disabled,
          error,
          filled,
          focused,
          required
        };
        const childContext = React16.useMemo(() => {
          return {
            disabled,
            error,
            filled,
            focused,
            onBlur: () => {
              setFocused(false);
            },
            onChange: (event) => {
              setValue(event.target.value);
              onChange == null ? void 0 : onChange(event);
            },
            onFocus: () => {
              setFocused(true);
            },
            required,
            value: value != null ? value : ""
          };
        }, [disabled, error, filled, focused, onChange, required, setValue, value]);
        const classes = useUtilityClasses4(ownerState);
        const renderChildren = () => {
          if (typeof children === "function") {
            return children(childContext);
          }
          return children;
        };
        const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef,
            children: renderChildren()
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_FormControlContext.default.Provider, {
          value: childContext,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
            ...rootProps
          })
        });
      });
      true ? FormControl.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content of the component.
         */
        children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
        /**
         * @ignore
         */
        defaultValue: _propTypes.default.any,
        /**
         * If `true`, the label, input and helper text should be displayed in a disabled state.
         * @default false
         */
        disabled: _propTypes.default.bool,
        /**
         * If `true`, the label is displayed in an error state.
         * @default false
         */
        error: _propTypes.default.bool,
        /**
         * Callback fired when the form element's value is modified.
         */
        onChange: _propTypes.default.func,
        /**
         * If `true`, the label will indicate that the `input` is required.
         * @default false
         */
        required: _propTypes.default.bool,
        /**
         * The props used for each slot inside the FormControl.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the FormControl.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        }),
        /**
         * The value of the form element.
         */
        value: _propTypes.default.any
      } : void 0;
      var _default = FormControl;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/FormControl/useFormControlContext.js
  var require_useFormControlContext = __commonJS({
    "node_modules/@mui/base/node/FormControl/useFormControlContext.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useFormControlContext;
      var React16 = _interopRequireWildcard(require_react());
      var _FormControlContext = _interopRequireDefault(require_FormControlContext());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useFormControlContext() {
        return React16.useContext(_FormControlContext.default);
      }
    }
  });

  // node_modules/@mui/base/node/FormControl/index.js
  var require_FormControl2 = __commonJS({
    "node_modules/@mui/base/node/FormControl/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        FormControlContext: true,
        formControlClasses: true,
        useFormControlContext: true
      };
      Object.defineProperty(exports, "FormControlContext", {
        enumerable: true,
        get: function() {
          return _FormControlContext.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _FormControl.default;
        }
      });
      Object.defineProperty(exports, "formControlClasses", {
        enumerable: true,
        get: function() {
          return _formControlClasses.default;
        }
      });
      Object.defineProperty(exports, "useFormControlContext", {
        enumerable: true,
        get: function() {
          return _useFormControlContext.default;
        }
      });
      var _FormControl = _interopRequireDefault(require_FormControl());
      var _FormControlContext = _interopRequireDefault(require_FormControlContext());
      var _formControlClasses = _interopRequireWildcard(require_formControlClasses());
      Object.keys(_formControlClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _formControlClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _formControlClasses[key];
          }
        });
      });
      var _useFormControlContext = _interopRequireDefault(require_useFormControlContext());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Input/inputClasses.js
  var require_inputClasses = __commonJS({
    "node_modules/@mui/base/node/Input/inputClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getInputUtilityClass = getInputUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getInputUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiInput", slot);
      }
      var inputClasses = (0, _generateUtilityClasses.default)("MuiInput", ["root", "formControl", "focused", "disabled", "error", "multiline", "input", "inputMultiline", "inputTypeSearch", "adornedStart", "adornedEnd"]);
      var _default = inputClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useInput/useInput.js
  var require_useInput = __commonJS({
    "node_modules/@mui/base/node/useInput/useInput.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useInput;
      var _utils = require_utils();
      var React16 = _interopRequireWildcard(require_react());
      var _FormControl = require_FormControl2();
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useInput(parameters) {
        const {
          defaultValue: defaultValueProp,
          disabled: disabledProp = false,
          error: errorProp = false,
          onBlur,
          onChange,
          onFocus,
          required: requiredProp = false,
          value: valueProp,
          inputRef: inputRefProp
        } = parameters;
        const formControlContext = (0, _FormControl.useFormControlContext)();
        let defaultValue;
        let disabled;
        let error;
        let required;
        let value;
        if (formControlContext) {
          var _formControlContext$d, _formControlContext$e, _formControlContext$r;
          defaultValue = void 0;
          disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
          error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
          required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
          value = formControlContext.value;
          if (true) {
            const definedLocalProps = ["defaultValue", "disabled", "error", "required", "value"].filter((prop) => parameters[prop] !== void 0);
            if (definedLocalProps.length > 0) {
              console.warn(["MUI: You have set props on an input that is inside a FormControl.", "Set these props on a FormControl instead. Otherwise they will be ignored.", `Ignored props: ${definedLocalProps.join(", ")}`].join("\n"));
            }
          }
        } else {
          defaultValue = defaultValueProp;
          disabled = disabledProp;
          error = errorProp;
          required = requiredProp;
          value = valueProp;
        }
        const {
          current: isControlled
        } = React16.useRef(value != null);
        const handleInputRefWarning = React16.useCallback((instance) => {
          if (true) {
            if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
              console.error(["MUI: You have provided a `slots.input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
            }
          }
        }, []);
        const inputRef = React16.useRef(null);
        const handleInputRef = (0, _utils.unstable_useForkRef)(inputRef, inputRefProp, handleInputRefWarning);
        const [focused, setFocused] = React16.useState(false);
        React16.useEffect(() => {
          if (!formControlContext && disabled && focused) {
            setFocused(false);
            onBlur == null ? void 0 : onBlur();
          }
        }, [formControlContext, disabled, focused, onBlur]);
        const handleFocus = (otherHandlers) => (event) => {
          var _otherHandlers$onFocu;
          if (formControlContext != null && formControlContext.disabled) {
            event.stopPropagation();
            return;
          }
          (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
          if (formControlContext && formControlContext.onFocus) {
            var _formControlContext$o;
            formControlContext == null ? void 0 : (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);
          } else {
            setFocused(true);
          }
        };
        const handleBlur = (otherHandlers) => (event) => {
          var _otherHandlers$onBlur;
          (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
          if (formControlContext && formControlContext.onBlur) {
            formControlContext.onBlur();
          } else {
            setFocused(false);
          }
        };
        const handleChange = (otherHandlers) => (event, ...args) => {
          var _formControlContext$o2, _otherHandlers$onChan;
          if (!isControlled) {
            const element = event.target || inputRef.current;
            if (element == null) {
              throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, _utils.formatMuiErrorMessage)(17));
            }
          }
          formControlContext == null ? void 0 : (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event);
          (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);
        };
        const handleClick = (otherHandlers) => (event) => {
          var _otherHandlers$onClic;
          if (inputRef.current && event.currentTarget === event.target) {
            inputRef.current.focus();
          }
          (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
        };
        const getRootProps = (externalProps = {}) => {
          const propsEventHandlers = (0, _extractEventHandlers.default)(parameters, ["onBlur", "onChange", "onFocus"]);
          const externalEventHandlers = {
            ...propsEventHandlers,
            ...(0, _extractEventHandlers.default)(externalProps)
          };
          return {
            ...externalProps,
            ...externalEventHandlers,
            onClick: handleClick(externalEventHandlers)
          };
        };
        const getInputProps = (externalProps = {}) => {
          const propsEventHandlers = {
            onBlur,
            onChange,
            onFocus
          };
          const externalEventHandlers = {
            ...propsEventHandlers,
            ...(0, _extractEventHandlers.default)(externalProps)
          };
          const mergedEventHandlers = {
            ...externalProps,
            ...externalEventHandlers,
            onBlur: handleBlur(externalEventHandlers),
            onChange: handleChange(externalEventHandlers),
            onFocus: handleFocus(externalEventHandlers)
          };
          return {
            ...mergedEventHandlers,
            "aria-invalid": error || void 0,
            defaultValue,
            ref: handleInputRef,
            value,
            required,
            disabled
          };
        };
        return {
          disabled,
          error,
          focused,
          formControlContext,
          getInputProps,
          getRootProps,
          inputRef: handleInputRef,
          required,
          value
        };
      }
    }
  });

  // node_modules/@mui/base/node/useInput/useInput.types.js
  var require_useInput_types = __commonJS({
    "node_modules/@mui/base/node/useInput/useInput.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useInput/index.js
  var require_useInput2 = __commonJS({
    "node_modules/@mui/base/node/useInput/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useInput.default;
        }
      });
      var _useInput = _interopRequireDefault(require_useInput());
      var _useInput2 = require_useInput_types();
      Object.keys(_useInput2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useInput2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useInput2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/Input/Input.js
  var require_Input = __commonJS({
    "node_modules/@mui/base/node/Input/Input.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      var _inputClasses = require_inputClasses();
      var _useInput = _interopRequireDefault(require_useInput2());
      var _utils = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          disabled,
          error,
          focused,
          formControlContext,
          multiline,
          startAdornment,
          endAdornment
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", error && "error", focused && "focused", Boolean(formControlContext) && "formControl", multiline && "multiline", Boolean(startAdornment) && "adornedStart", Boolean(endAdornment) && "adornedEnd"],
          input: ["input", disabled && "disabled", multiline && "multiline"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_inputClasses.getInputUtilityClass));
      };
      var Input = /* @__PURE__ */ React16.forwardRef(function Input2(props, forwardedRef) {
        var _slots$root, _slots$textarea, _slots$input;
        const {
          "aria-describedby": ariaDescribedby,
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledby,
          autoComplete,
          autoFocus,
          className,
          defaultValue,
          disabled,
          endAdornment,
          error,
          id,
          multiline = false,
          name,
          onClick,
          onChange,
          onKeyDown,
          onKeyUp,
          onFocus,
          onBlur,
          placeholder,
          readOnly,
          required,
          startAdornment,
          value,
          type: typeProp,
          rows,
          slotProps = {},
          slots = {},
          minRows,
          maxRows,
          ...other
        } = props;
        const {
          getRootProps,
          getInputProps,
          focused,
          formControlContext,
          error: errorState,
          disabled: disabledState
        } = (0, _useInput.default)({
          disabled,
          defaultValue,
          error,
          onBlur,
          onClick,
          onChange,
          onFocus,
          required,
          value
        });
        const type = !multiline ? typeProp != null ? typeProp : "text" : void 0;
        const ownerState = {
          ...props,
          disabled: disabledState,
          error: errorState,
          focused,
          formControlContext,
          multiline,
          type
        };
        const classes = useUtilityClasses4(ownerState);
        const propsToForward = {
          "aria-describedby": ariaDescribedby,
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledby,
          autoComplete,
          autoFocus,
          id,
          onKeyDown,
          onKeyUp,
          name,
          placeholder,
          readOnly,
          type
        };
        const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root,
          getSlotProps: getRootProps,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: [classes.root, className]
        });
        const InputComponent = multiline ? (_slots$textarea = slots.textarea) != null ? _slots$textarea : "textarea" : (_slots$input = slots.input) != null ? _slots$input : "input";
        const inputProps = (0, _utils.useSlotProps)({
          elementType: InputComponent,
          getSlotProps: (otherHandlers) => getInputProps({
            ...otherHandlers,
            ...propsToForward
          }),
          externalSlotProps: slotProps.input,
          additionalProps: {
            rows: multiline ? rows : void 0,
            ...multiline && !(0, _isHostComponent.default)(InputComponent) && {
              minRows: rows || minRows,
              maxRows: rows || maxRows
            }
          },
          ownerState,
          className: classes.input
        });
        if (true) {
          if (multiline) {
            if (rows) {
              if (minRows || maxRows) {
                console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
              }
            }
          }
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, {
          ...rootProps,
          children: [startAdornment, /* @__PURE__ */ (0, _jsxRuntime.jsx)(InputComponent, {
            ...inputProps
          }), endAdornment]
        });
      });
      true ? Input.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        "aria-describedby": _propTypes.default.string,
        /**
         * @ignore
         */
        "aria-label": _propTypes.default.string,
        /**
         * @ignore
         */
        "aria-labelledby": _propTypes.default.string,
        /**
         * This prop helps users to fill forms faster, especially on mobile devices.
         * The name can be confusing, as it's more like an autofill.
         * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
         */
        autoComplete: _propTypes.default.string,
        /**
         * If `true`, the `input` element is focused during the first mount.
         */
        autoFocus: _propTypes.default.bool,
        /**
         * Class name applied to the root element.
         */
        className: _propTypes.default.string,
        /**
         * The default value. Use when the component is not controlled.
         */
        defaultValue: _propTypes.default.any,
        /**
         * If `true`, the component is disabled.
         * The prop defaults to the value (`false`) inherited from the parent FormControl component.
         */
        disabled: _propTypes.default.bool,
        /**
         * Trailing adornment for this input.
         */
        endAdornment: _propTypes.default.node,
        /**
         * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.
         * The prop defaults to the value (`false`) inherited from the parent FormControl component.
         */
        error: _propTypes.default.bool,
        /**
         * The id of the `input` element.
         */
        id: _propTypes.default.string,
        /**
         * @ignore
         */
        inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
          current: _propTypes.default.object
        })]),
        /**
         * Maximum number of rows to display when multiline option is set to true.
         */
        maxRows: _propTypes.default.number,
        /**
         * Minimum number of rows to display when multiline option is set to true.
         */
        minRows: _propTypes.default.number,
        /**
         * If `true`, a `textarea` element is rendered.
         * @default false
         */
        multiline: _propTypes.default.bool,
        /**
         * Name attribute of the `input` element.
         */
        name: _propTypes.default.string,
        /**
         * @ignore
         */
        onBlur: _propTypes.default.func,
        /**
         * @ignore
         */
        onChange: _propTypes.default.func,
        /**
         * @ignore
         */
        onClick: _propTypes.default.func,
        /**
         * @ignore
         */
        onFocus: _propTypes.default.func,
        /**
         * @ignore
         */
        onKeyDown: _propTypes.default.func,
        /**
         * @ignore
         */
        onKeyUp: _propTypes.default.func,
        /**
         * The short hint displayed in the `input` before the user enters a value.
         */
        placeholder: _propTypes.default.string,
        /**
         * It prevents the user from changing the value of the field
         * (not from interacting with the field).
         */
        readOnly: _propTypes.default.bool,
        /**
         * If `true`, the `input` element is required.
         * The prop defaults to the value (`false`) inherited from the parent FormControl component.
         */
        required: _propTypes.default.bool,
        /**
         * Number of rows to display when multiline option is set to true.
         */
        rows: _propTypes.default.number,
        /**
         * The props used for each slot inside the Input.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the InputBase.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          input: _propTypes.default.elementType,
          root: _propTypes.default.elementType,
          textarea: _propTypes.default.elementType
        }),
        /**
         * Leading adornment for this input.
         */
        startAdornment: _propTypes.default.node,
        /**
         * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
         * @default 'text'
         */
        type: _propTypes.default.oneOf(["button", "checkbox", "color", "date", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]),
        /**
         * The value of the `input` element, required for a controlled component.
         */
        value: _propTypes.default.any
      } : void 0;
      var _default = Input;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Input/Input.types.js
  var require_Input_types = __commonJS({
    "node_modules/@mui/base/node/Input/Input.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Input/index.js
  var require_Input2 = __commonJS({
    "node_modules/@mui/base/node/Input/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        inputClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Input.default;
        }
      });
      Object.defineProperty(exports, "inputClasses", {
        enumerable: true,
        get: function() {
          return _inputClasses.default;
        }
      });
      var _Input = _interopRequireDefault(require_Input());
      var _Input2 = require_Input_types();
      Object.keys(_Input2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Input2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Input2[key];
          }
        });
      });
      var _inputClasses = _interopRequireWildcard(require_inputClasses());
      Object.keys(_inputClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _inputClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _inputClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Menu/menuClasses.js
  var require_menuClasses = __commonJS({
    "node_modules/@mui/base/node/Menu/menuClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getMenuUtilityClass = getMenuUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getMenuUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiMenu", slot);
      }
      var menuClasses = (0, _generateUtilityClasses.default)("MuiMenu", ["root", "listbox", "expanded"]);
      var _default = menuClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useList/listActions.types.js
  var require_listActions_types = __commonJS({
    "node_modules/@mui/base/node/useList/listActions.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ListActionTypes = void 0;
      var ListActionTypes = {
        blur: "list:blur",
        focus: "list:focus",
        keyDown: "list:keyDown",
        itemClick: "list:itemClick",
        itemHover: "list:itemHover",
        itemsChange: "list:itemsChange",
        textNavigation: "list:textNavigation"
      };
      exports.ListActionTypes = ListActionTypes;
    }
  });

  // node_modules/@mui/base/node/useList/listReducer.js
  var require_listReducer = __commonJS({
    "node_modules/@mui/base/node/useList/listReducer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = listReducer;
      exports.moveHighlight = moveHighlight;
      exports.toggleSelection = toggleSelection;
      var _listActions = require_listActions_types();
      function findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {
        if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {
          return -1;
        }
        let nextFocus = currentIndex;
        for (; ; ) {
          if (!wrapAround && lookupDirection === "next" && nextFocus === items.length || !wrapAround && lookupDirection === "previous" && nextFocus === -1) {
            return -1;
          }
          const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);
          if (nextFocusDisabled) {
            nextFocus += lookupDirection === "next" ? 1 : -1;
            if (wrapAround) {
              nextFocus = (nextFocus + items.length) % items.length;
            }
          } else {
            return nextFocus;
          }
        }
      }
      function moveHighlight(previouslyHighlightedValue, offset, context) {
        var _items$nextIndex;
        const {
          items,
          isItemDisabled,
          disableListWrap,
          disabledItemsFocusable,
          itemComparer,
          focusManagement
        } = context;
        const defaultHighlightedIndex = focusManagement === "DOM" ? 0 : -1;
        const maxIndex = items.length - 1;
        const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex((item) => itemComparer(item, previouslyHighlightedValue));
        let nextIndexCandidate;
        let lookupDirection;
        let wrapAround = !disableListWrap;
        switch (offset) {
          case "reset":
            if (defaultHighlightedIndex === -1) {
              return null;
            }
            nextIndexCandidate = 0;
            lookupDirection = "next";
            wrapAround = false;
            break;
          case "start":
            nextIndexCandidate = 0;
            lookupDirection = "next";
            wrapAround = false;
            break;
          case "end":
            nextIndexCandidate = maxIndex;
            lookupDirection = "previous";
            wrapAround = false;
            break;
          default: {
            const newIndex = previouslyHighlightedIndex + offset;
            if (newIndex < 0) {
              if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {
                nextIndexCandidate = 0;
                lookupDirection = "next";
              } else {
                nextIndexCandidate = maxIndex;
                lookupDirection = "previous";
              }
            } else if (newIndex > maxIndex) {
              if (!wrapAround || Math.abs(offset) > 1) {
                nextIndexCandidate = maxIndex;
                lookupDirection = "previous";
              } else {
                nextIndexCandidate = 0;
                lookupDirection = "next";
              }
            } else {
              nextIndexCandidate = newIndex;
              lookupDirection = offset >= 0 ? "next" : "previous";
            }
          }
        }
        const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);
        if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {
          return previouslyHighlightedValue;
        }
        return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;
      }
      function toggleSelection(item, selectedValues, selectionMode, itemComparer) {
        if (selectionMode === "none") {
          return [];
        }
        if (selectionMode === "single") {
          if (itemComparer(selectedValues[0], item)) {
            return selectedValues;
          }
          return [item];
        }
        if (selectedValues.some((sv) => itemComparer(sv, item))) {
          return selectedValues.filter((sv) => !itemComparer(sv, item));
        }
        return [...selectedValues, item];
      }
      function handleItemSelection(item, state, context) {
        const {
          itemComparer,
          isItemDisabled,
          selectionMode,
          items
        } = context;
        const {
          selectedValues
        } = state;
        const itemIndex = items.findIndex((i) => itemComparer(item, i));
        if (isItemDisabled(item, itemIndex)) {
          return state;
        }
        const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);
        return {
          ...state,
          selectedValues: newSelectedValues,
          highlightedValue: item
        };
      }
      function handleKeyDown(key, state, context) {
        const previouslySelectedValue = state.highlightedValue;
        const {
          orientation,
          pageSize
        } = context;
        switch (key) {
          case "Home":
            return {
              ...state,
              highlightedValue: moveHighlight(previouslySelectedValue, "start", context)
            };
          case "End":
            return {
              ...state,
              highlightedValue: moveHighlight(previouslySelectedValue, "end", context)
            };
          case "PageUp":
            return {
              ...state,
              highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)
            };
          case "PageDown":
            return {
              ...state,
              highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)
            };
          case "ArrowUp":
            if (orientation !== "vertical") {
              break;
            }
            return {
              ...state,
              highlightedValue: moveHighlight(previouslySelectedValue, -1, context)
            };
          case "ArrowDown":
            if (orientation !== "vertical") {
              break;
            }
            return {
              ...state,
              highlightedValue: moveHighlight(previouslySelectedValue, 1, context)
            };
          case "ArrowLeft": {
            if (orientation === "vertical") {
              break;
            }
            const offset = orientation === "horizontal-ltr" ? -1 : 1;
            return {
              ...state,
              highlightedValue: moveHighlight(previouslySelectedValue, offset, context)
            };
          }
          case "ArrowRight": {
            if (orientation === "vertical") {
              break;
            }
            const offset = orientation === "horizontal-ltr" ? 1 : -1;
            return {
              ...state,
              highlightedValue: moveHighlight(previouslySelectedValue, offset, context)
            };
          }
          case "Enter":
          case " ":
            if (state.highlightedValue === null) {
              return state;
            }
            return handleItemSelection(state.highlightedValue, state, context);
          default:
            break;
        }
        return state;
      }
      function handleBlur(state, context) {
        if (context.focusManagement === "DOM") {
          return state;
        }
        return {
          ...state,
          highlightedValue: null
        };
      }
      function textCriteriaMatches(nextFocus, searchString, stringifyItem) {
        var _stringifyItem;
        const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();
        if (!text || text.length === 0) {
          return false;
        }
        return text.indexOf(searchString) === 0;
      }
      function handleTextNavigation(state, searchString, context) {
        const {
          items,
          isItemDisabled,
          disabledItemsFocusable,
          getItemAsString
        } = context;
        const startWithCurrentItem = searchString.length > 1;
        let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);
        for (let index = 0; index < items.length; index += 1) {
          if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {
            return state;
          }
          if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {
            return {
              ...state,
              highlightedValue: nextItem
            };
          }
          nextItem = moveHighlight(nextItem, 1, context);
        }
        return state;
      }
      function handleItemsChange(items, previousItems, state, context) {
        var _state$selectedValues;
        const {
          itemComparer,
          focusManagement
        } = context;
        let newHighlightedValue = null;
        if (state.highlightedValue != null) {
          var _items$find;
          newHighlightedValue = (_items$find = items.find((item) => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;
        } else if (focusManagement === "DOM" && previousItems.length === 0) {
          newHighlightedValue = moveHighlight(null, "reset", context);
        }
        const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];
        const newSelectedValues = selectedValues.filter((selectedValue) => items.some((item) => itemComparer(item, selectedValue)));
        return {
          ...state,
          highlightedValue: newHighlightedValue,
          selectedValues: newSelectedValues
        };
      }
      function listReducer(state, action) {
        const {
          type,
          context
        } = action;
        switch (type) {
          case _listActions.ListActionTypes.keyDown:
            return handleKeyDown(action.key, state, context);
          case _listActions.ListActionTypes.itemClick:
            return handleItemSelection(action.item, state, context);
          case _listActions.ListActionTypes.blur:
            return handleBlur(state, context);
          case _listActions.ListActionTypes.textNavigation:
            return handleTextNavigation(state, action.searchString, context);
          case _listActions.ListActionTypes.itemsChange:
            return handleItemsChange(action.items, action.previousItems, state, context);
          default:
            return state;
        }
      }
    }
  });

  // node_modules/@mui/base/node/utils/useMessageBus.js
  var require_useMessageBus = __commonJS({
    "node_modules/@mui/base/node/utils/useMessageBus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createMessageBus = createMessageBus;
      exports.default = useMessageBus;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function createMessageBus() {
        const listeners = /* @__PURE__ */ new Map();
        function subscribe(topic, callback) {
          let topicListeners = listeners.get(topic);
          if (!topicListeners) {
            topicListeners = /* @__PURE__ */ new Set([callback]);
            listeners.set(topic, topicListeners);
          } else {
            topicListeners.add(callback);
          }
          return () => {
            topicListeners.delete(callback);
            if (topicListeners.size === 0) {
              listeners.delete(topic);
            }
          };
        }
        function publish(topic, ...args) {
          const topicListeners = listeners.get(topic);
          if (topicListeners) {
            topicListeners.forEach((callback) => callback(...args));
          }
        }
        return {
          subscribe,
          publish
        };
      }
      function useMessageBus() {
        const bus = React16.useRef();
        if (!bus.current) {
          bus.current = createMessageBus();
        }
        return bus.current;
      }
    }
  });

  // node_modules/@mui/base/node/useList/useListChangeNotifiers.js
  var require_useListChangeNotifiers = __commonJS({
    "node_modules/@mui/base/node/useList/useListChangeNotifiers.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useSelectChangeNotifiers;
      var React16 = _interopRequireWildcard(require_react());
      var _useMessageBus = _interopRequireDefault(require_useMessageBus());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var SELECTION_CHANGE_TOPIC = "select:change-selection";
      var HIGHLIGHT_CHANGE_TOPIC = "select:change-highlight";
      function useSelectChangeNotifiers() {
        const messageBus = (0, _useMessageBus.default)();
        const notifySelectionChanged = React16.useCallback((newSelectedItems) => {
          messageBus.publish(SELECTION_CHANGE_TOPIC, newSelectedItems);
        }, [messageBus]);
        const notifyHighlightChanged = React16.useCallback((newHighlightedItem) => {
          messageBus.publish(HIGHLIGHT_CHANGE_TOPIC, newHighlightedItem);
        }, [messageBus]);
        const registerSelectionChangeHandler = React16.useCallback((handler) => {
          return messageBus.subscribe(SELECTION_CHANGE_TOPIC, handler);
        }, [messageBus]);
        const registerHighlightChangeHandler = React16.useCallback((handler) => {
          return messageBus.subscribe(HIGHLIGHT_CHANGE_TOPIC, handler);
        }, [messageBus]);
        return {
          notifySelectionChanged,
          notifyHighlightChanged,
          registerSelectionChangeHandler,
          registerHighlightChangeHandler
        };
      }
    }
  });

  // node_modules/@mui/base/node/utils/useControllableReducer.js
  var require_useControllableReducer = __commonJS({
    "node_modules/@mui/base/node/utils/useControllableReducer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useControllableReducer;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function areEqual(a, b) {
        return a === b;
      }
      var EMPTY_OBJECT = {};
      var NOOP = () => {
      };
      function getControlledState(internalState, controlledProps) {
        const augmentedState = {
          ...internalState
        };
        Object.keys(controlledProps).forEach((key) => {
          if (controlledProps[key] !== void 0) {
            augmentedState[key] = controlledProps[key];
          }
        });
        return augmentedState;
      }
      function useStateChangeDetection(parameters) {
        const {
          nextState,
          initialState,
          stateComparers,
          onStateChange,
          controlledProps,
          lastActionRef
        } = parameters;
        const internalPreviousStateRef = React16.useRef(initialState);
        React16.useEffect(() => {
          if (lastActionRef.current === null) {
            return;
          }
          const previousState = getControlledState(internalPreviousStateRef.current, controlledProps);
          Object.keys(nextState).forEach((key) => {
            var _stateComparers$key;
            const stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;
            const nextStateItem = nextState[key];
            const previousStateItem = previousState[key];
            if (!stateComparer(nextStateItem, previousStateItem)) {
              var _event, _type;
              onStateChange == null ? void 0 : onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : "", nextState);
            }
          });
          internalPreviousStateRef.current = nextState;
          lastActionRef.current = null;
        }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);
      }
      function useControllableReducer(parameters) {
        const lastActionRef = React16.useRef(null);
        const {
          reducer,
          initialState,
          controlledProps = EMPTY_OBJECT,
          stateComparers = EMPTY_OBJECT,
          onStateChange = NOOP,
          actionContext
        } = parameters;
        const reducerWithControlledState = React16.useCallback((state, action) => {
          lastActionRef.current = action;
          const controlledState = getControlledState(state, controlledProps);
          return reducer(controlledState, action);
        }, [controlledProps, reducer]);
        const [nextState, dispatch] = React16.useReducer(reducerWithControlledState, initialState);
        const dispatchWithContext = React16.useCallback((action) => {
          dispatch({
            ...action,
            context: actionContext
          });
        }, [actionContext]);
        useStateChangeDetection({
          nextState,
          initialState,
          stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT,
          onStateChange: onStateChange != null ? onStateChange : NOOP,
          controlledProps,
          lastActionRef
        });
        return [getControlledState(nextState, controlledProps), dispatchWithContext];
      }
    }
  });

  // node_modules/@mui/base/node/utils/useLatest.js
  var require_useLatest = __commonJS({
    "node_modules/@mui/base/node/utils/useLatest.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useLatest;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useLatest(value, deps) {
        const ref = React16.useRef(value);
        React16.useEffect(() => {
          ref.current = value;
        }, deps != null ? deps : [value]);
        return ref;
      }
    }
  });

  // node_modules/@mui/base/node/utils/useTextNavigation.js
  var require_useTextNavigation = __commonJS({
    "node_modules/@mui/base/node/utils/useTextNavigation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useTextNavigation;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var TEXT_NAVIGATION_RESET_TIMEOUT = 500;
      function useTextNavigation(callback) {
        const textCriteriaRef = React16.useRef({
          searchString: "",
          lastTime: null
        });
        return React16.useCallback((event) => {
          if (event.key.length === 1 && event.key !== " ") {
            const textCriteria = textCriteriaRef.current;
            const lowerKey = event.key.toLowerCase();
            const currentTime = performance.now();
            if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
              textCriteria.searchString = lowerKey;
            } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
              textCriteria.searchString += lowerKey;
            }
            textCriteria.lastTime = currentTime;
            callback(textCriteria.searchString, event);
          }
        }, [callback]);
      }
    }
  });

  // node_modules/@mui/base/node/useList/useList.js
  var require_useList = __commonJS({
    "node_modules/@mui/base/node/useList/useList.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _listActions = require_listActions_types();
      var _listReducer = _interopRequireDefault(require_listReducer());
      var _useListChangeNotifiers = _interopRequireDefault(require_useListChangeNotifiers());
      var _useControllableReducer = _interopRequireDefault(require_useControllableReducer());
      var _areArraysEqual = _interopRequireDefault(require_areArraysEqual());
      var _useLatest = _interopRequireDefault(require_useLatest());
      var _useTextNavigation = _interopRequireDefault(require_useTextNavigation());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var EMPTY_OBJECT = {};
      var NOOP = () => {
      };
      var defaultItemComparer = (optionA, optionB) => optionA === optionB;
      var defaultIsItemDisabled = () => false;
      var defaultItemStringifier = (item) => typeof item === "string" ? item : String(item);
      var defaultGetInitialState = () => ({
        highlightedValue: null,
        selectedValues: []
      });
      function useList(params) {
        const {
          controlledProps = EMPTY_OBJECT,
          disabledItemsFocusable = false,
          disableListWrap = false,
          focusManagement = "activeDescendant",
          getInitialState = defaultGetInitialState,
          getItemDomElement,
          getItemId,
          isItemDisabled = defaultIsItemDisabled,
          rootRef: externalListRef,
          onStateChange = NOOP,
          items,
          itemComparer = defaultItemComparer,
          getItemAsString = defaultItemStringifier,
          onChange,
          onHighlightChange,
          orientation = "vertical",
          pageSize = 5,
          reducerActionContext = EMPTY_OBJECT,
          selectionMode = "single",
          stateReducer: externalReducer
        } = params;
        if (true) {
          if (focusManagement === "DOM" && getItemDomElement == null) {
            throw new Error("useList: The `getItemDomElement` prop is required when using the `DOM` focus management.");
          }
          if (focusManagement === "activeDescendant" && getItemId == null) {
            throw new Error("useList: The `getItemId` prop is required when using the `activeDescendant` focus management.");
          }
        }
        const listRef = React16.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(externalListRef, listRef);
        const handleHighlightChange = React16.useCallback((event, value, reason) => {
          onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);
          if (focusManagement === "DOM" && value != null && (reason === _listActions.ListActionTypes.itemClick || reason === _listActions.ListActionTypes.keyDown || reason === _listActions.ListActionTypes.textNavigation)) {
            var _getItemDomElement;
            getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();
          }
        }, [getItemDomElement, onHighlightChange, focusManagement]);
        const stateComparers = React16.useMemo(() => ({
          highlightedValue: itemComparer,
          selectedValues: (valuesArray1, valuesArray2) => (0, _areArraysEqual.default)(valuesArray1, valuesArray2, itemComparer)
        }), [itemComparer]);
        const handleStateChange = React16.useCallback((event, field, value, reason, state2) => {
          onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state2);
          switch (field) {
            case "highlightedValue":
              handleHighlightChange(event, value, reason);
              break;
            case "selectedValues":
              onChange == null ? void 0 : onChange(event, value, reason);
              break;
            default:
              break;
          }
        }, [handleHighlightChange, onChange, onStateChange]);
        const listActionContext = React16.useMemo(() => {
          return {
            disabledItemsFocusable,
            disableListWrap,
            focusManagement,
            isItemDisabled,
            itemComparer,
            items,
            getItemAsString,
            onHighlightChange: handleHighlightChange,
            orientation,
            pageSize,
            selectionMode,
            stateComparers
          };
        }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);
        const initialState = getInitialState();
        const reducer = externalReducer != null ? externalReducer : _listReducer.default;
        const actionContext = React16.useMemo(() => ({
          ...reducerActionContext,
          ...listActionContext
        }), [reducerActionContext, listActionContext]);
        const [state, dispatch] = (0, _useControllableReducer.default)({
          reducer,
          actionContext,
          initialState,
          controlledProps,
          stateComparers,
          onStateChange: handleStateChange
        });
        const {
          highlightedValue,
          selectedValues
        } = state;
        const handleTextNavigation = (0, _useTextNavigation.default)((searchString, event) => dispatch({
          type: _listActions.ListActionTypes.textNavigation,
          event,
          searchString
        }));
        const latestSelectedValues = (0, _useLatest.default)(selectedValues);
        const latestHighlightedValue = (0, _useLatest.default)(highlightedValue);
        const previousItems = React16.useRef([]);
        React16.useEffect(() => {
          if ((0, _areArraysEqual.default)(previousItems.current, items, itemComparer)) {
            return;
          }
          dispatch({
            type: _listActions.ListActionTypes.itemsChange,
            event: null,
            items,
            previousItems: previousItems.current
          });
          previousItems.current = items;
        }, [items, itemComparer, dispatch]);
        const {
          notifySelectionChanged,
          notifyHighlightChanged,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler
        } = (0, _useListChangeNotifiers.default)();
        React16.useEffect(() => {
          notifySelectionChanged(selectedValues);
        }, [selectedValues, notifySelectionChanged]);
        React16.useEffect(() => {
          notifyHighlightChanged(highlightedValue);
        }, [highlightedValue, notifyHighlightChanged]);
        const createHandleKeyDown = (other) => (event) => {
          var _other$onKeyDown;
          (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);
          if (event.defaultMuiPrevented) {
            return;
          }
          const keysToPreventDefault = ["Home", "End", "PageUp", "PageDown"];
          if (orientation === "vertical") {
            keysToPreventDefault.push("ArrowUp", "ArrowDown");
          } else {
            keysToPreventDefault.push("ArrowLeft", "ArrowRight");
          }
          if (focusManagement === "activeDescendant") {
            keysToPreventDefault.push(" ", "Enter");
          }
          if (keysToPreventDefault.includes(event.key)) {
            event.preventDefault();
          }
          dispatch({
            type: _listActions.ListActionTypes.keyDown,
            key: event.key,
            event
          });
          handleTextNavigation(event);
        };
        const createHandleBlur = (other) => (event) => {
          var _other$onBlur, _listRef$current;
          (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);
          if (event.defaultMuiPrevented) {
            return;
          }
          if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {
            return;
          }
          dispatch({
            type: _listActions.ListActionTypes.blur,
            event
          });
        };
        const getRootProps = (otherHandlers = {}) => {
          return {
            ...otherHandlers,
            "aria-activedescendant": focusManagement === "activeDescendant" && highlightedValue != null ? getItemId(highlightedValue) : void 0,
            onBlur: createHandleBlur(otherHandlers),
            onKeyDown: createHandleKeyDown(otherHandlers),
            tabIndex: focusManagement === "DOM" ? -1 : 0,
            ref: handleRef
          };
        };
        const getItemState = React16.useCallback((item) => {
          var _latestSelectedValues;
          const index = items.findIndex((i) => itemComparer(i, item));
          const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some((value) => value != null && itemComparer(item, value));
          const disabled = isItemDisabled(item, index);
          const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);
          const focusable = focusManagement === "DOM";
          return {
            disabled,
            focusable,
            highlighted,
            index,
            selected
          };
        }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);
        const contextValue = React16.useMemo(() => ({
          dispatch,
          getItemState,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler
        }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
        React16.useDebugValue({
          state
        });
        return {
          contextValue,
          dispatch,
          getRootProps,
          rootRef: handleRef,
          state
        };
      }
      var _default = useList;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useList/useList.types.js
  var require_useList_types = __commonJS({
    "node_modules/@mui/base/node/useList/useList.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/utils/useForcedRerendering.js
  var require_useForcedRerendering = __commonJS({
    "node_modules/@mui/base/node/utils/useForcedRerendering.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useForcedRerendering;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useForcedRerendering() {
        const [, setState] = React16.useState({});
        return React16.useCallback(() => {
          setState({});
        }, []);
      }
    }
  });

  // node_modules/@mui/base/node/useList/ListContext.js
  var require_ListContext = __commonJS({
    "node_modules/@mui/base/node/useList/ListContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ListContext = void 0;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var ListContext = /* @__PURE__ */ React16.createContext(null);
      exports.ListContext = ListContext;
      if (true) {
        ListContext.displayName = "ListContext";
      }
    }
  });

  // node_modules/@mui/base/node/useList/useListItem.js
  var require_useListItem = __commonJS({
    "node_modules/@mui/base/node/useList/useListItem.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useListItem;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _useForcedRerendering = _interopRequireDefault(require_useForcedRerendering());
      var _listActions = require_listActions_types();
      var _ListContext = require_ListContext();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useListItem(parameters) {
        const {
          handlePointerOverEvents = false,
          item,
          rootRef: externalRef
        } = parameters;
        const itemRef = React16.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(itemRef, externalRef);
        const listContext = React16.useContext(_ListContext.ListContext);
        if (!listContext) {
          throw new Error("useListItem must be used within a ListProvider");
        }
        const {
          dispatch,
          getItemState,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler
        } = listContext;
        const {
          highlighted,
          selected,
          focusable
        } = getItemState(item);
        const rerender = (0, _useForcedRerendering.default)();
        (0, _utils.unstable_useEnhancedEffect)(() => {
          function updateHighlightedState(highlightedItem) {
            if (highlightedItem === item && !highlighted) {
              rerender();
            } else if (highlightedItem !== item && highlighted) {
              rerender();
            }
          }
          return registerHighlightChangeHandler(updateHighlightedState);
        });
        (0, _utils.unstable_useEnhancedEffect)(() => {
          function updateSelectedState(selectedItems) {
            if (!selected) {
              if (selectedItems.includes(item)) {
                rerender();
              }
            } else if (!selectedItems.includes(item)) {
              rerender();
            }
          }
          return registerSelectionChangeHandler(updateSelectedState);
        }, [registerSelectionChangeHandler, rerender, selected, item]);
        const createHandleClick = React16.useCallback((other) => (event) => {
          var _other$onClick;
          (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);
          if (event.defaultPrevented) {
            return;
          }
          event.preventDefault();
          dispatch({
            type: _listActions.ListActionTypes.itemClick,
            item,
            event
          });
        }, [dispatch, item]);
        const createHandlePointerOver = React16.useCallback((other) => (event) => {
          var _other$onMouseOver;
          (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);
          if (event.defaultPrevented) {
            return;
          }
          dispatch({
            type: _listActions.ListActionTypes.itemHover,
            item,
            event
          });
        }, [dispatch, item]);
        let tabIndex;
        if (focusable) {
          tabIndex = highlighted ? 0 : -1;
        }
        const getRootProps = (otherHandlers = {}) => ({
          ...otherHandlers,
          onClick: createHandleClick(otherHandlers),
          onPointerOver: handlePointerOverEvents ? createHandlePointerOver(otherHandlers) : void 0,
          ref: handleRef,
          tabIndex
        });
        return {
          getRootProps,
          highlighted,
          rootRef: handleRef,
          selected
        };
      }
    }
  });

  // node_modules/@mui/base/node/useList/useListItem.types.js
  var require_useListItem_types = __commonJS({
    "node_modules/@mui/base/node/useList/useListItem.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useList/index.js
  var require_useList2 = __commonJS({
    "node_modules/@mui/base/node/useList/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        useListItem: true,
        listReducer: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useList.default;
        }
      });
      Object.defineProperty(exports, "listReducer", {
        enumerable: true,
        get: function() {
          return _listReducer.default;
        }
      });
      Object.defineProperty(exports, "useListItem", {
        enumerable: true,
        get: function() {
          return _useListItem.default;
        }
      });
      var _useList = _interopRequireDefault(require_useList());
      var _useList2 = require_useList_types();
      Object.keys(_useList2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useList2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useList2[key];
          }
        });
      });
      var _useListItem = _interopRequireDefault(require_useListItem());
      var _useListItem2 = require_useListItem_types();
      Object.keys(_useListItem2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useListItem2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useListItem2[key];
          }
        });
      });
      var _listReducer = _interopRequireWildcard(require_listReducer());
      Object.keys(_listReducer).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _listReducer[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _listReducer[key];
          }
        });
      });
      var _listActions = require_listActions_types();
      Object.keys(_listActions).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _listActions[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _listActions[key];
          }
        });
      });
      var _ListContext = require_ListContext();
      Object.keys(_ListContext).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ListContext[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ListContext[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/utils/useCompound.js
  var require_useCompound = __commonJS({
    "node_modules/@mui/base/node/utils/useCompound.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CompoundComponentContext = void 0;
      exports.useCompoundParent = useCompoundParent;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var CompoundComponentContext = /* @__PURE__ */ React16.createContext(null);
      exports.CompoundComponentContext = CompoundComponentContext;
      CompoundComponentContext.displayName = "CompoundComponentContext";
      function useCompoundParent() {
        const [subitems, setSubitems] = React16.useState(/* @__PURE__ */ new Map());
        const subitemKeys = React16.useRef(/* @__PURE__ */ new Set());
        const deregisterItem = React16.useCallback(function deregisterItem2(id) {
          subitemKeys.current.delete(id);
          setSubitems((previousState) => {
            const newState = new Map(previousState);
            newState.delete(id);
            return newState;
          });
        }, []);
        const registerItem = React16.useCallback(function registerItem2(id, item, missingKeyGenerator) {
          let providedOrGeneratedId;
          if (id === void 0) {
            if (missingKeyGenerator === void 0) {
              throw new Error("The compound component's child doesn't have a key. You need to provide a missingKeyGenerator to generate it.");
            }
            providedOrGeneratedId = missingKeyGenerator(subitemKeys.current);
          } else {
            providedOrGeneratedId = id;
          }
          subitemKeys.current.add(providedOrGeneratedId);
          setSubitems((previousState) => {
            const newState = new Map(previousState);
            newState.set(providedOrGeneratedId, item);
            return newState;
          });
          return {
            id: providedOrGeneratedId,
            deregister: () => deregisterItem(providedOrGeneratedId)
          };
        }, [deregisterItem]);
        const getItemIndex = React16.useCallback(function getItemIndex2(id) {
          return Array.from(subitems.keys()).indexOf(id);
        }, [subitems]);
        return {
          contextValue: {
            getItemIndex,
            registerItem,
            totalSubitemCount: subitems.size
          },
          subitems
        };
      }
    }
  });

  // node_modules/@mui/base/node/useMenu/menuReducer.js
  var require_menuReducer = __commonJS({
    "node_modules/@mui/base/node/useMenu/menuReducer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = menuReducer;
      var _useList = require_useList2();
      function menuReducer(state, action) {
        if (action.type === _useList.ListActionTypes.itemHover) {
          return state;
        }
        const newState = (0, _useList.listReducer)(state, action);
        if (newState.highlightedValue === null && action.context.items.length > 0) {
          return {
            ...newState,
            highlightedValue: action.context.items[0]
          };
        }
        if (action.type === _useList.ListActionTypes.keyDown) {
          if (action.event.key === "Escape") {
            return {
              ...newState,
              open: false
            };
          }
        }
        if (action.type === _useList.ListActionTypes.blur) {
          var _action$context$listb;
          if (!((_action$context$listb = action.context.listboxRef.current) != null && _action$context$listb.contains(action.event.relatedTarget))) {
            return {
              ...newState,
              open: false,
              highlightedValue: action.context.items[0]
            };
          }
        }
        return newState;
      }
    }
  });

  // node_modules/@mui/base/node/useMenu/useMenu.js
  var require_useMenu = __commonJS({
    "node_modules/@mui/base/node/useMenu/useMenu.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useMenu;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _useList = _interopRequireDefault(require_useList2());
      var _useCompound = require_useCompound();
      var _menuReducer = _interopRequireDefault(require_menuReducer());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useMenu(parameters = {}) {
        const {
          defaultOpen,
          listboxRef: listboxRefProp,
          open: openProp,
          onOpenChange
        } = parameters;
        const listboxRef = React16.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(listboxRef, listboxRefProp);
        const {
          subitems,
          contextValue: compoundComponentContextValue
        } = (0, _useCompound.useCompoundParent)();
        const subitemKeys = React16.useMemo(() => Array.from(subitems.keys()), [subitems]);
        const getItemDomElement = React16.useCallback((itemId) => {
          var _subitems$get$ref$cur, _subitems$get;
          if (itemId == null) {
            return null;
          }
          return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;
        }, [subitems]);
        const controlledProps = React16.useMemo(() => ({
          open: openProp
        }), [openProp]);
        const stateChangeHandler = React16.useCallback((event, field, fieldValue, reason, state) => {
          if (field === "open") {
            onOpenChange == null ? void 0 : onOpenChange(fieldValue);
            if (fieldValue === true && state.highlightedValue !== null) {
              var _subitems$get2, _subitems$get2$ref$cu;
              (_subitems$get2 = subitems.get(state.highlightedValue)) == null ? void 0 : (_subitems$get2$ref$cu = _subitems$get2.ref.current) == null ? void 0 : _subitems$get2$ref$cu.focus();
            }
          }
        }, [onOpenChange, subitems]);
        const {
          dispatch,
          getRootProps,
          contextValue: listContextValue,
          state: {
            open,
            highlightedValue
          },
          rootRef: mergedListRef
        } = (0, _useList.default)({
          controlledProps,
          disabledItemsFocusable: true,
          focusManagement: "DOM",
          getItemDomElement,
          getInitialState: () => ({
            selectedValues: [],
            highlightedValue: null,
            open: defaultOpen != null ? defaultOpen : false
          }),
          isItemDisabled: (id) => {
            var _subitems$get3;
            return (subitems == null ? void 0 : (_subitems$get3 = subitems.get(id)) == null ? void 0 : _subitems$get3.disabled) || false;
          },
          items: subitemKeys,
          getItemAsString: (id) => {
            var _subitems$get4, _subitems$get5, _subitems$get5$ref$cu;
            return ((_subitems$get4 = subitems.get(id)) == null ? void 0 : _subitems$get4.label) || ((_subitems$get5 = subitems.get(id)) == null ? void 0 : (_subitems$get5$ref$cu = _subitems$get5.ref.current) == null ? void 0 : _subitems$get5$ref$cu.innerText);
          },
          rootRef: handleRef,
          onStateChange: stateChangeHandler,
          reducerActionContext: {
            listboxRef
          },
          selectionMode: "none",
          stateReducer: _menuReducer.default
        });
        React16.useEffect(() => {
          if (open && highlightedValue === subitemKeys[0]) {
            var _subitems$get6, _subitems$get6$ref, _subitems$get6$ref$cu;
            (_subitems$get6 = subitems.get(subitemKeys[0])) == null ? void 0 : (_subitems$get6$ref = _subitems$get6.ref) == null ? void 0 : (_subitems$get6$ref$cu = _subitems$get6$ref.current) == null ? void 0 : _subitems$get6$ref$cu.focus();
          }
        }, [open, highlightedValue, subitems, subitemKeys]);
        React16.useEffect(() => {
          var _listboxRef$current;
          if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement) && highlightedValue !== null) {
            var _subitems$get7, _subitems$get7$ref$cu;
            subitems == null ? void 0 : (_subitems$get7 = subitems.get(highlightedValue)) == null ? void 0 : (_subitems$get7$ref$cu = _subitems$get7.ref.current) == null ? void 0 : _subitems$get7$ref$cu.focus();
          }
        }, [highlightedValue, subitems]);
        const getListboxProps = (otherHandlers = {}) => {
          const rootProps = getRootProps(otherHandlers);
          return {
            ...otherHandlers,
            ...rootProps,
            role: "menu"
          };
        };
        React16.useDebugValue({
          subitems,
          highlightedValue
        });
        return {
          contextValue: {
            ...compoundComponentContextValue,
            ...listContextValue
          },
          dispatch,
          getListboxProps,
          highlightedValue,
          listboxRef: mergedListRef,
          menuItems: subitems,
          open
        };
      }
    }
  });

  // node_modules/@mui/base/node/useMenu/useMenu.types.js
  var require_useMenu_types = __commonJS({
    "node_modules/@mui/base/node/useMenu/useMenu.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useMenu/MenuProvider.js
  var require_MenuProvider = __commonJS({
    "node_modules/@mui/base/node/useMenu/MenuProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = MenuProvider;
      var React16 = _interopRequireWildcard(require_react());
      var _ListContext = require_ListContext();
      var _useCompound = require_useCompound();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function MenuProvider(props) {
        const {
          value,
          children
        } = props;
        const {
          dispatch,
          getItemIndex,
          getItemState,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler,
          registerItem,
          totalSubitemCount
        } = value;
        const listContextValue = React16.useMemo(() => ({
          dispatch,
          getItemState,
          getItemIndex,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler
        }), [dispatch, getItemIndex, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
        const compoundComponentContextValue = React16.useMemo(() => ({
          getItemIndex,
          registerItem,
          totalSubitemCount
        }), [registerItem, getItemIndex, totalSubitemCount]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_useCompound.CompoundComponentContext.Provider, {
          value: compoundComponentContextValue,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ListContext.ListContext.Provider, {
            value: listContextValue,
            children
          })
        });
      }
    }
  });

  // node_modules/@mui/base/node/useMenu/index.js
  var require_useMenu2 = __commonJS({
    "node_modules/@mui/base/node/useMenu/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        MenuProvider: true
      };
      Object.defineProperty(exports, "MenuProvider", {
        enumerable: true,
        get: function() {
          return _MenuProvider.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useMenu.default;
        }
      });
      var _useMenu = _interopRequireDefault(require_useMenu());
      var _useMenu2 = require_useMenu_types();
      Object.keys(_useMenu2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useMenu2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useMenu2[key];
          }
        });
      });
      var _MenuProvider = _interopRequireWildcard(require_MenuProvider());
      Object.keys(_MenuProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MenuProvider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MenuProvider[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@popperjs/core/dist/cjs/popper.js
  var require_popper = __commonJS({
    "node_modules/@popperjs/core/dist/cjs/popper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function getWindow(node2) {
        if (node2 == null) {
          return window;
        }
        if (node2.toString() !== "[object Window]") {
          var ownerDocument3 = node2.ownerDocument;
          return ownerDocument3 ? ownerDocument3.defaultView || window : window;
        }
        return node2;
      }
      function isElement(node2) {
        var OwnElement = getWindow(node2).Element;
        return node2 instanceof OwnElement || node2 instanceof Element;
      }
      function isHTMLElement(node2) {
        var OwnElement = getWindow(node2).HTMLElement;
        return node2 instanceof OwnElement || node2 instanceof HTMLElement;
      }
      function isShadowRoot(node2) {
        if (typeof ShadowRoot === "undefined") {
          return false;
        }
        var OwnElement = getWindow(node2).ShadowRoot;
        return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
      }
      var max = Math.max;
      var min = Math.min;
      var round2 = Math.round;
      function getUAString() {
        var uaData = navigator.userAgentData;
        if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
          return uaData.brands.map(function(item) {
            return item.brand + "/" + item.version;
          }).join(" ");
        }
        return navigator.userAgent;
      }
      function isLayoutViewport() {
        return !/^((?!chrome|android).)*safari/i.test(getUAString());
      }
      function getBoundingClientRect(element, includeScale, isFixedStrategy) {
        if (includeScale === void 0) {
          includeScale = false;
        }
        if (isFixedStrategy === void 0) {
          isFixedStrategy = false;
        }
        var clientRect = element.getBoundingClientRect();
        var scaleX = 1;
        var scaleY = 1;
        if (includeScale && isHTMLElement(element)) {
          scaleX = element.offsetWidth > 0 ? round2(clientRect.width) / element.offsetWidth || 1 : 1;
          scaleY = element.offsetHeight > 0 ? round2(clientRect.height) / element.offsetHeight || 1 : 1;
        }
        var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
        var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
        var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
        var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
        var width = clientRect.width / scaleX;
        var height = clientRect.height / scaleY;
        return {
          width,
          height,
          top: y,
          right: x + width,
          bottom: y + height,
          left: x,
          x,
          y
        };
      }
      function getWindowScroll(node2) {
        var win = getWindow(node2);
        var scrollLeft = win.pageXOffset;
        var scrollTop = win.pageYOffset;
        return {
          scrollLeft,
          scrollTop
        };
      }
      function getHTMLElementScroll(element) {
        return {
          scrollLeft: element.scrollLeft,
          scrollTop: element.scrollTop
        };
      }
      function getNodeScroll(node2) {
        if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
          return getWindowScroll(node2);
        } else {
          return getHTMLElementScroll(node2);
        }
      }
      function getNodeName(element) {
        return element ? (element.nodeName || "").toLowerCase() : null;
      }
      function getDocumentElement(element) {
        return ((isElement(element) ? element.ownerDocument : (
          // $FlowFixMe[prop-missing]
          element.document
        )) || window.document).documentElement;
      }
      function getWindowScrollBarX(element) {
        return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
      }
      function getComputedStyle(element) {
        return getWindow(element).getComputedStyle(element);
      }
      function isScrollParent(element) {
        var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
        return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
      }
      function isElementScaled(element) {
        var rect = element.getBoundingClientRect();
        var scaleX = round2(rect.width) / element.offsetWidth || 1;
        var scaleY = round2(rect.height) / element.offsetHeight || 1;
        return scaleX !== 1 || scaleY !== 1;
      }
      function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
        if (isFixed === void 0) {
          isFixed = false;
        }
        var isOffsetParentAnElement = isHTMLElement(offsetParent);
        var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
        var documentElement = getDocumentElement(offsetParent);
        var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
        var scroll = {
          scrollLeft: 0,
          scrollTop: 0
        };
        var offsets = {
          x: 0,
          y: 0
        };
        if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
          if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
          isScrollParent(documentElement)) {
            scroll = getNodeScroll(offsetParent);
          }
          if (isHTMLElement(offsetParent)) {
            offsets = getBoundingClientRect(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
          } else if (documentElement) {
            offsets.x = getWindowScrollBarX(documentElement);
          }
        }
        return {
          x: rect.left + scroll.scrollLeft - offsets.x,
          y: rect.top + scroll.scrollTop - offsets.y,
          width: rect.width,
          height: rect.height
        };
      }
      function getLayoutRect(element) {
        var clientRect = getBoundingClientRect(element);
        var width = element.offsetWidth;
        var height = element.offsetHeight;
        if (Math.abs(clientRect.width - width) <= 1) {
          width = clientRect.width;
        }
        if (Math.abs(clientRect.height - height) <= 1) {
          height = clientRect.height;
        }
        return {
          x: element.offsetLeft,
          y: element.offsetTop,
          width,
          height
        };
      }
      function getParentNode(element) {
        if (getNodeName(element) === "html") {
          return element;
        }
        return (
          // this is a quicker (but less type safe) way to save quite some bytes from the bundle
          // $FlowFixMe[incompatible-return]
          // $FlowFixMe[prop-missing]
          element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
          element.parentNode || // DOM Element detected
          (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
          // $FlowFixMe[incompatible-call]: HTMLElement is a Node
          getDocumentElement(element)
        );
      }
      function getScrollParent(node2) {
        if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
          return node2.ownerDocument.body;
        }
        if (isHTMLElement(node2) && isScrollParent(node2)) {
          return node2;
        }
        return getScrollParent(getParentNode(node2));
      }
      function listScrollParents(element, list) {
        var _element$ownerDocumen;
        if (list === void 0) {
          list = [];
        }
        var scrollParent = getScrollParent(element);
        var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
        var win = getWindow(scrollParent);
        var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
        var updatedList = list.concat(target);
        return isBody ? updatedList : (
          // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
          updatedList.concat(listScrollParents(getParentNode(target)))
        );
      }
      function isTableElement(element) {
        return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
      }
      function getTrueOffsetParent(element) {
        if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
        getComputedStyle(element).position === "fixed") {
          return null;
        }
        return element.offsetParent;
      }
      function getContainingBlock(element) {
        var isFirefox = /firefox/i.test(getUAString());
        var isIE = /Trident/i.test(getUAString());
        if (isIE && isHTMLElement(element)) {
          var elementCss = getComputedStyle(element);
          if (elementCss.position === "fixed") {
            return null;
          }
        }
        var currentNode = getParentNode(element);
        if (isShadowRoot(currentNode)) {
          currentNode = currentNode.host;
        }
        while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
          var css3 = getComputedStyle(currentNode);
          if (css3.transform !== "none" || css3.perspective !== "none" || css3.contain === "paint" || ["transform", "perspective"].indexOf(css3.willChange) !== -1 || isFirefox && css3.willChange === "filter" || isFirefox && css3.filter && css3.filter !== "none") {
            return currentNode;
          } else {
            currentNode = currentNode.parentNode;
          }
        }
        return null;
      }
      function getOffsetParent(element) {
        var window2 = getWindow(element);
        var offsetParent = getTrueOffsetParent(element);
        while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
          offsetParent = getTrueOffsetParent(offsetParent);
        }
        if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
          return window2;
        }
        return offsetParent || getContainingBlock(element) || window2;
      }
      var top = "top";
      var bottom = "bottom";
      var right = "right";
      var left = "left";
      var auto = "auto";
      var basePlacements = [top, bottom, right, left];
      var start = "start";
      var end = "end";
      var clippingParents = "clippingParents";
      var viewport = "viewport";
      var popper = "popper";
      var reference = "reference";
      var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
        return acc.concat([placement + "-" + start, placement + "-" + end]);
      }, []);
      var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
        return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
      }, []);
      var beforeRead = "beforeRead";
      var read = "read";
      var afterRead = "afterRead";
      var beforeMain = "beforeMain";
      var main = "main";
      var afterMain = "afterMain";
      var beforeWrite = "beforeWrite";
      var write = "write";
      var afterWrite = "afterWrite";
      var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
      function order(modifiers) {
        var map = /* @__PURE__ */ new Map();
        var visited = /* @__PURE__ */ new Set();
        var result = [];
        modifiers.forEach(function(modifier) {
          map.set(modifier.name, modifier);
        });
        function sort(modifier) {
          visited.add(modifier.name);
          var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
          requires.forEach(function(dep) {
            if (!visited.has(dep)) {
              var depModifier = map.get(dep);
              if (depModifier) {
                sort(depModifier);
              }
            }
          });
          result.push(modifier);
        }
        modifiers.forEach(function(modifier) {
          if (!visited.has(modifier.name)) {
            sort(modifier);
          }
        });
        return result;
      }
      function orderModifiers(modifiers) {
        var orderedModifiers = order(modifiers);
        return modifierPhases.reduce(function(acc, phase) {
          return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
          }));
        }, []);
      }
      function debounce(fn) {
        var pending;
        return function() {
          if (!pending) {
            pending = new Promise(function(resolve) {
              Promise.resolve().then(function() {
                pending = void 0;
                resolve(fn());
              });
            });
          }
          return pending;
        };
      }
      function format(str) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return [].concat(args).reduce(function(p, c) {
          return p.replace(/%s/, c);
        }, str);
      }
      var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
      var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
      var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
      function validateModifiers(modifiers) {
        modifiers.forEach(function(modifier) {
          [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
            return self2.indexOf(value) === index;
          }).forEach(function(key) {
            switch (key) {
              case "name":
                if (typeof modifier.name !== "string") {
                  console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
                }
                break;
              case "enabled":
                if (typeof modifier.enabled !== "boolean") {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
                }
                break;
              case "phase":
                if (modifierPhases.indexOf(modifier.phase) < 0) {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
                }
                break;
              case "fn":
                if (typeof modifier.fn !== "function") {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
                }
                break;
              case "effect":
                if (modifier.effect != null && typeof modifier.effect !== "function") {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
                }
                break;
              case "requires":
                if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
                }
                break;
              case "requiresIfExists":
                if (!Array.isArray(modifier.requiresIfExists)) {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
                }
                break;
              case "options":
              case "data":
                break;
              default:
                console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
                  return '"' + s + '"';
                }).join(", ") + '; but "' + key + '" was provided.');
            }
            modifier.requires && modifier.requires.forEach(function(requirement) {
              if (modifiers.find(function(mod) {
                return mod.name === requirement;
              }) == null) {
                console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
              }
            });
          });
        });
      }
      function uniqueBy(arr, fn) {
        var identifiers = /* @__PURE__ */ new Set();
        return arr.filter(function(item) {
          var identifier2 = fn(item);
          if (!identifiers.has(identifier2)) {
            identifiers.add(identifier2);
            return true;
          }
        });
      }
      function getBasePlacement(placement) {
        return placement.split("-")[0];
      }
      function mergeByName(modifiers) {
        var merged = modifiers.reduce(function(merged2, current) {
          var existing = merged2[current.name];
          merged2[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
          }) : current;
          return merged2;
        }, {});
        return Object.keys(merged).map(function(key) {
          return merged[key];
        });
      }
      function getViewportRect(element, strategy) {
        var win = getWindow(element);
        var html = getDocumentElement(element);
        var visualViewport = win.visualViewport;
        var width = html.clientWidth;
        var height = html.clientHeight;
        var x = 0;
        var y = 0;
        if (visualViewport) {
          width = visualViewport.width;
          height = visualViewport.height;
          var layoutViewport = isLayoutViewport();
          if (layoutViewport || !layoutViewport && strategy === "fixed") {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
          }
        }
        return {
          width,
          height,
          x: x + getWindowScrollBarX(element),
          y
        };
      }
      function getDocumentRect(element) {
        var _element$ownerDocumen;
        var html = getDocumentElement(element);
        var winScroll = getWindowScroll(element);
        var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
        var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
        var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
        var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
        var y = -winScroll.scrollTop;
        if (getComputedStyle(body || html).direction === "rtl") {
          x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
        }
        return {
          width,
          height,
          x,
          y
        };
      }
      function contains(parent, child) {
        var rootNode = child.getRootNode && child.getRootNode();
        if (parent.contains(child)) {
          return true;
        } else if (rootNode && isShadowRoot(rootNode)) {
          var next2 = child;
          do {
            if (next2 && parent.isSameNode(next2)) {
              return true;
            }
            next2 = next2.parentNode || next2.host;
          } while (next2);
        }
        return false;
      }
      function rectToClientRect(rect) {
        return Object.assign({}, rect, {
          left: rect.x,
          top: rect.y,
          right: rect.x + rect.width,
          bottom: rect.y + rect.height
        });
      }
      function getInnerBoundingClientRect(element, strategy) {
        var rect = getBoundingClientRect(element, false, strategy === "fixed");
        rect.top = rect.top + element.clientTop;
        rect.left = rect.left + element.clientLeft;
        rect.bottom = rect.top + element.clientHeight;
        rect.right = rect.left + element.clientWidth;
        rect.width = element.clientWidth;
        rect.height = element.clientHeight;
        rect.x = rect.left;
        rect.y = rect.top;
        return rect;
      }
      function getClientRectFromMixedType(element, clippingParent, strategy) {
        return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
      }
      function getClippingParents(element) {
        var clippingParents2 = listScrollParents(getParentNode(element));
        var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
        var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
        if (!isElement(clipperElement)) {
          return [];
        }
        return clippingParents2.filter(function(clippingParent) {
          return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
        });
      }
      function getClippingRect(element, boundary, rootBoundary, strategy) {
        var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
        var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
        var firstClippingParent = clippingParents2[0];
        var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
          var rect = getClientRectFromMixedType(element, clippingParent, strategy);
          accRect.top = max(rect.top, accRect.top);
          accRect.right = min(rect.right, accRect.right);
          accRect.bottom = min(rect.bottom, accRect.bottom);
          accRect.left = max(rect.left, accRect.left);
          return accRect;
        }, getClientRectFromMixedType(element, firstClippingParent, strategy));
        clippingRect.width = clippingRect.right - clippingRect.left;
        clippingRect.height = clippingRect.bottom - clippingRect.top;
        clippingRect.x = clippingRect.left;
        clippingRect.y = clippingRect.top;
        return clippingRect;
      }
      function getVariation(placement) {
        return placement.split("-")[1];
      }
      function getMainAxisFromPlacement(placement) {
        return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
      }
      function computeOffsets(_ref) {
        var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
        var basePlacement = placement ? getBasePlacement(placement) : null;
        var variation = placement ? getVariation(placement) : null;
        var commonX = reference2.x + reference2.width / 2 - element.width / 2;
        var commonY = reference2.y + reference2.height / 2 - element.height / 2;
        var offsets;
        switch (basePlacement) {
          case top:
            offsets = {
              x: commonX,
              y: reference2.y - element.height
            };
            break;
          case bottom:
            offsets = {
              x: commonX,
              y: reference2.y + reference2.height
            };
            break;
          case right:
            offsets = {
              x: reference2.x + reference2.width,
              y: commonY
            };
            break;
          case left:
            offsets = {
              x: reference2.x - element.width,
              y: commonY
            };
            break;
          default:
            offsets = {
              x: reference2.x,
              y: reference2.y
            };
        }
        var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
        if (mainAxis != null) {
          var len = mainAxis === "y" ? "height" : "width";
          switch (variation) {
            case start:
              offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
              break;
            case end:
              offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
              break;
          }
        }
        return offsets;
      }
      function getFreshSideObject() {
        return {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        };
      }
      function mergePaddingObject(paddingObject) {
        return Object.assign({}, getFreshSideObject(), paddingObject);
      }
      function expandToHashMap(value, keys) {
        return keys.reduce(function(hashMap, key) {
          hashMap[key] = value;
          return hashMap;
        }, {});
      }
      function detectOverflow(state, options) {
        if (options === void 0) {
          options = {};
        }
        var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
        var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
        var altContext = elementContext === popper ? reference : popper;
        var popperRect = state.rects.popper;
        var element = state.elements[altBoundary ? altContext : elementContext];
        var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
        var referenceClientRect = getBoundingClientRect(state.elements.reference);
        var popperOffsets2 = computeOffsets({
          reference: referenceClientRect,
          element: popperRect,
          strategy: "absolute",
          placement
        });
        var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
        var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
        var overflowOffsets = {
          top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
          bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
          left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
          right: elementClientRect.right - clippingClientRect.right + paddingObject.right
        };
        var offsetData = state.modifiersData.offset;
        if (elementContext === popper && offsetData) {
          var offset2 = offsetData[placement];
          Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
            var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
            overflowOffsets[key] += offset2[axis] * multiply;
          });
        }
        return overflowOffsets;
      }
      var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
      var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
      var DEFAULT_OPTIONS = {
        placement: "bottom",
        modifiers: [],
        strategy: "absolute"
      };
      function areValidElements() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return !args.some(function(element) {
          return !(element && typeof element.getBoundingClientRect === "function");
        });
      }
      function popperGenerator(generatorOptions) {
        if (generatorOptions === void 0) {
          generatorOptions = {};
        }
        var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
        return function createPopper2(reference2, popper2, options) {
          if (options === void 0) {
            options = defaultOptions;
          }
          var state = {
            placement: "bottom",
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
              reference: reference2,
              popper: popper2
            },
            attributes: {},
            styles: {}
          };
          var effectCleanupFns = [];
          var isDestroyed = false;
          var instance = {
            state,
            setOptions: function setOptions(setOptionsAction) {
              var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
              cleanupModifierEffects();
              state.options = Object.assign({}, defaultOptions, state.options, options2);
              state.scrollParents = {
                reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
                popper: listScrollParents(popper2)
              };
              var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
              state.orderedModifiers = orderedModifiers.filter(function(m) {
                return m.enabled;
              });
              if (true) {
                var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
                  var name = _ref.name;
                  return name;
                });
                validateModifiers(modifiers);
                if (getBasePlacement(state.options.placement) === auto) {
                  var flipModifier = state.orderedModifiers.find(function(_ref2) {
                    var name = _ref2.name;
                    return name === "flip";
                  });
                  if (!flipModifier) {
                    console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
                  }
                }
                var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
                if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
                  return parseFloat(margin);
                })) {
                  console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
                }
              }
              runModifierEffects();
              return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
              if (isDestroyed) {
                return;
              }
              var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
              if (!areValidElements(reference3, popper3)) {
                if (true) {
                  console.error(INVALID_ELEMENT_ERROR);
                }
                return;
              }
              state.rects = {
                reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
                popper: getLayoutRect(popper3)
              };
              state.reset = false;
              state.placement = state.options.placement;
              state.orderedModifiers.forEach(function(modifier) {
                return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
              });
              var __debug_loops__ = 0;
              for (var index = 0; index < state.orderedModifiers.length; index++) {
                if (true) {
                  __debug_loops__ += 1;
                  if (__debug_loops__ > 100) {
                    console.error(INFINITE_LOOP_ERROR);
                    break;
                  }
                }
                if (state.reset === true) {
                  state.reset = false;
                  index = -1;
                  continue;
                }
                var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                if (typeof fn === "function") {
                  state = fn({
                    state,
                    options: _options,
                    name,
                    instance
                  }) || state;
                }
              }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: debounce(function() {
              return new Promise(function(resolve) {
                instance.forceUpdate();
                resolve(state);
              });
            }),
            destroy: function destroy() {
              cleanupModifierEffects();
              isDestroyed = true;
            }
          };
          if (!areValidElements(reference2, popper2)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return instance;
          }
          instance.setOptions(options).then(function(state2) {
            if (!isDestroyed && options.onFirstUpdate) {
              options.onFirstUpdate(state2);
            }
          });
          function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref3) {
              var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
              if (typeof effect2 === "function") {
                var cleanupFn = effect2({
                  state,
                  name,
                  instance,
                  options: options2
                });
                var noopFn = function noopFn2() {
                };
                effectCleanupFns.push(cleanupFn || noopFn);
              }
            });
          }
          function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
              return fn();
            });
            effectCleanupFns = [];
          }
          return instance;
        };
      }
      var passive = {
        passive: true
      };
      function effect$2(_ref) {
        var state = _ref.state, instance = _ref.instance, options = _ref.options;
        var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
        var window2 = getWindow(state.elements.popper);
        var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
        if (scroll) {
          scrollParents.forEach(function(scrollParent) {
            scrollParent.addEventListener("scroll", instance.update, passive);
          });
        }
        if (resize) {
          window2.addEventListener("resize", instance.update, passive);
        }
        return function() {
          if (scroll) {
            scrollParents.forEach(function(scrollParent) {
              scrollParent.removeEventListener("scroll", instance.update, passive);
            });
          }
          if (resize) {
            window2.removeEventListener("resize", instance.update, passive);
          }
        };
      }
      var eventListeners = {
        name: "eventListeners",
        enabled: true,
        phase: "write",
        fn: function fn() {
        },
        effect: effect$2,
        data: {}
      };
      function popperOffsets(_ref) {
        var state = _ref.state, name = _ref.name;
        state.modifiersData[name] = computeOffsets({
          reference: state.rects.reference,
          element: state.rects.popper,
          strategy: "absolute",
          placement: state.placement
        });
      }
      var popperOffsets$1 = {
        name: "popperOffsets",
        enabled: true,
        phase: "read",
        fn: popperOffsets,
        data: {}
      };
      var unsetSides = {
        top: "auto",
        right: "auto",
        bottom: "auto",
        left: "auto"
      };
      function roundOffsetsByDPR(_ref, win) {
        var x = _ref.x, y = _ref.y;
        var dpr = win.devicePixelRatio || 1;
        return {
          x: round2(x * dpr) / dpr || 0,
          y: round2(y * dpr) / dpr || 0
        };
      }
      function mapToStyles(_ref2) {
        var _Object$assign2;
        var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
        var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
        var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
          x,
          y
        }) : {
          x,
          y
        };
        x = _ref3.x;
        y = _ref3.y;
        var hasX = offsets.hasOwnProperty("x");
        var hasY = offsets.hasOwnProperty("y");
        var sideX = left;
        var sideY = top;
        var win = window;
        if (adaptive) {
          var offsetParent = getOffsetParent(popper2);
          var heightProp = "clientHeight";
          var widthProp = "clientWidth";
          if (offsetParent === getWindow(popper2)) {
            offsetParent = getDocumentElement(popper2);
            if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
              heightProp = "scrollHeight";
              widthProp = "scrollWidth";
            }
          }
          offsetParent = offsetParent;
          if (placement === top || (placement === left || placement === right) && variation === end) {
            sideY = bottom;
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
              // $FlowFixMe[prop-missing]
              offsetParent[heightProp]
            );
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
          }
          if (placement === left || (placement === top || placement === bottom) && variation === end) {
            sideX = right;
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
              // $FlowFixMe[prop-missing]
              offsetParent[widthProp]
            );
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
          }
        }
        var commonStyles = Object.assign({
          position: position2
        }, adaptive && unsetSides);
        var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
          x,
          y
        }, getWindow(popper2)) : {
          x,
          y
        };
        x = _ref4.x;
        y = _ref4.y;
        if (gpuAcceleration) {
          var _Object$assign;
          return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
        }
        return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
      }
      function computeStyles(_ref5) {
        var state = _ref5.state, options = _ref5.options;
        var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
        if (true) {
          var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
          if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
            return transitionProperty.indexOf(property) >= 0;
          })) {
            console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
          }
        }
        var commonStyles = {
          placement: getBasePlacement(state.placement),
          variation: getVariation(state.placement),
          popper: state.elements.popper,
          popperRect: state.rects.popper,
          gpuAcceleration,
          isFixed: state.options.strategy === "fixed"
        };
        if (state.modifiersData.popperOffsets != null) {
          state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
            offsets: state.modifiersData.popperOffsets,
            position: state.options.strategy,
            adaptive,
            roundOffsets
          })));
        }
        if (state.modifiersData.arrow != null) {
          state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
            offsets: state.modifiersData.arrow,
            position: "absolute",
            adaptive: false,
            roundOffsets
          })));
        }
        state.attributes.popper = Object.assign({}, state.attributes.popper, {
          "data-popper-placement": state.placement
        });
      }
      var computeStyles$1 = {
        name: "computeStyles",
        enabled: true,
        phase: "beforeWrite",
        fn: computeStyles,
        data: {}
      };
      function applyStyles(_ref) {
        var state = _ref.state;
        Object.keys(state.elements).forEach(function(name) {
          var style = state.styles[name] || {};
          var attributes = state.attributes[name] || {};
          var element = state.elements[name];
          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }
          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function(name2) {
            var value = attributes[name2];
            if (value === false) {
              element.removeAttribute(name2);
            } else {
              element.setAttribute(name2, value === true ? "" : value);
            }
          });
        });
      }
      function effect$1(_ref2) {
        var state = _ref2.state;
        var initialStyles = {
          popper: {
            position: state.options.strategy,
            left: "0",
            top: "0",
            margin: "0"
          },
          arrow: {
            position: "absolute"
          },
          reference: {}
        };
        Object.assign(state.elements.popper.style, initialStyles.popper);
        state.styles = initialStyles;
        if (state.elements.arrow) {
          Object.assign(state.elements.arrow.style, initialStyles.arrow);
        }
        return function() {
          Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
            var style = styleProperties.reduce(function(style2, property) {
              style2[property] = "";
              return style2;
            }, {});
            if (!isHTMLElement(element) || !getNodeName(element)) {
              return;
            }
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
              element.removeAttribute(attribute);
            });
          });
        };
      }
      var applyStyles$1 = {
        name: "applyStyles",
        enabled: true,
        phase: "write",
        fn: applyStyles,
        effect: effect$1,
        requires: ["computeStyles"]
      };
      function distanceAndSkiddingToXY(placement, rects, offset2) {
        var basePlacement = getBasePlacement(placement);
        var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
        var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
          placement
        })) : offset2, skidding = _ref[0], distance = _ref[1];
        skidding = skidding || 0;
        distance = (distance || 0) * invertDistance;
        return [left, right].indexOf(basePlacement) >= 0 ? {
          x: distance,
          y: skidding
        } : {
          x: skidding,
          y: distance
        };
      }
      function offset(_ref2) {
        var state = _ref2.state, options = _ref2.options, name = _ref2.name;
        var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
        var data = placements.reduce(function(acc, placement) {
          acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
          return acc;
        }, {});
        var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
        if (state.modifiersData.popperOffsets != null) {
          state.modifiersData.popperOffsets.x += x;
          state.modifiersData.popperOffsets.y += y;
        }
        state.modifiersData[name] = data;
      }
      var offset$1 = {
        name: "offset",
        enabled: true,
        phase: "main",
        requires: ["popperOffsets"],
        fn: offset
      };
      var hash$1 = {
        left: "right",
        right: "left",
        bottom: "top",
        top: "bottom"
      };
      function getOppositePlacement(placement) {
        return placement.replace(/left|right|bottom|top/g, function(matched) {
          return hash$1[matched];
        });
      }
      var hash2 = {
        start: "end",
        end: "start"
      };
      function getOppositeVariationPlacement(placement) {
        return placement.replace(/start|end/g, function(matched) {
          return hash2[matched];
        });
      }
      function computeAutoPlacement(state, options) {
        if (options === void 0) {
          options = {};
        }
        var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
        var variation = getVariation(placement);
        var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
          return getVariation(placement2) === variation;
        }) : basePlacements;
        var allowedPlacements = placements$1.filter(function(placement2) {
          return allowedAutoPlacements.indexOf(placement2) >= 0;
        });
        if (allowedPlacements.length === 0) {
          allowedPlacements = placements$1;
          if (true) {
            console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
          }
        }
        var overflows = allowedPlacements.reduce(function(acc, placement2) {
          acc[placement2] = detectOverflow(state, {
            placement: placement2,
            boundary,
            rootBoundary,
            padding
          })[getBasePlacement(placement2)];
          return acc;
        }, {});
        return Object.keys(overflows).sort(function(a, b) {
          return overflows[a] - overflows[b];
        });
      }
      function getExpandedFallbackPlacements(placement) {
        if (getBasePlacement(placement) === auto) {
          return [];
        }
        var oppositePlacement = getOppositePlacement(placement);
        return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
      }
      function flip(_ref) {
        var state = _ref.state, options = _ref.options, name = _ref.name;
        if (state.modifiersData[name]._skip) {
          return;
        }
        var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
        var preferredPlacement = state.options.placement;
        var basePlacement = getBasePlacement(preferredPlacement);
        var isBasePlacement = basePlacement === preferredPlacement;
        var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
        var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
          return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
            placement: placement2,
            boundary,
            rootBoundary,
            padding,
            flipVariations,
            allowedAutoPlacements
          }) : placement2);
        }, []);
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var checksMap = /* @__PURE__ */ new Map();
        var makeFallbackChecks = true;
        var firstFittingPlacement = placements2[0];
        for (var i = 0; i < placements2.length; i++) {
          var placement = placements2[i];
          var _basePlacement = getBasePlacement(placement);
          var isStartVariation = getVariation(placement) === start;
          var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
          var len = isVertical ? "width" : "height";
          var overflow = detectOverflow(state, {
            placement,
            boundary,
            rootBoundary,
            altBoundary,
            padding
          });
          var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
          if (referenceRect[len] > popperRect[len]) {
            mainVariationSide = getOppositePlacement(mainVariationSide);
          }
          var altVariationSide = getOppositePlacement(mainVariationSide);
          var checks = [];
          if (checkMainAxis) {
            checks.push(overflow[_basePlacement] <= 0);
          }
          if (checkAltAxis) {
            checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
          }
          if (checks.every(function(check) {
            return check;
          })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
          }
          checksMap.set(placement, checks);
        }
        if (makeFallbackChecks) {
          var numberOfChecks = flipVariations ? 3 : 1;
          var _loop = function _loop2(_i2) {
            var fittingPlacement = placements2.find(function(placement2) {
              var checks2 = checksMap.get(placement2);
              if (checks2) {
                return checks2.slice(0, _i2).every(function(check) {
                  return check;
                });
              }
            });
            if (fittingPlacement) {
              firstFittingPlacement = fittingPlacement;
              return "break";
            }
          };
          for (var _i = numberOfChecks; _i > 0; _i--) {
            var _ret = _loop(_i);
            if (_ret === "break")
              break;
          }
        }
        if (state.placement !== firstFittingPlacement) {
          state.modifiersData[name]._skip = true;
          state.placement = firstFittingPlacement;
          state.reset = true;
        }
      }
      var flip$1 = {
        name: "flip",
        enabled: true,
        phase: "main",
        fn: flip,
        requiresIfExists: ["offset"],
        data: {
          _skip: false
        }
      };
      function getAltAxis(axis) {
        return axis === "x" ? "y" : "x";
      }
      function within(min$1, value, max$1) {
        return max(min$1, min(value, max$1));
      }
      function withinMaxClamp(min2, value, max2) {
        var v = within(min2, value, max2);
        return v > max2 ? max2 : v;
      }
      function preventOverflow(_ref) {
        var state = _ref.state, options = _ref.options, name = _ref.name;
        var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
        var overflow = detectOverflow(state, {
          boundary,
          rootBoundary,
          padding,
          altBoundary
        });
        var basePlacement = getBasePlacement(state.placement);
        var variation = getVariation(state.placement);
        var isBasePlacement = !variation;
        var mainAxis = getMainAxisFromPlacement(basePlacement);
        var altAxis = getAltAxis(mainAxis);
        var popperOffsets2 = state.modifiersData.popperOffsets;
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
          placement: state.placement
        })) : tetherOffset;
        var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
          mainAxis: tetherOffsetValue,
          altAxis: tetherOffsetValue
        } : Object.assign({
          mainAxis: 0,
          altAxis: 0
        }, tetherOffsetValue);
        var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
        var data = {
          x: 0,
          y: 0
        };
        if (!popperOffsets2) {
          return;
        }
        if (checkMainAxis) {
          var _offsetModifierState$;
          var mainSide = mainAxis === "y" ? top : left;
          var altSide = mainAxis === "y" ? bottom : right;
          var len = mainAxis === "y" ? "height" : "width";
          var offset2 = popperOffsets2[mainAxis];
          var min$1 = offset2 + overflow[mainSide];
          var max$1 = offset2 - overflow[altSide];
          var additive = tether ? -popperRect[len] / 2 : 0;
          var minLen = variation === start ? referenceRect[len] : popperRect[len];
          var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
          var arrowElement = state.elements.arrow;
          var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
            width: 0,
            height: 0
          };
          var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
          var arrowPaddingMin = arrowPaddingObject[mainSide];
          var arrowPaddingMax = arrowPaddingObject[altSide];
          var arrowLen = within(0, referenceRect[len], arrowRect[len]);
          var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
          var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
          var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
          var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
          var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
          var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
          var tetherMax = offset2 + maxOffset - offsetModifierValue;
          var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset2, tether ? max(max$1, tetherMax) : max$1);
          popperOffsets2[mainAxis] = preventedOffset;
          data[mainAxis] = preventedOffset - offset2;
        }
        if (checkAltAxis) {
          var _offsetModifierState$2;
          var _mainSide = mainAxis === "x" ? top : left;
          var _altSide = mainAxis === "x" ? bottom : right;
          var _offset = popperOffsets2[altAxis];
          var _len = altAxis === "y" ? "height" : "width";
          var _min = _offset + overflow[_mainSide];
          var _max = _offset - overflow[_altSide];
          var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
          var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
          var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
          var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
          var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
          popperOffsets2[altAxis] = _preventedOffset;
          data[altAxis] = _preventedOffset - _offset;
        }
        state.modifiersData[name] = data;
      }
      var preventOverflow$1 = {
        name: "preventOverflow",
        enabled: true,
        phase: "main",
        fn: preventOverflow,
        requiresIfExists: ["offset"]
      };
      var toPaddingObject = function toPaddingObject2(padding, state) {
        padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
          placement: state.placement
        })) : padding;
        return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
      };
      function arrow(_ref) {
        var _state$modifiersData$;
        var state = _ref.state, name = _ref.name, options = _ref.options;
        var arrowElement = state.elements.arrow;
        var popperOffsets2 = state.modifiersData.popperOffsets;
        var basePlacement = getBasePlacement(state.placement);
        var axis = getMainAxisFromPlacement(basePlacement);
        var isVertical = [left, right].indexOf(basePlacement) >= 0;
        var len = isVertical ? "height" : "width";
        if (!arrowElement || !popperOffsets2) {
          return;
        }
        var paddingObject = toPaddingObject(options.padding, state);
        var arrowRect = getLayoutRect(arrowElement);
        var minProp = axis === "y" ? top : left;
        var maxProp = axis === "y" ? bottom : right;
        var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
        var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
        var arrowOffsetParent = getOffsetParent(arrowElement);
        var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
        var centerToReference = endDiff / 2 - startDiff / 2;
        var min2 = paddingObject[minProp];
        var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
        var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
        var offset2 = within(min2, center, max2);
        var axisProp = axis;
        state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
      }
      function effect(_ref2) {
        var state = _ref2.state, options = _ref2.options;
        var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
        if (arrowElement == null) {
          return;
        }
        if (typeof arrowElement === "string") {
          arrowElement = state.elements.popper.querySelector(arrowElement);
          if (!arrowElement) {
            return;
          }
        }
        if (true) {
          if (!isHTMLElement(arrowElement)) {
            console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
          }
        }
        if (!contains(state.elements.popper, arrowElement)) {
          if (true) {
            console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
          }
          return;
        }
        state.elements.arrow = arrowElement;
      }
      var arrow$1 = {
        name: "arrow",
        enabled: true,
        phase: "main",
        fn: arrow,
        effect,
        requires: ["popperOffsets"],
        requiresIfExists: ["preventOverflow"]
      };
      function getSideOffsets(overflow, rect, preventedOffsets) {
        if (preventedOffsets === void 0) {
          preventedOffsets = {
            x: 0,
            y: 0
          };
        }
        return {
          top: overflow.top - rect.height - preventedOffsets.y,
          right: overflow.right - rect.width + preventedOffsets.x,
          bottom: overflow.bottom - rect.height + preventedOffsets.y,
          left: overflow.left - rect.width - preventedOffsets.x
        };
      }
      function isAnySideFullyClipped(overflow) {
        return [top, right, bottom, left].some(function(side) {
          return overflow[side] >= 0;
        });
      }
      function hide(_ref) {
        var state = _ref.state, name = _ref.name;
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var preventedOffsets = state.modifiersData.preventOverflow;
        var referenceOverflow = detectOverflow(state, {
          elementContext: "reference"
        });
        var popperAltOverflow = detectOverflow(state, {
          altBoundary: true
        });
        var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
        var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
        var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
        var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
        state.modifiersData[name] = {
          referenceClippingOffsets,
          popperEscapeOffsets,
          isReferenceHidden,
          hasPopperEscaped
        };
        state.attributes.popper = Object.assign({}, state.attributes.popper, {
          "data-popper-reference-hidden": isReferenceHidden,
          "data-popper-escaped": hasPopperEscaped
        });
      }
      var hide$1 = {
        name: "hide",
        enabled: true,
        phase: "main",
        requiresIfExists: ["preventOverflow"],
        fn: hide
      };
      var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
      var createPopper$1 = /* @__PURE__ */ popperGenerator({
        defaultModifiers: defaultModifiers$1
      });
      var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
      var createPopper = /* @__PURE__ */ popperGenerator({
        defaultModifiers
      });
      exports.applyStyles = applyStyles$1;
      exports.arrow = arrow$1;
      exports.computeStyles = computeStyles$1;
      exports.createPopper = createPopper;
      exports.createPopperLite = createPopper$1;
      exports.defaultModifiers = defaultModifiers;
      exports.detectOverflow = detectOverflow;
      exports.eventListeners = eventListeners;
      exports.flip = flip$1;
      exports.hide = hide$1;
      exports.offset = offset$1;
      exports.popperGenerator = popperGenerator;
      exports.popperOffsets = popperOffsets$1;
      exports.preventOverflow = preventOverflow$1;
    }
  });

  // node_modules/@mui/base/node/Portal/Portal.js
  var require_Portal = __commonJS({
    "node_modules/@mui/base/node/Portal/Portal.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var ReactDOM2 = _interopRequireWildcard(require_react_dom());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getContainer(container) {
        return typeof container === "function" ? container() : container;
      }
      var Portal = /* @__PURE__ */ React16.forwardRef(function Portal2(props, forwardedRef) {
        const {
          children,
          container,
          disablePortal = false
        } = props;
        const [mountNode, setMountNode] = React16.useState(null);
        const handleRef = (0, _utils.unstable_useForkRef)(/* @__PURE__ */ React16.isValidElement(children) ? children.ref : null, forwardedRef);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (!disablePortal) {
            setMountNode(getContainer(container) || document.body);
          }
        }, [container, disablePortal]);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (mountNode && !disablePortal) {
            (0, _utils.unstable_setRef)(forwardedRef, mountNode);
            return () => {
              (0, _utils.unstable_setRef)(forwardedRef, null);
            };
          }
          return void 0;
        }, [forwardedRef, mountNode, disablePortal]);
        if (disablePortal) {
          if (/* @__PURE__ */ React16.isValidElement(children)) {
            const newProps = {
              ref: handleRef
            };
            return /* @__PURE__ */ React16.cloneElement(children, newProps);
          }
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React16.Fragment, {
            children
          });
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React16.Fragment, {
          children: mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode
        });
      });
      true ? Portal.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The children to render into the `container`.
         */
        children: _propTypes.default.node,
        /**
         * An HTML element or function that returns one.
         * The `container` will have the portal children appended to it.
         *
         * By default, it uses the body of the top-level document object,
         * so it's simply `document.body` most of the time.
         */
        container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
        /**
         * The `children` will be under the DOM hierarchy of the parent component.
         * @default false
         */
        disablePortal: _propTypes.default.bool
      } : void 0;
      if (true) {
        Portal["propTypes"] = (0, _utils.exactProp)(Portal.propTypes);
      }
      var _default = Portal;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Portal/Portal.types.js
  var require_Portal_types = __commonJS({
    "node_modules/@mui/base/node/Portal/Portal.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Portal/index.js
  var require_Portal2 = __commonJS({
    "node_modules/@mui/base/node/Portal/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Portal.default;
        }
      });
      var _Portal = _interopRequireDefault(require_Portal());
      var _Portal2 = require_Portal_types();
      Object.keys(_Portal2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Portal2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Portal2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/Popper/popperClasses.js
  var require_popperClasses = __commonJS({
    "node_modules/@mui/base/node/Popper/popperClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPopperUtilityClass = getPopperUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getPopperUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiPopper", slot);
      }
      var popperClasses = (0, _generateUtilityClasses.default)("MuiPopper", ["root"]);
      var _default = popperClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Popper/Popper.js
  var require_Popper = __commonJS({
    "node_modules/@mui/base/node/Popper/Popper.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _core = require_popper();
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _Portal = _interopRequireDefault(require_Portal2());
      var _popperClasses = require_popperClasses();
      var _utils2 = require_utils2();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function flipPlacement(placement, direction) {
        if (direction === "ltr") {
          return placement;
        }
        switch (placement) {
          case "bottom-end":
            return "bottom-start";
          case "bottom-start":
            return "bottom-end";
          case "top-end":
            return "top-start";
          case "top-start":
            return "top-end";
          default:
            return placement;
        }
      }
      function resolveAnchorEl(anchorEl) {
        return typeof anchorEl === "function" ? anchorEl() : anchorEl;
      }
      function isHTMLElement(element) {
        return element.nodeType !== void 0;
      }
      function isVirtualElement(element) {
        return !isHTMLElement(element);
      }
      var useUtilityClasses4 = () => {
        const slots = {
          root: ["root"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_popperClasses.getPopperUtilityClass));
      };
      var defaultPopperOptions = {};
      var PopperTooltip = /* @__PURE__ */ React16.forwardRef(function PopperTooltip2(props, forwardedRef) {
        var _slots$root;
        const {
          anchorEl,
          children,
          direction,
          disablePortal,
          modifiers,
          open,
          placement: initialPlacement,
          popperOptions,
          popperRef: popperRefProp,
          slotProps = {},
          slots = {},
          TransitionProps,
          // @ts-ignore internal logic
          ownerState: ownerStateProp,
          // prevent from spreading to DOM, it can come from the parent component e.g. Select.
          ...other
        } = props;
        const tooltipRef = React16.useRef(null);
        const ownRef = (0, _utils.unstable_useForkRef)(tooltipRef, forwardedRef);
        const popperRef = React16.useRef(null);
        const handlePopperRef = (0, _utils.unstable_useForkRef)(popperRef, popperRefProp);
        const handlePopperRefRef = React16.useRef(handlePopperRef);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          handlePopperRefRef.current = handlePopperRef;
        }, [handlePopperRef]);
        React16.useImperativeHandle(popperRefProp, () => popperRef.current, []);
        const rtlPlacement = flipPlacement(initialPlacement, direction);
        const [placement, setPlacement] = React16.useState(rtlPlacement);
        const [resolvedAnchorElement, setResolvedAnchorElement] = React16.useState(resolveAnchorEl(anchorEl));
        React16.useEffect(() => {
          if (popperRef.current) {
            popperRef.current.forceUpdate();
          }
        });
        React16.useEffect(() => {
          if (anchorEl) {
            setResolvedAnchorElement(resolveAnchorEl(anchorEl));
          }
        }, [anchorEl]);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (!resolvedAnchorElement || !open) {
            return void 0;
          }
          const handlePopperUpdate = (data) => {
            setPlacement(data.placement);
          };
          if (true) {
            if (resolvedAnchorElement && isHTMLElement(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
              const box = resolvedAnchorElement.getBoundingClientRect();
              if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
                console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
              }
            }
          }
          let popperModifiers = [{
            name: "preventOverflow",
            options: {
              altBoundary: disablePortal
            }
          }, {
            name: "flip",
            options: {
              altBoundary: disablePortal
            }
          }, {
            name: "onUpdate",
            enabled: true,
            phase: "afterWrite",
            fn: ({
              state
            }) => {
              handlePopperUpdate(state);
            }
          }];
          if (modifiers != null) {
            popperModifiers = popperModifiers.concat(modifiers);
          }
          if (popperOptions && popperOptions.modifiers != null) {
            popperModifiers = popperModifiers.concat(popperOptions.modifiers);
          }
          const popper = (0, _core.createPopper)(resolvedAnchorElement, tooltipRef.current, {
            placement: rtlPlacement,
            ...popperOptions,
            modifiers: popperModifiers
          });
          handlePopperRefRef.current(popper);
          return () => {
            popper.destroy();
            handlePopperRefRef.current(null);
          };
        }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
        const childProps = {
          placement
        };
        if (TransitionProps !== null) {
          childProps.TransitionProps = TransitionProps;
        }
        const classes = useUtilityClasses4();
        const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            role: "tooltip",
            ref: ownRef
          },
          ownerState: props,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
          ...rootProps,
          children: typeof children === "function" ? children(childProps) : children
        });
      });
      var Popper = /* @__PURE__ */ React16.forwardRef(function Popper2(props, forwardedRef) {
        const {
          anchorEl,
          children,
          container: containerProp,
          direction = "ltr",
          disablePortal = false,
          keepMounted = false,
          modifiers,
          open,
          placement = "bottom",
          popperOptions = defaultPopperOptions,
          popperRef,
          style,
          transition = false,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const [exited, setExited] = React16.useState(true);
        const handleEnter = () => {
          setExited(false);
        };
        const handleExited = () => {
          setExited(true);
        };
        if (!keepMounted && !open && (!transition || exited)) {
          return null;
        }
        let container;
        if (containerProp) {
          container = containerProp;
        } else if (anchorEl) {
          const resolvedAnchorEl = resolveAnchorEl(anchorEl);
          container = resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) ? (0, _utils.unstable_ownerDocument)(resolvedAnchorEl).body : (0, _utils.unstable_ownerDocument)(null).body;
        }
        const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
        const transitionProps = transition ? {
          in: open,
          onEnter: handleEnter,
          onExited: handleExited
        } : void 0;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Portal.default, {
          disablePortal,
          container,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(PopperTooltip, {
            anchorEl,
            direction,
            disablePortal,
            modifiers,
            ref: forwardedRef,
            open: transition ? !exited : open,
            placement,
            popperOptions,
            popperRef,
            slotProps,
            slots,
            ...other,
            style: {
              // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
              position: "fixed",
              // Fix Popper.js display issue
              top: 0,
              left: 0,
              display,
              ...style
            },
            TransitionProps: transitionProps,
            children
          })
        });
      });
      true ? Popper.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
         * or a function that returns either.
         * It's used to set the position of the popper.
         * The return value will passed as the reference object of the Popper instance.
         */
        anchorEl: (0, _utils.chainPropTypes)(_propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]), (props) => {
          if (props.open) {
            const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
            if (resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
              const box = resolvedAnchorEl.getBoundingClientRect();
              if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
                return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
              }
            } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
              return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
            }
          }
          return null;
        }),
        /**
         * Popper render function or node.
         */
        children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
        /**
         * An HTML element or function that returns one.
         * The `container` will have the portal children appended to it.
         *
         * By default, it uses the body of the top-level document object,
         * so it's simply `document.body` most of the time.
         */
        container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
        /**
         * Direction of the text.
         * @default 'ltr'
         */
        direction: _propTypes.default.oneOf(["ltr", "rtl"]),
        /**
         * The `children` will be under the DOM hierarchy of the parent component.
         * @default false
         */
        disablePortal: _propTypes.default.bool,
        /**
         * Always keep the children in the DOM.
         * This prop can be useful in SEO situation or
         * when you want to maximize the responsiveness of the Popper.
         * @default false
         */
        keepMounted: _propTypes.default.bool,
        /**
         * Popper.js is based on a "plugin-like" architecture,
         * most of its features are fully encapsulated "modifiers".
         *
         * A modifier is a function that is called each time Popper.js needs to
         * compute the position of the popper.
         * For this reason, modifiers should be very performant to avoid bottlenecks.
         * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
         */
        modifiers: _propTypes.default.arrayOf(_propTypes.default.shape({
          data: _propTypes.default.object,
          effect: _propTypes.default.func,
          enabled: _propTypes.default.bool,
          fn: _propTypes.default.func,
          name: _propTypes.default.any,
          options: _propTypes.default.object,
          phase: _propTypes.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
          requires: _propTypes.default.arrayOf(_propTypes.default.string),
          requiresIfExists: _propTypes.default.arrayOf(_propTypes.default.string)
        })),
        /**
         * If `true`, the component is shown.
         */
        open: _propTypes.default.bool.isRequired,
        /**
         * Popper placement.
         * @default 'bottom'
         */
        placement: _propTypes.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        /**
         * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
         * @default {}
         */
        popperOptions: _propTypes.default.shape({
          modifiers: _propTypes.default.array,
          onFirstUpdate: _propTypes.default.func,
          placement: _propTypes.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
          strategy: _propTypes.default.oneOf(["absolute", "fixed"])
        }),
        /**
         * A ref that points to the used popper instance.
         */
        popperRef: _utils.refType,
        /**
         * The props used for each slot inside the Popper.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Popper.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        }),
        /**
         * Help supporting a react-transition-group/Transition component.
         * @default false
         */
        transition: _propTypes.default.bool
      } : void 0;
      var _default = Popper;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Popper/index.js
  var require_Popper2 = __commonJS({
    "node_modules/@mui/base/node/Popper/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Popper.default;
        }
      });
      Object.defineProperty(exports, "getPopperUtilityClass", {
        enumerable: true,
        get: function() {
          return _popperClasses.getPopperUtilityClass;
        }
      });
      Object.defineProperty(exports, "popperClasses", {
        enumerable: true,
        get: function() {
          return _popperClasses.default;
        }
      });
      var _Popper = _interopRequireDefault(require_Popper());
      var _popperClasses = _interopRequireWildcard(require_popperClasses());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Menu/Menu.js
  var require_Menu = __commonJS({
    "node_modules/@mui/base/node/Menu/Menu.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _menuClasses = require_menuClasses();
      var _useMenu = _interopRequireDefault(require_useMenu2());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _Popper = _interopRequireDefault(require_Popper2());
      var _useSlotProps = _interopRequireDefault(require_useSlotProps());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _MenuProvider = _interopRequireDefault(require_MenuProvider());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useUtilityClasses4(ownerState) {
        const {
          open
        } = ownerState;
        const slots = {
          root: ["root", open && "expanded"],
          listbox: ["listbox", open && "expanded"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_menuClasses.getMenuUtilityClass));
      }
      var Menu = /* @__PURE__ */ React16.forwardRef(function Menu2(props, forwardedRef) {
        var _slots$root, _slots$listbox;
        const {
          actions,
          anchorEl,
          children,
          defaultOpen,
          listboxId,
          onOpenChange,
          open: openProp,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const {
          contextValue,
          getListboxProps,
          dispatch,
          open
        } = (0, _useMenu.default)({
          defaultOpen,
          open: openProp,
          onOpenChange,
          listboxId
        });
        React16.useImperativeHandle(actions, () => ({
          dispatch
        }), [dispatch]);
        const ownerState = {
          ...props,
          open
        };
        const classes = useUtilityClasses4(ownerState);
        const Root = (_slots$root = slots.root) != null ? _slots$root : _Popper.default;
        const rootProps = (0, _useSlotProps.default)({
          elementType: Root,
          externalForwardedProps: other,
          externalSlotProps: slotProps.root,
          additionalProps: {
            anchorEl,
            open,
            keepMounted: true,
            role: void 0,
            ref: forwardedRef
          },
          className: classes.root,
          ownerState
        });
        const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
        const listboxProps = (0, _useSlotProps.default)({
          elementType: Listbox,
          getSlotProps: getListboxProps,
          externalSlotProps: slotProps.listbox,
          ownerState,
          className: classes.listbox
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
          ...rootProps,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Listbox, {
            ...listboxProps,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_MenuProvider.default, {
              value: contextValue,
              children
            })
          })
        });
      });
      true ? Menu.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * A ref with imperative actions.
         * It allows to select the first or last menu item.
         */
        actions: _utils.refType,
        /**
         * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
         * or a function that returns either.
         * It's used to set the position of the popper.
         */
        anchorEl: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]),
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * @ignore
         */
        defaultOpen: _propTypes.default.bool,
        /**
         * @ignore
         */
        listboxId: _propTypes.default.string,
        /**
         * Triggered when focus leaves the menu and the menu should close.
         */
        onOpenChange: _propTypes.default.func,
        /**
         * Controls whether the menu is displayed.
         * @default false
         */
        open: _propTypes.default.bool,
        /**
         * The props used for each slot inside the Menu.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Menu.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          listbox: _propTypes.default.elementType,
          root: _propTypes.default.elementType
        })
      } : void 0;
      var _default = Menu;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Menu/Menu.types.js
  var require_Menu_types = __commonJS({
    "node_modules/@mui/base/node/Menu/Menu.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Menu/index.js
  var require_Menu2 = __commonJS({
    "node_modules/@mui/base/node/Menu/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        menuClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Menu.default;
        }
      });
      Object.defineProperty(exports, "menuClasses", {
        enumerable: true,
        get: function() {
          return _menuClasses.default;
        }
      });
      var _Menu = _interopRequireDefault(require_Menu());
      var _menuClasses = _interopRequireWildcard(require_menuClasses());
      Object.keys(_menuClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _menuClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _menuClasses[key];
          }
        });
      });
      var _Menu2 = require_Menu_types();
      Object.keys(_Menu2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Menu2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Menu2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/MenuItem/menuItemClasses.js
  var require_menuItemClasses = __commonJS({
    "node_modules/@mui/base/node/MenuItem/menuItemClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getMenuItemUtilityClass = getMenuItemUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getMenuItemUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiMenuItem", slot);
      }
      var menuItemClasses = (0, _generateUtilityClasses.default)("MuiMenuItem", ["root", "disabled", "focusVisible"]);
      var _default = menuItemClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/utils/useCompoundItem.js
  var require_useCompoundItem = __commonJS({
    "node_modules/@mui/base/node/utils/useCompoundItem.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.useCompoundItem = useCompoundItem;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _useCompound = require_useCompound();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useCompoundItem(id, itemMetadata, missingKeyGenerator) {
        const context = React16.useContext(_useCompound.CompoundComponentContext);
        if (context === null) {
          throw new Error("useCompoundItem must be used within a useCompoundParent");
        }
        const {
          registerItem
        } = context;
        const [registeredId, setRegisteredId] = React16.useState(id);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          const {
            id: returnedId,
            deregister
          } = registerItem(id, itemMetadata, missingKeyGenerator);
          setRegisteredId(returnedId);
          return deregister;
        }, [registerItem, itemMetadata, missingKeyGenerator, id]);
        return {
          id: registeredId,
          index: registeredId !== void 0 ? context.getItemIndex(registeredId) : -1,
          totalItemCount: context.totalSubitemCount
        };
      }
    }
  });

  // node_modules/@mui/base/node/useMenuItem/useMenuItem.js
  var require_useMenuItem = __commonJS({
    "node_modules/@mui/base/node/useMenuItem/useMenuItem.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useMenuItem;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _useButton = _interopRequireDefault(require_useButton2());
      var _useList = require_useList2();
      var _useCompoundItem = require_useCompoundItem();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useMenuItem(params) {
        const {
          disabled = false,
          id: idParam,
          rootRef: externalRef,
          label
        } = params;
        const id = (0, _utils.unstable_useId)(idParam);
        const itemRef = React16.useRef(null);
        const itemMetadata = React16.useMemo(() => ({
          disabled,
          id: id != null ? id : "",
          label,
          ref: itemRef
        }), [disabled, id, label]);
        const {
          getRootProps: getListRootProps,
          highlighted,
          rootRef: listItemRefHandler
        } = (0, _useList.useListItem)({
          item: id
        });
        const {
          index,
          totalItemCount
        } = (0, _useCompoundItem.useCompoundItem)(id, itemMetadata);
        const {
          getRootProps: getButtonProps,
          focusVisible,
          rootRef: buttonRefHandler
        } = (0, _useButton.default)({
          disabled,
          focusableWhenDisabled: true
        });
        const handleRef = (0, _utils.unstable_useForkRef)(listItemRefHandler, buttonRefHandler, externalRef, itemRef);
        React16.useDebugValue({
          id,
          highlighted,
          disabled,
          label
        });
        if (id === void 0) {
          return {
            getRootProps: (otherHandlers = {}) => ({
              ...otherHandlers,
              ...getButtonProps(otherHandlers),
              role: "menuitem"
            }),
            disabled: false,
            focusVisible,
            highlighted: false,
            index: -1,
            totalItemCount: 0,
            rootRef: handleRef
          };
        }
        const getRootProps = (otherHandlers = {}) => {
          const resolvedButtonProps = {
            ...otherHandlers,
            ...getButtonProps(otherHandlers)
          };
          const resolvedMenuItemProps = {
            ...resolvedButtonProps,
            ...getListRootProps(resolvedButtonProps)
          };
          return {
            ...otherHandlers,
            ...resolvedButtonProps,
            ...resolvedMenuItemProps,
            role: "menuitem",
            ref: handleRef
          };
        };
        return {
          getRootProps,
          disabled,
          focusVisible,
          highlighted,
          index,
          totalItemCount,
          rootRef: handleRef
        };
      }
    }
  });

  // node_modules/@mui/base/node/useMenuItem/useMenuItem.types.js
  var require_useMenuItem_types = __commonJS({
    "node_modules/@mui/base/node/useMenuItem/useMenuItem.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useMenuItem/index.js
  var require_useMenuItem2 = __commonJS({
    "node_modules/@mui/base/node/useMenuItem/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useMenuItem.default;
        }
      });
      var _useMenuItem = _interopRequireDefault(require_useMenuItem());
      var _useMenuItem2 = require_useMenuItem_types();
      Object.keys(_useMenuItem2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useMenuItem2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useMenuItem2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/MenuItem/MenuItem.js
  var require_MenuItem = __commonJS({
    "node_modules/@mui/base/node/MenuItem/MenuItem.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _menuItemClasses = require_menuItemClasses();
      var _useMenuItem = _interopRequireDefault(require_useMenuItem2());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _useSlotProps = _interopRequireDefault(require_useSlotProps());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useUtilityClasses4(ownerState) {
        const {
          disabled,
          focusVisible
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_menuItemClasses.getMenuItemUtilityClass));
      }
      var MenuItem = /* @__PURE__ */ React16.forwardRef(function MenuItem2(props, forwardedRef) {
        var _slots$root;
        const {
          children,
          disabled: disabledProp = false,
          label,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const {
          getRootProps,
          disabled,
          focusVisible,
          highlighted
        } = (0, _useMenuItem.default)({
          disabled: disabledProp,
          rootRef: forwardedRef,
          label
        });
        const ownerState = {
          ...props,
          disabled,
          focusVisible,
          highlighted
        };
        const classes = useUtilityClasses4(ownerState);
        const Root = (_slots$root = slots.root) != null ? _slots$root : "li";
        const rootProps = (0, _useSlotProps.default)({
          elementType: Root,
          getSlotProps: getRootProps,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          className: classes.root,
          ownerState
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
          ...rootProps,
          children
        });
      });
      true ? MenuItem.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * @ignore
         */
        disabled: _propTypes.default.bool,
        /**
         * A text representation of the menu item's content.
         * Used for keyboard text navigation matching.
         */
        label: _propTypes.default.string,
        /**
         * The props used for each slot inside the MenuItem.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the MenuItem.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        })
      } : void 0;
      var _default = MenuItem;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/MenuItem/MenuItem.types.js
  var require_MenuItem_types = __commonJS({
    "node_modules/@mui/base/node/MenuItem/MenuItem.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/MenuItem/index.js
  var require_MenuItem2 = __commonJS({
    "node_modules/@mui/base/node/MenuItem/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        menuItemClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _MenuItem.default;
        }
      });
      Object.defineProperty(exports, "menuItemClasses", {
        enumerable: true,
        get: function() {
          return _menuItemClasses.default;
        }
      });
      var _MenuItem = _interopRequireDefault(require_MenuItem());
      var _MenuItem2 = require_MenuItem_types();
      Object.keys(_MenuItem2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MenuItem2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MenuItem2[key];
          }
        });
      });
      var _menuItemClasses = _interopRequireWildcard(require_menuItemClasses());
      Object.keys(_menuItemClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _menuItemClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _menuItemClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Modal/ModalManager.js
  var require_ModalManager = __commonJS({
    "node_modules/@mui/base/node/Modal/ModalManager.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ariaHidden = ariaHidden;
      exports.default = void 0;
      var _utils = require_utils();
      function isOverflowing(container) {
        const doc = (0, _utils.unstable_ownerDocument)(container);
        if (doc.body === container) {
          return (0, _utils.unstable_ownerWindow)(container).innerWidth > doc.documentElement.clientWidth;
        }
        return container.scrollHeight > container.clientHeight;
      }
      function ariaHidden(element, show) {
        if (show) {
          element.setAttribute("aria-hidden", "true");
        } else {
          element.removeAttribute("aria-hidden");
        }
      }
      function getPaddingRight(element) {
        return parseInt((0, _utils.unstable_ownerWindow)(element).getComputedStyle(element).paddingRight, 10) || 0;
      }
      function isAriaHiddenForbiddenOnElement(element) {
        const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
        const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
        const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
        return isForbiddenTagName || isInputHidden;
      }
      function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
        const blacklist = [mountElement, currentElement, ...elementsToExclude];
        [].forEach.call(container.children, (element) => {
          const isNotExcludedElement = blacklist.indexOf(element) === -1;
          const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
          if (isNotExcludedElement && isNotForbiddenElement) {
            ariaHidden(element, show);
          }
        });
      }
      function findIndexOf(items, callback) {
        let idx = -1;
        items.some((item, index) => {
          if (callback(item)) {
            idx = index;
            return true;
          }
          return false;
        });
        return idx;
      }
      function handleContainer(containerInfo, props) {
        const restoreStyle = [];
        const container = containerInfo.container;
        if (!props.disableScrollLock) {
          if (isOverflowing(container)) {
            const scrollbarSize = (0, _utils.unstable_getScrollbarSize)((0, _utils.unstable_ownerDocument)(container));
            restoreStyle.push({
              value: container.style.paddingRight,
              property: "padding-right",
              el: container
            });
            container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
            const fixedElements2 = (0, _utils.unstable_ownerDocument)(container).querySelectorAll(".mui-fixed");
            [].forEach.call(fixedElements2, (element) => {
              restoreStyle.push({
                value: element.style.paddingRight,
                property: "padding-right",
                el: element
              });
              element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
            });
          }
          let scrollContainer;
          if (container.parentNode instanceof DocumentFragment) {
            scrollContainer = (0, _utils.unstable_ownerDocument)(container).body;
          } else {
            const parent = container.parentElement;
            const containerWindow = (0, _utils.unstable_ownerWindow)(container);
            scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
          }
          restoreStyle.push({
            value: scrollContainer.style.overflow,
            property: "overflow",
            el: scrollContainer
          }, {
            value: scrollContainer.style.overflowX,
            property: "overflow-x",
            el: scrollContainer
          }, {
            value: scrollContainer.style.overflowY,
            property: "overflow-y",
            el: scrollContainer
          });
          scrollContainer.style.overflow = "hidden";
        }
        const restore = () => {
          restoreStyle.forEach(({
            value,
            el,
            property
          }) => {
            if (value) {
              el.style.setProperty(property, value);
            } else {
              el.style.removeProperty(property);
            }
          });
        };
        return restore;
      }
      function getHiddenSiblings(container) {
        const hiddenSiblings = [];
        [].forEach.call(container.children, (element) => {
          if (element.getAttribute("aria-hidden") === "true") {
            hiddenSiblings.push(element);
          }
        });
        return hiddenSiblings;
      }
      var ModalManager = class {
        constructor() {
          this.modals = [];
          this.containers = [];
        }
        add(modal, container) {
          let modalIndex = this.modals.indexOf(modal);
          if (modalIndex !== -1) {
            return modalIndex;
          }
          modalIndex = this.modals.length;
          this.modals.push(modal);
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, false);
          }
          const hiddenSiblings = getHiddenSiblings(container);
          ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
          const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
          if (containerIndex !== -1) {
            this.containers[containerIndex].modals.push(modal);
            return modalIndex;
          }
          this.containers.push({
            modals: [modal],
            container,
            restore: null,
            hiddenSiblings
          });
          return modalIndex;
        }
        mount(modal, props) {
          const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
          const containerInfo = this.containers[containerIndex];
          if (!containerInfo.restore) {
            containerInfo.restore = handleContainer(containerInfo, props);
          }
        }
        remove(modal, ariaHiddenState = true) {
          const modalIndex = this.modals.indexOf(modal);
          if (modalIndex === -1) {
            return modalIndex;
          }
          const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
          const containerInfo = this.containers[containerIndex];
          containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
          this.modals.splice(modalIndex, 1);
          if (containerInfo.modals.length === 0) {
            if (containerInfo.restore) {
              containerInfo.restore();
            }
            if (modal.modalRef) {
              ariaHidden(modal.modalRef, ariaHiddenState);
            }
            ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
            this.containers.splice(containerIndex, 1);
          } else {
            const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
            if (nextTop.modalRef) {
              ariaHidden(nextTop.modalRef, false);
            }
          }
          return modalIndex;
        }
        isTopModal(modal) {
          return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
        }
      };
      exports.default = ModalManager;
    }
  });

  // node_modules/@mui/base/node/Modal/modalClasses.js
  var require_modalClasses = __commonJS({
    "node_modules/@mui/base/node/Modal/modalClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getModalUtilityClass = getModalUtilityClass;
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      function getModalUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiModal", slot);
      }
      var modalClasses = (0, _generateUtilityClasses.default)("MuiModal", ["root", "hidden", "backdrop"]);
      var _default = modalClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Modal/Modal.js
  var require_Modal = __commonJS({
    "node_modules/@mui/base/node/Modal/Modal.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _Portal = _interopRequireDefault(require_Portal2());
      var _ModalManager = _interopRequireWildcard(require_ModalManager());
      var _FocusTrap = _interopRequireDefault(require_FocusTrap2());
      var _modalClasses = require_modalClasses();
      var _utils2 = require_utils2();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          open,
          exited
        } = ownerState;
        const slots = {
          root: ["root", !open && exited && "hidden"],
          backdrop: ["backdrop"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_modalClasses.getModalUtilityClass));
      };
      function getContainer(container) {
        return typeof container === "function" ? container() : container;
      }
      function getHasTransition(children) {
        return children ? children.props.hasOwnProperty("in") : false;
      }
      var defaultManager = new _ModalManager.default();
      var Modal = /* @__PURE__ */ React16.forwardRef(function Modal2(props, forwardedRef) {
        var _props$ariaHidden, _slots$root;
        const {
          children,
          closeAfterTransition = false,
          container,
          disableAutoFocus = false,
          disableEnforceFocus = false,
          disableEscapeKeyDown = false,
          disablePortal = false,
          disableRestoreFocus = false,
          disableScrollLock = false,
          hideBackdrop = false,
          keepMounted = false,
          // private
          manager: managerProp = defaultManager,
          onBackdropClick,
          onClose,
          onKeyDown,
          open,
          onTransitionEnter,
          onTransitionExited,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const manager = managerProp;
        const [exited, setExited] = React16.useState(!open);
        const modal = React16.useRef({});
        const mountNodeRef = React16.useRef(null);
        const modalRef = React16.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(modalRef, forwardedRef);
        const hasTransition = getHasTransition(children);
        const ariaHiddenProp = (_props$ariaHidden = props["aria-hidden"]) != null ? _props$ariaHidden : true;
        const getDoc = () => (0, _utils.unstable_ownerDocument)(mountNodeRef.current);
        const getModal = () => {
          modal.current.modalRef = modalRef.current;
          modal.current.mountNode = mountNodeRef.current;
          return modal.current;
        };
        const handleMounted = () => {
          manager.mount(getModal(), {
            disableScrollLock
          });
          if (modalRef.current) {
            modalRef.current.scrollTop = 0;
          }
        };
        const handleOpen = (0, _utils.unstable_useEventCallback)(() => {
          const resolvedContainer = getContainer(container) || getDoc().body;
          manager.add(getModal(), resolvedContainer);
          if (modalRef.current) {
            handleMounted();
          }
        });
        const isTopModal = React16.useCallback(() => manager.isTopModal(getModal()), [manager]);
        const handlePortalRef = (0, _utils.unstable_useEventCallback)((node2) => {
          mountNodeRef.current = node2;
          if (!node2 || !modalRef.current) {
            return;
          }
          if (open && isTopModal()) {
            handleMounted();
          } else {
            (0, _ModalManager.ariaHidden)(modalRef.current, ariaHiddenProp);
          }
        });
        const handleClose = React16.useCallback(() => {
          manager.remove(getModal(), ariaHiddenProp);
        }, [manager, ariaHiddenProp]);
        React16.useEffect(() => {
          return () => {
            handleClose();
          };
        }, [handleClose]);
        React16.useEffect(() => {
          if (open) {
            handleOpen();
          } else if (!hasTransition || !closeAfterTransition) {
            handleClose();
          }
        }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
        const ownerState = {
          ...props,
          closeAfterTransition,
          disableAutoFocus,
          disableEnforceFocus,
          disableEscapeKeyDown,
          disablePortal,
          disableRestoreFocus,
          disableScrollLock,
          exited,
          hideBackdrop,
          keepMounted
        };
        const classes = useUtilityClasses4(ownerState);
        const handleEnter = () => {
          setExited(false);
          if (onTransitionEnter) {
            onTransitionEnter();
          }
        };
        const handleExited = () => {
          setExited(true);
          if (onTransitionExited) {
            onTransitionExited();
          }
          if (closeAfterTransition) {
            handleClose();
          }
        };
        const handleBackdropClick = (event) => {
          if (event.target !== event.currentTarget) {
            return;
          }
          if (onBackdropClick) {
            onBackdropClick(event);
          }
          if (onClose) {
            onClose(event, "backdropClick");
          }
        };
        const handleKeyDown = (event) => {
          if (onKeyDown) {
            onKeyDown(event);
          }
          if (event.key !== "Escape" || !isTopModal()) {
            return;
          }
          if (!disableEscapeKeyDown) {
            event.stopPropagation();
            if (onClose) {
              onClose(event, "escapeKeyDown");
            }
          }
        };
        const childProps = {};
        if (children.props.tabIndex === void 0) {
          childProps.tabIndex = "-1";
        }
        if (hasTransition) {
          childProps.onEnter = (0, _utils.unstable_createChainedFunction)(handleEnter, children.props.onEnter);
          childProps.onExited = (0, _utils.unstable_createChainedFunction)(handleExited, children.props.onExited);
        }
        const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: handleRef,
            role: "presentation",
            onKeyDown: handleKeyDown
          },
          className: classes.root,
          ownerState
        });
        const BackdropComponent = slots.backdrop;
        const backdropProps = (0, _utils2.useSlotProps)({
          elementType: BackdropComponent,
          externalSlotProps: slotProps.backdrop,
          additionalProps: {
            "aria-hidden": true,
            onClick: handleBackdropClick,
            open
          },
          className: classes.backdrop,
          ownerState
        });
        if (!keepMounted && !open && (!hasTransition || exited)) {
          return null;
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(
          _Portal.default,
          {
            ref: handlePortalRef,
            container,
            disablePortal,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, {
              ...rootProps,
              children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackdropComponent, {
                ...backdropProps
              }) : null, /* @__PURE__ */ (0, _jsxRuntime.jsx)(_FocusTrap.default, {
                disableEnforceFocus,
                disableAutoFocus,
                disableRestoreFocus,
                isEnabled: isTopModal,
                open,
                children: /* @__PURE__ */ React16.cloneElement(children, childProps)
              })]
            })
          }
        );
      });
      true ? Modal.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * A single child content element.
         */
        children: _utils.elementAcceptingRef.isRequired,
        /**
         * When set to true the Modal waits until a nested Transition is completed before closing.
         * @default false
         */
        closeAfterTransition: _propTypes.default.bool,
        /**
         * An HTML element or function that returns one.
         * The `container` will have the portal children appended to it.
         *
         * By default, it uses the body of the top-level document object,
         * so it's simply `document.body` most of the time.
         */
        container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
        /**
         * If `true`, the modal will not automatically shift focus to itself when it opens, and
         * replace it to the last focused element when it closes.
         * This also works correctly with any modal children that have the `disableAutoFocus` prop.
         *
         * Generally this should never be set to `true` as it makes the modal less
         * accessible to assistive technologies, like screen readers.
         * @default false
         */
        disableAutoFocus: _propTypes.default.bool,
        /**
         * If `true`, the modal will not prevent focus from leaving the modal while open.
         *
         * Generally this should never be set to `true` as it makes the modal less
         * accessible to assistive technologies, like screen readers.
         * @default false
         */
        disableEnforceFocus: _propTypes.default.bool,
        /**
         * If `true`, hitting escape will not fire the `onClose` callback.
         * @default false
         */
        disableEscapeKeyDown: _propTypes.default.bool,
        /**
         * The `children` will be under the DOM hierarchy of the parent component.
         * @default false
         */
        disablePortal: _propTypes.default.bool,
        /**
         * If `true`, the modal will not restore focus to previously focused element once
         * modal is hidden or unmounted.
         * @default false
         */
        disableRestoreFocus: _propTypes.default.bool,
        /**
         * Disable the scroll lock behavior.
         * @default false
         */
        disableScrollLock: _propTypes.default.bool,
        /**
         * If `true`, the backdrop is not rendered.
         * @default false
         */
        hideBackdrop: _propTypes.default.bool,
        /**
         * Always keep the children in the DOM.
         * This prop can be useful in SEO situation or
         * when you want to maximize the responsiveness of the Modal.
         * @default false
         */
        keepMounted: _propTypes.default.bool,
        /**
         * Callback fired when the backdrop is clicked.
         * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
         */
        onBackdropClick: _propTypes.default.func,
        /**
         * Callback fired when the component requests to be closed.
         * The `reason` parameter can optionally be used to control the response to `onClose`.
         *
         * @param {object} event The event source of the callback.
         * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
         */
        onClose: _propTypes.default.func,
        /**
         * If `true`, the component is shown.
         */
        open: _propTypes.default.bool.isRequired,
        /**
         * The props used for each slot inside the Modal.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Modal.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          backdrop: _propTypes.default.elementType,
          root: _propTypes.default.elementType
        })
      } : void 0;
      var _default = Modal;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Modal/Modal.types.js
  var require_Modal_types = __commonJS({
    "node_modules/@mui/base/node/Modal/Modal.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Modal/index.js
  var require_Modal2 = __commonJS({
    "node_modules/@mui/base/node/Modal/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        ModalManager: true,
        modalClasses: true
      };
      Object.defineProperty(exports, "ModalManager", {
        enumerable: true,
        get: function() {
          return _ModalManager.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Modal.default;
        }
      });
      Object.defineProperty(exports, "modalClasses", {
        enumerable: true,
        get: function() {
          return _modalClasses.default;
        }
      });
      var _Modal = _interopRequireDefault(require_Modal());
      var _Modal2 = require_Modal_types();
      Object.keys(_Modal2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Modal2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Modal2[key];
          }
        });
      });
      var _ModalManager = _interopRequireWildcard(require_ModalManager());
      Object.keys(_ModalManager).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ModalManager[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ModalManager[key];
          }
        });
      });
      var _modalClasses = _interopRequireWildcard(require_modalClasses());
      Object.keys(_modalClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _modalClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _modalClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/NoSsr/NoSsr.js
  var require_NoSsr = __commonJS({
    "node_modules/@mui/base/node/NoSsr/NoSsr.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function NoSsr(props) {
        const {
          children,
          defer = false,
          fallback = null
        } = props;
        const [mountedState, setMountedState] = React16.useState(false);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (!defer) {
            setMountedState(true);
          }
        }, [defer]);
        React16.useEffect(() => {
          if (defer) {
            setMountedState(true);
          }
        }, [defer]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React16.Fragment, {
          children: mountedState ? children : fallback
        });
      }
      true ? NoSsr.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * You can wrap a node.
         */
        children: _propTypes.default.node,
        /**
         * If `true`, the component will not only prevent server-side rendering.
         * It will also defer the rendering of the children into a different screen frame.
         * @default false
         */
        defer: _propTypes.default.bool,
        /**
         * The fallback content to display.
         * @default null
         */
        fallback: _propTypes.default.node
      } : void 0;
      if (true) {
        NoSsr["propTypes"] = (0, _utils.exactProp)(NoSsr.propTypes);
      }
      var _default = NoSsr;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/NoSsr/NoSsr.types.js
  var require_NoSsr_types = __commonJS({
    "node_modules/@mui/base/node/NoSsr/NoSsr.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/NoSsr/index.js
  var require_NoSsr2 = __commonJS({
    "node_modules/@mui/base/node/NoSsr/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _NoSsr.default;
        }
      });
      var _NoSsr = _interopRequireDefault(require_NoSsr());
      var _NoSsr2 = require_NoSsr_types();
      Object.keys(_NoSsr2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _NoSsr2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _NoSsr2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/OptionGroup/optionGroupClasses.js
  var require_optionGroupClasses = __commonJS({
    "node_modules/@mui/base/node/OptionGroup/optionGroupClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getOptionGroupUtilityClass = getOptionGroupUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getOptionGroupUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiOptionGroup", slot);
      }
      var optionGroupClasses = (0, _generateUtilityClasses.default)("MuiOptionGroup", ["root", "disabled", "label", "list"]);
      var _default = optionGroupClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/OptionGroup/OptionGroup.js
  var require_OptionGroup = __commonJS({
    "node_modules/@mui/base/node/OptionGroup/OptionGroup.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _optionGroupClasses = require_optionGroupClasses();
      var _utils = require_utils2();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useUtilityClasses4(disabled) {
        const slots = {
          root: ["root", disabled && "disabled"],
          label: ["label"],
          list: ["list"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_optionGroupClasses.getOptionGroupUtilityClass));
      }
      var OptionGroup = /* @__PURE__ */ React16.forwardRef(function OptionGroup2(props, forwardedRef) {
        const {
          disabled = false,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const Root = (slots == null ? void 0 : slots.root) || "li";
        const Label = (slots == null ? void 0 : slots.label) || "span";
        const List = (slots == null ? void 0 : slots.list) || "ul";
        const classes = useUtilityClasses4(disabled);
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState: props,
          className: classes.root
        });
        const labelProps = (0, _utils.useSlotProps)({
          elementType: Label,
          externalSlotProps: slotProps.label,
          ownerState: props,
          className: classes.label
        });
        const listProps = (0, _utils.useSlotProps)({
          elementType: List,
          externalSlotProps: slotProps.list,
          ownerState: props,
          className: classes.list
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, {
          ...rootProps,
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Label, {
            ...labelProps,
            children: props.label
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(List, {
            ...listProps,
            children: props.children
          })]
        });
      });
      true ? OptionGroup.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * If `true` all the options in the group will be disabled.
         * @default false
         */
        disabled: _propTypes.default.bool,
        /**
         * The human-readable description of the group.
         */
        label: _propTypes.default.node,
        /**
         * The props used for each slot inside the Input.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          label: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          list: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the OptionGroup.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          label: _propTypes.default.elementType,
          list: _propTypes.default.elementType,
          root: _propTypes.default.elementType
        })
      } : void 0;
      var _default = OptionGroup;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/OptionGroup/OptionGroup.types.js
  var require_OptionGroup_types = __commonJS({
    "node_modules/@mui/base/node/OptionGroup/OptionGroup.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/OptionGroup/index.js
  var require_OptionGroup2 = __commonJS({
    "node_modules/@mui/base/node/OptionGroup/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        optionGroupClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _OptionGroup.default;
        }
      });
      Object.defineProperty(exports, "optionGroupClasses", {
        enumerable: true,
        get: function() {
          return _optionGroupClasses.default;
        }
      });
      var _OptionGroup = _interopRequireDefault(require_OptionGroup());
      var _OptionGroup2 = require_OptionGroup_types();
      Object.keys(_OptionGroup2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _OptionGroup2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _OptionGroup2[key];
          }
        });
      });
      var _optionGroupClasses = _interopRequireWildcard(require_optionGroupClasses());
      Object.keys(_optionGroupClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _optionGroupClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _optionGroupClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Option/optionClasses.js
  var require_optionClasses = __commonJS({
    "node_modules/@mui/base/node/Option/optionClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getOptionUtilityClass = getOptionUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getOptionUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiOption", slot);
      }
      var optionClasses = (0, _generateUtilityClasses.default)("MuiOption", ["root", "disabled", "selected", "highlighted"]);
      var _default = optionClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useOption/useOption.js
  var require_useOption = __commonJS({
    "node_modules/@mui/base/node/useOption/useOption.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useOption;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _useList = require_useList2();
      var _useCompoundItem = require_useCompoundItem();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useOption(params) {
        const {
          value,
          label,
          disabled,
          rootRef: optionRefParam,
          id: idParam
        } = params;
        const {
          getRootProps: getListItemProps,
          rootRef: listItemRefHandler,
          highlighted,
          selected
        } = (0, _useList.useListItem)({
          item: value
        });
        const id = (0, _utils.unstable_useId)(idParam);
        const optionRef = React16.useRef(null);
        const selectOption = React16.useMemo(() => ({
          disabled,
          label,
          value,
          ref: optionRef,
          id
        }), [disabled, label, value, id]);
        const {
          index
        } = (0, _useCompoundItem.useCompoundItem)(value, selectOption);
        const handleRef = (0, _utils.unstable_useForkRef)(optionRefParam, optionRef, listItemRefHandler);
        return {
          getRootProps: (otherHandlers = {}) => ({
            ...otherHandlers,
            ...getListItemProps(otherHandlers),
            id,
            ref: handleRef,
            role: "option",
            "aria-selected": selected
          }),
          highlighted,
          index,
          selected,
          rootRef: handleRef
        };
      }
    }
  });

  // node_modules/@mui/base/node/useOption/useOption.types.js
  var require_useOption_types = __commonJS({
    "node_modules/@mui/base/node/useOption/useOption.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useOption/index.js
  var require_useOption2 = __commonJS({
    "node_modules/@mui/base/node/useOption/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useOption.default;
        }
      });
      var _useOption = _interopRequireDefault(require_useOption());
      var _useOption2 = require_useOption_types();
      Object.keys(_useOption2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useOption2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useOption2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/Option/Option.js
  var require_Option = __commonJS({
    "node_modules/@mui/base/node/Option/Option.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _optionClasses = require_optionClasses();
      var _utils2 = require_utils2();
      var _useOption = _interopRequireDefault(require_useOption2());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useUtilityClasses4(ownerState) {
        const {
          disabled,
          highlighted,
          selected
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_optionClasses.getOptionUtilityClass));
      }
      var Option = /* @__PURE__ */ React16.forwardRef(function Option2(props, forwardedRef) {
        var _slots$root, _optionRef$current;
        const {
          children,
          disabled = false,
          label,
          slotProps = {},
          slots = {},
          value,
          ...other
        } = props;
        const Root = (_slots$root = slots.root) != null ? _slots$root : "li";
        const optionRef = React16.useRef(null);
        const combinedRef = (0, _utils.unstable_useForkRef)(optionRef, forwardedRef);
        const computedLabel = label != null ? label : typeof children === "string" ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;
        const {
          getRootProps,
          selected,
          highlighted,
          index
        } = (0, _useOption.default)({
          disabled,
          label: computedLabel,
          rootRef: combinedRef,
          value
        });
        const ownerState = {
          ...props,
          disabled,
          highlighted,
          index,
          selected
        };
        const classes = useUtilityClasses4(ownerState);
        const rootProps = (0, _utils2.useSlotProps)({
          getSlotProps: getRootProps,
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          className: classes.root,
          ownerState
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
          ...rootProps,
          children
        });
      });
      true ? Option.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * If `true`, the option will be disabled.
         * @default false
         */
        disabled: _propTypes.default.bool,
        /**
         * A text representation of the option's content.
         * Used for keyboard text navigation matching.
         */
        label: _propTypes.default.string,
        /**
         * The props used for each slot inside the Option.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Option.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        }),
        /**
         * The value of the option.
         */
        value: _propTypes.default.any.isRequired
      } : void 0;
      var _default = /* @__PURE__ */ React16.memo(Option);
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Option/Option.types.js
  var require_Option_types = __commonJS({
    "node_modules/@mui/base/node/Option/Option.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Option/index.js
  var require_Option2 = __commonJS({
    "node_modules/@mui/base/node/Option/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        optionClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Option.default;
        }
      });
      Object.defineProperty(exports, "optionClasses", {
        enumerable: true,
        get: function() {
          return _optionClasses.default;
        }
      });
      var _Option = _interopRequireDefault(require_Option());
      var _Option2 = require_Option_types();
      Object.keys(_Option2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Option2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Option2[key];
          }
        });
      });
      var _optionClasses = _interopRequireWildcard(require_optionClasses());
      Object.keys(_optionClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _optionClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _optionClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/useSelect/useSelect.types.js
  var require_useSelect_types = __commonJS({
    "node_modules/@mui/base/node/useSelect/useSelect.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SelectActionTypes = void 0;
      var SelectActionTypes = {
        buttonClick: "buttonClick"
      };
      exports.SelectActionTypes = SelectActionTypes;
    }
  });

  // node_modules/@mui/base/node/useSelect/defaultOptionStringifier.js
  var require_defaultOptionStringifier = __commonJS({
    "node_modules/@mui/base/node/useSelect/defaultOptionStringifier.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var defaultOptionStringifier = (option) => {
        const {
          label,
          value
        } = option;
        if (typeof label === "string") {
          return label;
        }
        if (typeof value === "string") {
          return value;
        }
        return String(option);
      };
      var _default = defaultOptionStringifier;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useSelect/selectReducer.js
  var require_selectReducer = __commonJS({
    "node_modules/@mui/base/node/useSelect/selectReducer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = selectReducer;
      var _useList = require_useList2();
      var _useSelect = require_useSelect_types();
      function selectReducer(state, action) {
        const {
          open
        } = state;
        const {
          context: {
            selectionMode
          }
        } = action;
        if (action.type === _useSelect.SelectActionTypes.buttonClick) {
          var _state$selectedValues;
          const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : (0, _useList.moveHighlight)(null, "start", action.context);
          return {
            ...state,
            open: !open,
            highlightedValue: !open ? itemToHighlight : null
          };
        }
        const newState = (0, _useList.listReducer)(state, action);
        switch (action.type) {
          case _useList.ListActionTypes.keyDown:
            if (state.open) {
              if (action.event.key === "Escape") {
                return {
                  ...newState,
                  open: false
                };
              }
              if (selectionMode === "single" && (action.event.key === "Enter" || action.event.key === " ")) {
                return {
                  ...newState,
                  open: false
                };
              }
            } else {
              if (action.event.key === "Enter" || action.event.key === " " || action.event.key === "ArrowDown") {
                var _state$selectedValues2;
                return {
                  ...state,
                  open: true,
                  highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : (0, _useList.moveHighlight)(null, "start", action.context)
                };
              }
              if (action.event.key === "ArrowUp") {
                var _state$selectedValues3;
                return {
                  ...state,
                  open: true,
                  highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : (0, _useList.moveHighlight)(null, "end", action.context)
                };
              }
            }
            break;
          case _useList.ListActionTypes.itemClick:
            if (selectionMode === "single") {
              return {
                ...newState,
                open: false
              };
            }
            break;
          case _useList.ListActionTypes.blur:
            return {
              ...newState,
              open: false
            };
          default:
            return newState;
        }
        return newState;
      }
    }
  });

  // node_modules/@mui/base/node/utils/combineHooksSlotProps.js
  var require_combineHooksSlotProps = __commonJS({
    "node_modules/@mui/base/node/utils/combineHooksSlotProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = combineHooksSlotProps;
      function combineHooksSlotProps(getFirstProps, getSecondProps) {
        return (external) => {
          const firstResult = {
            ...external,
            ...getFirstProps(external)
          };
          const result = {
            ...firstResult,
            ...getSecondProps(firstResult)
          };
          return result;
        };
      }
    }
  });

  // node_modules/@mui/base/node/useSelect/useSelect.js
  var require_useSelect = __commonJS({
    "node_modules/@mui/base/node/useSelect/useSelect.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _useButton = _interopRequireDefault(require_useButton2());
      var _useSelect = require_useSelect_types();
      var _useList = _interopRequireDefault(require_useList2());
      var _defaultOptionStringifier = _interopRequireDefault(require_defaultOptionStringifier());
      var _useCompound = require_useCompound();
      var _selectReducer = _interopRequireDefault(require_selectReducer());
      var _combineHooksSlotProps = _interopRequireDefault(require_combineHooksSlotProps());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function preventDefault(event) {
        event.preventDefault();
      }
      function useSelect(props) {
        const {
          buttonRef: buttonRefProp,
          defaultOpen = false,
          defaultValue: defaultValueProp,
          disabled = false,
          listboxId: listboxIdProp,
          listboxRef: listboxRefProp,
          multiple = false,
          onChange,
          onHighlightChange,
          onOpenChange,
          open: openProp,
          options: optionsParam,
          getOptionAsString = _defaultOptionStringifier.default,
          value: valueProp
        } = props;
        const buttonRef = React16.useRef(null);
        const handleButtonRef = (0, _utils.unstable_useForkRef)(buttonRefProp, buttonRef);
        const listboxRef = React16.useRef(null);
        const listboxId = (0, _utils.unstable_useId)(listboxIdProp);
        let defaultValue;
        if (valueProp === void 0 && defaultValueProp === void 0) {
          defaultValue = [];
        } else if (defaultValueProp !== void 0) {
          if (multiple) {
            defaultValue = defaultValueProp;
          } else {
            defaultValue = defaultValueProp == null ? [] : [defaultValueProp];
          }
        }
        const value = React16.useMemo(() => {
          if (valueProp !== void 0) {
            if (multiple) {
              return valueProp;
            }
            return valueProp == null ? [] : [valueProp];
          }
          return void 0;
        }, [valueProp, multiple]);
        const {
          subitems,
          contextValue: compoundComponentContextValue
        } = (0, _useCompound.useCompoundParent)();
        const options = React16.useMemo(() => {
          if (optionsParam != null) {
            return new Map(optionsParam.map((option, index) => [option.value, {
              value: option.value,
              label: option.label,
              disabled: option.disabled,
              ref: /* @__PURE__ */ React16.createRef(),
              id: `${listboxId}_${index}`
            }]));
          }
          return subitems;
        }, [optionsParam, subitems, listboxId]);
        const handleListboxRef = (0, _utils.unstable_useForkRef)(listboxRefProp, listboxRef);
        const {
          getRootProps: getButtonRootProps,
          active: buttonActive,
          focusVisible: buttonFocusVisible,
          rootRef: mergedButtonRef
        } = (0, _useButton.default)({
          disabled,
          rootRef: handleButtonRef
        });
        const optionValues = React16.useMemo(() => Array.from(options.keys()), [options]);
        const isItemDisabled = React16.useCallback((valueToCheck) => {
          var _option$disabled;
          const option = options.get(valueToCheck);
          return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;
        }, [options]);
        const stringifyOption = React16.useCallback((valueToCheck) => {
          const option = options.get(valueToCheck);
          if (!option) {
            return "";
          }
          return getOptionAsString(option);
        }, [options, getOptionAsString]);
        const controlledState = React16.useMemo(() => ({
          selectedValues: value,
          open: openProp
        }), [value, openProp]);
        const getItemId = React16.useCallback((itemValue) => {
          var _options$get;
          return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;
        }, [options]);
        const handleSelectionChange = React16.useCallback((event, newValues) => {
          if (multiple) {
            onChange == null ? void 0 : onChange(event, newValues);
          } else {
            var _newValues$;
            onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);
          }
        }, [multiple, onChange]);
        const handleHighlightChange = React16.useCallback((event, newValue) => {
          onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);
        }, [onHighlightChange]);
        const handleStateChange = React16.useCallback((event, field, fieldValue) => {
          if (field === "open") {
            onOpenChange == null ? void 0 : onOpenChange(fieldValue);
            if (fieldValue === false && (event == null ? void 0 : event.type) !== "blur") {
              var _buttonRef$current;
              (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
            }
          }
        }, [onOpenChange]);
        const useListParameters = {
          getInitialState: () => {
            var _defaultValue;
            return {
              highlightedValue: null,
              selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],
              open: defaultOpen
            };
          },
          getItemId,
          controlledProps: controlledState,
          isItemDisabled,
          rootRef: mergedButtonRef,
          onChange: handleSelectionChange,
          onHighlightChange: handleHighlightChange,
          onStateChange: handleStateChange,
          reducerActionContext: React16.useMemo(() => ({
            multiple
          }), [multiple]),
          items: optionValues,
          getItemAsString: stringifyOption,
          selectionMode: multiple ? "multiple" : "single",
          stateReducer: _selectReducer.default
        };
        const {
          dispatch,
          getRootProps: getListboxRootProps,
          contextValue: listContextValue,
          state: {
            open,
            highlightedValue: highlightedOption,
            selectedValues: selectedOptions
          },
          rootRef: mergedListRootRef
        } = (0, _useList.default)(useListParameters);
        const createHandleButtonClick = (otherHandlers) => (event) => {
          var _otherHandlers$onClic;
          otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
          if (!event.defaultMuiPrevented) {
            const action = {
              type: _useSelect.SelectActionTypes.buttonClick,
              event
            };
            dispatch(action);
          }
        };
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (highlightedOption != null) {
            var _options$get2;
            const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;
            if (!listboxRef.current || !(optionRef != null && optionRef.current)) {
              return;
            }
            const listboxClientRect = listboxRef.current.getBoundingClientRect();
            const optionClientRect = optionRef.current.getBoundingClientRect();
            if (optionClientRect.top < listboxClientRect.top) {
              listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
            } else if (optionClientRect.bottom > listboxClientRect.bottom) {
              listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
            }
          }
        }, [highlightedOption, options]);
        const getOptionMetadata = React16.useCallback((optionValue) => options.get(optionValue), [options]);
        const getSelectTriggerProps = (otherHandlers = {}) => {
          return {
            ...otherHandlers,
            onClick: createHandleButtonClick(otherHandlers),
            ref: mergedListRootRef,
            role: "combobox",
            "aria-expanded": open,
            "aria-controls": listboxId
          };
        };
        const getButtonProps = (otherHandlers = {}) => {
          const listboxAndButtonProps = (0, _combineHooksSlotProps.default)(getButtonRootProps, getListboxRootProps);
          const combinedProps = (0, _combineHooksSlotProps.default)(listboxAndButtonProps, getSelectTriggerProps);
          return combinedProps(otherHandlers);
        };
        const getListboxProps = (otherHandlers = {}) => {
          return {
            ...otherHandlers,
            id: listboxId,
            role: "listbox",
            "aria-multiselectable": multiple ? "true" : void 0,
            ref: handleListboxRef,
            onMouseDown: preventDefault
            // to prevent the button from losing focus when interacting with the listbox
          };
        };
        React16.useDebugValue({
          selectedOptions,
          highlightedOption,
          open
        });
        const contextValue = React16.useMemo(() => ({
          ...listContextValue,
          ...compoundComponentContextValue
        }), [listContextValue, compoundComponentContextValue]);
        let selectValue;
        if (props.multiple) {
          selectValue = selectedOptions;
        } else {
          selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;
        }
        return {
          buttonActive,
          buttonFocusVisible,
          buttonRef: mergedButtonRef,
          contextValue,
          disabled,
          dispatch,
          getButtonProps,
          getListboxProps,
          getOptionMetadata,
          listboxRef: mergedListRootRef,
          open,
          options: optionValues,
          value: selectValue,
          highlightedOption
        };
      }
      var _default = useSelect;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useSelect/SelectProvider.js
  var require_SelectProvider = __commonJS({
    "node_modules/@mui/base/node/useSelect/SelectProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = SelectProvider;
      var React16 = _interopRequireWildcard(require_react());
      var _ListContext = require_ListContext();
      var _useCompound = require_useCompound();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function SelectProvider(props) {
        const {
          value,
          children
        } = props;
        const {
          dispatch,
          getItemIndex,
          getItemState,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler,
          registerItem,
          totalSubitemCount
        } = value;
        const listContextValue = React16.useMemo(() => ({
          dispatch,
          getItemState,
          getItemIndex,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler
        }), [dispatch, getItemIndex, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
        const compoundComponentContextValue = React16.useMemo(() => ({
          getItemIndex,
          registerItem,
          totalSubitemCount
        }), [registerItem, getItemIndex, totalSubitemCount]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_useCompound.CompoundComponentContext.Provider, {
          value: compoundComponentContextValue,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ListContext.ListContext.Provider, {
            value: listContextValue,
            children
          })
        });
      }
    }
  });

  // node_modules/@mui/base/node/useSelect/index.js
  var require_useSelect2 = __commonJS({
    "node_modules/@mui/base/node/useSelect/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        SelectProvider: true
      };
      Object.defineProperty(exports, "SelectProvider", {
        enumerable: true,
        get: function() {
          return _SelectProvider.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useSelect.default;
        }
      });
      var _useSelect = _interopRequireDefault(require_useSelect());
      var _useSelect2 = require_useSelect_types();
      Object.keys(_useSelect2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSelect2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSelect2[key];
          }
        });
      });
      var _SelectProvider = _interopRequireWildcard(require_SelectProvider());
      Object.keys(_SelectProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SelectProvider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SelectProvider[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Select/selectClasses.js
  var require_selectClasses = __commonJS({
    "node_modules/@mui/base/node/Select/selectClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSelectUtilityClass = getSelectUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getSelectUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSelect", slot);
      }
      var selectClasses = (0, _generateUtilityClasses.default)("MuiSelect", ["root", "button", "listbox", "popper", "active", "expanded", "disabled", "focusVisible"]);
      var _default = selectClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Select/Select.js
  var require_Select = __commonJS({
    "node_modules/@mui/base/node/Select/Select.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _useSelect = _interopRequireDefault(require_useSelect2());
      var _utils2 = require_utils2();
      var _Popper = _interopRequireDefault(require_Popper2());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _selectClasses = require_selectClasses();
      var _defaultOptionStringifier = _interopRequireDefault(require_defaultOptionStringifier());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _SelectProvider = _interopRequireDefault(require_SelectProvider());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function defaultRenderValue(selectedOptions) {
        var _selectedOptions$labe;
        if (Array.isArray(selectedOptions)) {
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React16.Fragment, {
            children: selectedOptions.map((o) => o.label).join(", ")
          });
        }
        return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : "";
      }
      function defaultFormValueProvider(selectedOption) {
        if (Array.isArray(selectedOption)) {
          if (selectedOption.length === 0) {
            return "";
          }
          if (selectedOption.every((o) => typeof o.value === "string" || typeof o.value === "number" || typeof o.value === "boolean")) {
            return selectedOption.map((o) => String(o.value));
          }
          return JSON.stringify(selectedOption.map((o) => o.value));
        }
        if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
          return "";
        }
        if (typeof selectedOption.value === "string" || typeof selectedOption.value === "number") {
          return selectedOption.value;
        }
        return JSON.stringify(selectedOption.value);
      }
      function useUtilityClasses4(ownerState) {
        const {
          active,
          disabled,
          open,
          focusVisible
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
          listbox: ["listbox", disabled && "disabled"],
          popper: ["popper"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_selectClasses.getSelectUtilityClass));
      }
      var Select = /* @__PURE__ */ React16.forwardRef(function Select2(props, forwardedRef) {
        var _slots$root, _slots$listbox, _slots$popper;
        const {
          autoFocus,
          children,
          defaultValue,
          defaultListboxOpen = false,
          disabled: disabledProp,
          getSerializedValue = defaultFormValueProvider,
          listboxId,
          listboxOpen: listboxOpenProp,
          multiple = false,
          name,
          onChange,
          onListboxOpenChange,
          getOptionAsString = _defaultOptionStringifier.default,
          renderValue: renderValueProp,
          slotProps = {},
          slots = {},
          value: valueProp,
          ...other
        } = props;
        const renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue;
        const [buttonDefined, setButtonDefined] = React16.useState(false);
        const buttonRef = React16.useRef(null);
        const listboxRef = React16.useRef(null);
        const Button = (_slots$root = slots.root) != null ? _slots$root : "button";
        const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
        const PopperComponent = (_slots$popper = slots.popper) != null ? _slots$popper : _Popper.default;
        const handleButtonRefChange = React16.useCallback((element) => {
          setButtonDefined(element != null);
        }, []);
        const handleButtonRef = (0, _utils.unstable_useForkRef)(forwardedRef, buttonRef, handleButtonRefChange);
        React16.useEffect(() => {
          if (autoFocus) {
            buttonRef.current.focus();
          }
        }, [autoFocus]);
        const {
          buttonActive,
          buttonFocusVisible,
          contextValue,
          disabled,
          getButtonProps,
          getListboxProps,
          getOptionMetadata,
          value,
          open
        } = (0, _useSelect.default)({
          buttonRef: handleButtonRef,
          defaultOpen: defaultListboxOpen,
          defaultValue,
          disabled: disabledProp,
          listboxId,
          multiple,
          open: listboxOpenProp,
          onChange,
          onOpenChange: onListboxOpenChange,
          getOptionAsString,
          value: valueProp
        });
        const ownerState = {
          ...props,
          active: buttonActive,
          defaultListboxOpen,
          disabled,
          focusVisible: buttonFocusVisible,
          open,
          multiple,
          renderValue,
          value
        };
        const classes = useUtilityClasses4(ownerState);
        const buttonProps = (0, _utils2.useSlotProps)({
          elementType: Button,
          getSlotProps: getButtonProps,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          ownerState,
          className: classes.root
        });
        const listboxProps = (0, _utils2.useSlotProps)({
          elementType: ListboxRoot,
          getSlotProps: getListboxProps,
          externalSlotProps: slotProps.listbox,
          additionalProps: {
            ref: listboxRef
          },
          ownerState,
          className: classes.listbox
        });
        const popperProps = (0, _utils2.useSlotProps)({
          elementType: PopperComponent,
          externalSlotProps: slotProps.popper,
          additionalProps: {
            anchorEl: buttonRef.current,
            keepMounted: true,
            open,
            placement: "bottom-start",
            role: void 0
          },
          ownerState,
          className: classes.popper
        });
        let selectedOptionsMetadata;
        if (multiple) {
          selectedOptionsMetadata = value.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);
        } else {
          var _getOptionMetadata;
          selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React16.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Button, {
            ...buttonProps,
            children: renderValue(selectedOptionsMetadata)
          }), buttonDefined && /* @__PURE__ */ (0, _jsxRuntime.jsx)(PopperComponent, {
            ...popperProps,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(ListboxRoot, {
              ...listboxProps,
              children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_SelectProvider.default, {
                value: contextValue,
                children
              })
            })
          }), name && /* @__PURE__ */ (0, _jsxRuntime.jsx)("input", {
            type: "hidden",
            name,
            value: getSerializedValue(selectedOptionsMetadata)
          })]
        });
      });
      true ? Select.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * If `true`, the select element is focused during the first mount
         * @default false
         */
        autoFocus: _propTypes.default.bool,
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * If `true`, the select will be initially open.
         * @default false
         */
        defaultListboxOpen: _propTypes.default.bool,
        /**
         * The default selected value. Use when the component is not controlled.
         */
        defaultValue: _propTypes.default.any,
        /**
         * If `true`, the select is disabled.
         * @default false
         */
        disabled: _propTypes.default.bool,
        /**
         * A function used to convert the option label to a string.
         * It's useful when labels are elements and need to be converted to plain text
         * to enable navigation using character keys on a keyboard.
         *
         * @default defaultOptionStringifier
         */
        getOptionAsString: _propTypes.default.func,
        /**
         * A function to convert the currently selected value to a string.
         * Used to set a value of a hidden input associated with the select,
         * so that the selected value can be posted with a form.
         */
        getSerializedValue: _propTypes.default.func,
        /**
         * `id` attribute of the listbox element.
         */
        listboxId: _propTypes.default.string,
        /**
         * Controls the open state of the select's listbox.
         * @default undefined
         */
        listboxOpen: _propTypes.default.bool,
        /**
         * If `true`, selecting multiple values is allowed.
         * This affects the type of the `value`, `defaultValue`, and `onChange` props.
         *
         * @default false
         */
        multiple: _propTypes.default.bool,
        /**
         * Name of the element. For example used by the server to identify the fields in form submits.
         * If the name is provided, the component will render a hidden input element that can be submitted to a server.
         */
        name: _propTypes.default.string,
        /**
         * Callback fired when an option is selected.
         */
        onChange: _propTypes.default.func,
        /**
         * Callback fired when the component requests to be opened.
         * Use in controlled mode (see listboxOpen).
         */
        onListboxOpenChange: _propTypes.default.func,
        /**
         * Function that customizes the rendering of the selected value.
         */
        renderValue: _propTypes.default.func,
        /**
         * The props used for each slot inside the Input.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          popper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Select.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          listbox: _propTypes.default.elementType,
          popper: _propTypes.default.elementType,
          root: _propTypes.default.elementType
        }),
        /**
         * The selected value.
         * Set to `null` to deselect all options.
         */
        value: _propTypes.default.any
      } : void 0;
      var _default = Select;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Select/Select.types.js
  var require_Select_types = __commonJS({
    "node_modules/@mui/base/node/Select/Select.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Select/index.js
  var require_Select2 = __commonJS({
    "node_modules/@mui/base/node/Select/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        selectClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Select.default;
        }
      });
      Object.defineProperty(exports, "selectClasses", {
        enumerable: true,
        get: function() {
          return _selectClasses.default;
        }
      });
      var _Select = _interopRequireDefault(require_Select());
      var _selectClasses = _interopRequireWildcard(require_selectClasses());
      Object.keys(_selectClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _selectClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _selectClasses[key];
          }
        });
      });
      var _Select2 = require_Select_types();
      Object.keys(_Select2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Select2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Select2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Slider/sliderClasses.js
  var require_sliderClasses = __commonJS({
    "node_modules/@mui/base/node/Slider/sliderClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSliderUtilityClass = getSliderUtilityClass;
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      function getSliderUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSlider", slot);
      }
      var sliderClasses = (0, _generateUtilityClasses.default)("MuiSlider", ["root", "active", "focusVisible", "disabled", "dragging", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "markLabelActive", "thumb"]);
      var _default = sliderClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useSlider/useSlider.js
  var require_useSlider = __commonJS({
    "node_modules/@mui/base/node/useSlider/useSlider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Identity = void 0;
      exports.default = useSlider;
      exports.valueToPercent = valueToPercent;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _utils2 = require_utils2();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
      function asc(a, b) {
        return a - b;
      }
      function clamp(value, min, max) {
        if (value == null) {
          return min;
        }
        return Math.min(Math.max(min, value), max);
      }
      function findClosest(values, currentValue) {
        var _values$reduce;
        const {
          index: closestIndex
        } = (_values$reduce = values.reduce((acc, value, index) => {
          const distance = Math.abs(currentValue - value);
          if (acc === null || distance < acc.distance || distance === acc.distance) {
            return {
              distance,
              index
            };
          }
          return acc;
        }, null)) != null ? _values$reduce : {};
        return closestIndex;
      }
      function trackFinger(event, touchId) {
        if (touchId.current !== void 0 && event.changedTouches) {
          const touchEvent = event;
          for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
            const touch = touchEvent.changedTouches[i];
            if (touch.identifier === touchId.current) {
              return {
                x: touch.clientX,
                y: touch.clientY
              };
            }
          }
          return false;
        }
        return {
          x: event.clientX,
          y: event.clientY
        };
      }
      function valueToPercent(value, min, max) {
        return (value - min) * 100 / (max - min);
      }
      function percentToValue(percent, min, max) {
        return (max - min) * percent + min;
      }
      function getDecimalPrecision(num) {
        if (Math.abs(num) < 1) {
          const parts = num.toExponential().split("e-");
          const matissaDecimalPart = parts[0].split(".")[1];
          return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
        }
        const decimalPart = num.toString().split(".")[1];
        return decimalPart ? decimalPart.length : 0;
      }
      function roundValueToStep(value, step, min) {
        const nearest = Math.round((value - min) / step) * step + min;
        return Number(nearest.toFixed(getDecimalPrecision(step)));
      }
      function setValueIndex({
        values,
        newValue,
        index
      }) {
        const output = values.slice();
        output[index] = newValue;
        return output.sort(asc);
      }
      function focusThumb({
        sliderRef,
        activeIndex,
        setActive
      }) {
        var _sliderRef$current, _doc$activeElement;
        const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
        if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
          var _sliderRef$current2;
          (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
        }
        if (setActive) {
          setActive(activeIndex);
        }
      }
      function areValuesEqual(newValue, oldValue) {
        if (typeof newValue === "number" && typeof oldValue === "number") {
          return newValue === oldValue;
        }
        if (typeof newValue === "object" && typeof oldValue === "object") {
          return (0, _utils2.areArraysEqual)(newValue, oldValue);
        }
        return false;
      }
      var axisProps = {
        horizontal: {
          offset: (percent) => ({
            left: `${percent}%`
          }),
          leap: (percent) => ({
            width: `${percent}%`
          })
        },
        "horizontal-reverse": {
          offset: (percent) => ({
            right: `${percent}%`
          }),
          leap: (percent) => ({
            width: `${percent}%`
          })
        },
        vertical: {
          offset: (percent) => ({
            bottom: `${percent}%`
          }),
          leap: (percent) => ({
            height: `${percent}%`
          })
        }
      };
      var Identity = (x) => x;
      exports.Identity = Identity;
      var cachedSupportsTouchActionNone;
      function doesSupportTouchActionNone() {
        if (cachedSupportsTouchActionNone === void 0) {
          if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
            cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
          } else {
            cachedSupportsTouchActionNone = true;
          }
        }
        return cachedSupportsTouchActionNone;
      }
      function useSlider(parameters) {
        const {
          "aria-labelledby": ariaLabelledby,
          defaultValue,
          disabled = false,
          disableSwap = false,
          isRtl = false,
          marks: marksProp = false,
          max = 100,
          min = 0,
          name,
          onChange,
          onChangeCommitted,
          orientation = "horizontal",
          rootRef: ref,
          scale = Identity,
          step = 1,
          tabIndex,
          value: valueProp
        } = parameters;
        const touchId = React16.useRef();
        const [active, setActive] = React16.useState(-1);
        const [open, setOpen] = React16.useState(-1);
        const [dragging, setDragging] = React16.useState(false);
        const moveCount = React16.useRef(0);
        const [valueDerived, setValueState] = (0, _utils.unstable_useControlled)({
          controlled: valueProp,
          default: defaultValue != null ? defaultValue : min,
          name: "Slider"
        });
        const handleChange = onChange && ((event, value, thumbIndex) => {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value,
              name
            }
          });
          onChange(clonedEvent, value, thumbIndex);
        });
        const range = Array.isArray(valueDerived);
        let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
        values = values.map((value) => clamp(value, min, max));
        const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({
          value: min + step * index
        })) : marksProp || [];
        const marksValues = marks.map((mark) => mark.value);
        const {
          isFocusVisibleRef,
          onBlur: handleBlurVisible,
          onFocus: handleFocusVisible,
          ref: focusVisibleRef
        } = (0, _utils.unstable_useIsFocusVisible)();
        const [focusedThumbIndex, setFocusedThumbIndex] = React16.useState(-1);
        const sliderRef = React16.useRef();
        const handleFocusRef = (0, _utils.unstable_useForkRef)(focusVisibleRef, sliderRef);
        const handleRef = (0, _utils.unstable_useForkRef)(ref, handleFocusRef);
        const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
          var _otherHandlers$onFocu;
          const index = Number(event.currentTarget.getAttribute("data-index"));
          handleFocusVisible(event);
          if (isFocusVisibleRef.current === true) {
            setFocusedThumbIndex(index);
          }
          setOpen(index);
          otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
        };
        const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
          var _otherHandlers$onBlur;
          handleBlurVisible(event);
          if (isFocusVisibleRef.current === false) {
            setFocusedThumbIndex(-1);
          }
          setOpen(-1);
          otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
        };
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (disabled && sliderRef.current.contains(document.activeElement)) {
            var _document$activeEleme;
            (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
          }
        }, [disabled]);
        if (disabled && active !== -1) {
          setActive(-1);
        }
        if (disabled && focusedThumbIndex !== -1) {
          setFocusedThumbIndex(-1);
        }
        const createHandleHiddenInputChange = (otherHandlers) => (event) => {
          var _otherHandlers$onChan;
          (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
          const index = Number(event.currentTarget.getAttribute("data-index"));
          const value = values[index];
          const marksIndex = marksValues.indexOf(value);
          let newValue = event.target.valueAsNumber;
          if (marks && step == null) {
            newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
          }
          newValue = clamp(newValue, min, max);
          if (marks && step == null) {
            const currentMarkIndex = marksValues.indexOf(values[index]);
            newValue = newValue < values[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
          }
          if (range) {
            if (disableSwap) {
              newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
            }
            const previousValue = newValue;
            newValue = setValueIndex({
              values,
              newValue,
              index
            });
            let activeIndex = index;
            if (!disableSwap) {
              activeIndex = newValue.indexOf(previousValue);
            }
            focusThumb({
              sliderRef,
              activeIndex
            });
          }
          setValueState(newValue);
          setFocusedThumbIndex(index);
          if (handleChange && !areValuesEqual(newValue, valueDerived)) {
            handleChange(event, newValue, index);
          }
          if (onChangeCommitted) {
            onChangeCommitted(event, newValue);
          }
        };
        const previousIndex = React16.useRef();
        let axis = orientation;
        if (isRtl && orientation === "horizontal") {
          axis += "-reverse";
        }
        const getFingerNewValue = ({
          finger,
          move = false
        }) => {
          const {
            current: slider
          } = sliderRef;
          const {
            width,
            height,
            bottom,
            left
          } = slider.getBoundingClientRect();
          let percent;
          if (axis.indexOf("vertical") === 0) {
            percent = (bottom - finger.y) / height;
          } else {
            percent = (finger.x - left) / width;
          }
          if (axis.indexOf("-reverse") !== -1) {
            percent = 1 - percent;
          }
          let newValue;
          newValue = percentToValue(percent, min, max);
          if (step) {
            newValue = roundValueToStep(newValue, step, min);
          } else {
            const closestIndex = findClosest(marksValues, newValue);
            newValue = marksValues[closestIndex];
          }
          newValue = clamp(newValue, min, max);
          let activeIndex = 0;
          if (range) {
            if (!move) {
              activeIndex = findClosest(values, newValue);
            } else {
              activeIndex = previousIndex.current;
            }
            if (disableSwap) {
              newValue = clamp(newValue, values[activeIndex - 1] || -Infinity, values[activeIndex + 1] || Infinity);
            }
            const previousValue = newValue;
            newValue = setValueIndex({
              values,
              newValue,
              index: activeIndex
            });
            if (!(disableSwap && move)) {
              activeIndex = newValue.indexOf(previousValue);
              previousIndex.current = activeIndex;
            }
          }
          return {
            newValue,
            activeIndex
          };
        };
        const handleTouchMove = (0, _utils.unstable_useEventCallback)((nativeEvent) => {
          const finger = trackFinger(nativeEvent, touchId);
          if (!finger) {
            return;
          }
          moveCount.current += 1;
          if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
            handleTouchEnd(nativeEvent);
            return;
          }
          const {
            newValue,
            activeIndex
          } = getFingerNewValue({
            finger,
            move: true
          });
          focusThumb({
            sliderRef,
            activeIndex,
            setActive
          });
          setValueState(newValue);
          if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
            setDragging(true);
          }
          if (handleChange && !areValuesEqual(newValue, valueDerived)) {
            handleChange(nativeEvent, newValue, activeIndex);
          }
        });
        const handleTouchEnd = (0, _utils.unstable_useEventCallback)((nativeEvent) => {
          const finger = trackFinger(nativeEvent, touchId);
          setDragging(false);
          if (!finger) {
            return;
          }
          const {
            newValue
          } = getFingerNewValue({
            finger,
            move: true
          });
          setActive(-1);
          if (nativeEvent.type === "touchend") {
            setOpen(-1);
          }
          if (onChangeCommitted) {
            onChangeCommitted(nativeEvent, newValue);
          }
          touchId.current = void 0;
          stopListening();
        });
        const handleTouchStart = (0, _utils.unstable_useEventCallback)((nativeEvent) => {
          if (disabled) {
            return;
          }
          if (!doesSupportTouchActionNone()) {
            nativeEvent.preventDefault();
          }
          const touch = nativeEvent.changedTouches[0];
          if (touch != null) {
            touchId.current = touch.identifier;
          }
          const finger = trackFinger(nativeEvent, touchId);
          if (finger !== false) {
            const {
              newValue,
              activeIndex
            } = getFingerNewValue({
              finger
            });
            focusThumb({
              sliderRef,
              activeIndex,
              setActive
            });
            setValueState(newValue);
            if (handleChange && !areValuesEqual(newValue, valueDerived)) {
              handleChange(nativeEvent, newValue, activeIndex);
            }
          }
          moveCount.current = 0;
          const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
          doc.addEventListener("touchmove", handleTouchMove);
          doc.addEventListener("touchend", handleTouchEnd);
        });
        const stopListening = React16.useCallback(() => {
          const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
          doc.removeEventListener("mousemove", handleTouchMove);
          doc.removeEventListener("mouseup", handleTouchEnd);
          doc.removeEventListener("touchmove", handleTouchMove);
          doc.removeEventListener("touchend", handleTouchEnd);
        }, [handleTouchEnd, handleTouchMove]);
        React16.useEffect(() => {
          const {
            current: slider
          } = sliderRef;
          slider.addEventListener("touchstart", handleTouchStart, {
            passive: doesSupportTouchActionNone()
          });
          return () => {
            slider.removeEventListener("touchstart", handleTouchStart, {
              passive: doesSupportTouchActionNone()
            });
            stopListening();
          };
        }, [stopListening, handleTouchStart]);
        React16.useEffect(() => {
          if (disabled) {
            stopListening();
          }
        }, [disabled, stopListening]);
        const createHandleMouseDown = (otherHandlers) => (event) => {
          var _otherHandlers$onMous;
          (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
          if (disabled) {
            return;
          }
          if (event.defaultPrevented) {
            return;
          }
          if (event.button !== 0) {
            return;
          }
          event.preventDefault();
          const finger = trackFinger(event, touchId);
          if (finger !== false) {
            const {
              newValue,
              activeIndex
            } = getFingerNewValue({
              finger
            });
            focusThumb({
              sliderRef,
              activeIndex,
              setActive
            });
            setValueState(newValue);
            if (handleChange && !areValuesEqual(newValue, valueDerived)) {
              handleChange(event, newValue, activeIndex);
            }
          }
          moveCount.current = 0;
          const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
          doc.addEventListener("mousemove", handleTouchMove);
          doc.addEventListener("mouseup", handleTouchEnd);
        };
        const trackOffset = valueToPercent(range ? values[0] : min, min, max);
        const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
        const getRootProps = (otherHandlers = {}) => {
          const ownEventHandlers = {
            onMouseDown: createHandleMouseDown(otherHandlers || {})
          };
          const mergedEventHandlers = {
            ...otherHandlers,
            ...ownEventHandlers
          };
          return {
            ref: handleRef,
            ...mergedEventHandlers
          };
        };
        const createHandleMouseOver = (otherHandlers) => (event) => {
          var _otherHandlers$onMous2;
          (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
          const index = Number(event.currentTarget.getAttribute("data-index"));
          setOpen(index);
        };
        const createHandleMouseLeave = (otherHandlers) => (event) => {
          var _otherHandlers$onMous3;
          (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
          setOpen(-1);
        };
        const getThumbProps = (otherHandlers = {}) => {
          const ownEventHandlers = {
            onMouseOver: createHandleMouseOver(otherHandlers || {}),
            onMouseLeave: createHandleMouseLeave(otherHandlers || {})
          };
          return {
            ...otherHandlers,
            ...ownEventHandlers
          };
        };
        const getHiddenInputProps = (otherHandlers = {}) => {
          var _parameters$step;
          const ownEventHandlers = {
            onChange: createHandleHiddenInputChange(otherHandlers || {}),
            onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
            onBlur: createHandleHiddenInputBlur(otherHandlers || {})
          };
          const mergedEventHandlers = {
            ...otherHandlers,
            ...ownEventHandlers
          };
          return {
            tabIndex,
            "aria-labelledby": ariaLabelledby,
            "aria-orientation": orientation,
            "aria-valuemax": scale(max),
            "aria-valuemin": scale(min),
            name,
            type: "range",
            min: parameters.min,
            max: parameters.max,
            step: (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
            disabled,
            ...mergedEventHandlers,
            style: {
              ..._utils.visuallyHidden,
              direction: isRtl ? "rtl" : "ltr",
              // So that VoiceOver's focus indicator matches the thumb's dimensions
              width: "100%",
              height: "100%"
            }
          };
        };
        return {
          active,
          axis,
          axisProps,
          dragging,
          focusedThumbIndex,
          getHiddenInputProps,
          getRootProps,
          getThumbProps,
          marks,
          open,
          range,
          rootRef: handleRef,
          trackLeap,
          trackOffset,
          values
        };
      }
    }
  });

  // node_modules/@mui/base/node/useSlider/useSlider.types.js
  var require_useSlider_types = __commonJS({
    "node_modules/@mui/base/node/useSlider/useSlider.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useSlider/index.js
  var require_useSlider2 = __commonJS({
    "node_modules/@mui/base/node/useSlider/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useSlider.default;
        }
      });
      var _useSlider = _interopRequireWildcard(require_useSlider());
      Object.keys(_useSlider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSlider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSlider[key];
          }
        });
      });
      var _useSlider2 = require_useSlider_types();
      Object.keys(_useSlider2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSlider2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSlider2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Slider/Slider.js
  var require_Slider = __commonJS({
    "node_modules/@mui/base/node/Slider/Slider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _sliderClasses = require_sliderClasses();
      var _useSlider = _interopRequireWildcard(require_useSlider2());
      var _useSlotProps = _interopRequireDefault(require_useSlotProps());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function Identity(x) {
        return x;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          disabled,
          dragging,
          marked,
          orientation,
          track
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse"],
          rail: ["rail"],
          track: ["track"],
          mark: ["mark"],
          markActive: ["markActive"],
          markLabel: ["markLabel"],
          markLabelActive: ["markLabelActive"],
          valueLabel: ["valueLabel"],
          thumb: ["thumb", disabled && "disabled"],
          active: ["active"],
          disabled: ["disabled"],
          focusVisible: ["focusVisible"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_sliderClasses.getSliderUtilityClass));
      };
      var Slider = /* @__PURE__ */ React16.forwardRef(function Slider2(props, forwardedRef) {
        var _slots$root, _slots$rail, _slots$track, _slots$thumb, _slots$mark, _slots$markLabel;
        const {
          "aria-label": ariaLabel,
          "aria-valuetext": ariaValuetext,
          "aria-labelledby": ariaLabelledby,
          className,
          disableSwap = false,
          disabled = false,
          getAriaLabel,
          getAriaValueText,
          marks: marksProp = false,
          max = 100,
          min = 0,
          name,
          onChange,
          onChangeCommitted,
          orientation = "horizontal",
          scale = Identity,
          step = 1,
          tabIndex,
          track = "normal",
          value: valueProp,
          valueLabelFormat = Identity,
          isRtl = false,
          defaultValue,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const partialOwnerState = {
          ...props,
          marks: marksProp,
          disabled,
          isRtl,
          defaultValue,
          max,
          min,
          orientation,
          scale,
          step,
          track,
          valueLabelFormat
        };
        const {
          axisProps,
          getRootProps,
          getHiddenInputProps,
          getThumbProps,
          active,
          axis,
          range,
          focusedThumbIndex,
          dragging,
          marks,
          values,
          trackOffset,
          trackLeap
        } = (0, _useSlider.default)({
          ...partialOwnerState,
          rootRef: forwardedRef
        });
        const ownerState = {
          ...partialOwnerState,
          marked: marks.length > 0 && marks.some((mark) => mark.label),
          dragging,
          focusedThumbIndex
        };
        const classes = useUtilityClasses4(ownerState);
        const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
        const rootProps = (0, _useSlotProps.default)({
          elementType: Root,
          getSlotProps: getRootProps,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          ownerState,
          className: [classes.root, className]
        });
        const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : "span";
        const railProps = (0, _useSlotProps.default)({
          elementType: Rail,
          externalSlotProps: slotProps.rail,
          ownerState,
          className: classes.rail
        });
        const Track = (_slots$track = slots.track) != null ? _slots$track : "span";
        const trackProps = (0, _useSlotProps.default)({
          elementType: Track,
          externalSlotProps: slotProps.track,
          additionalProps: {
            style: {
              ...axisProps[axis].offset(trackOffset),
              ...axisProps[axis].leap(trackLeap)
            }
          },
          ownerState,
          className: classes.track
        });
        const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
        const thumbProps = (0, _useSlotProps.default)({
          elementType: Thumb,
          getSlotProps: getThumbProps,
          externalSlotProps: slotProps.thumb,
          ownerState
        });
        const ValueLabel = slots.valueLabel;
        const valueLabelProps = (0, _useSlotProps.default)({
          elementType: ValueLabel,
          externalSlotProps: slotProps.valueLabel,
          ownerState
        });
        const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : "span";
        const markProps = (0, _useSlotProps.default)({
          elementType: Mark,
          externalSlotProps: slotProps.mark,
          ownerState,
          className: classes.mark
        });
        const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : "span";
        const markLabelProps = (0, _useSlotProps.default)({
          elementType: MarkLabel,
          externalSlotProps: slotProps.markLabel,
          ownerState
        });
        const Input = slots.input || "input";
        const inputProps = (0, _useSlotProps.default)({
          elementType: Input,
          getSlotProps: getHiddenInputProps,
          externalSlotProps: slotProps.input,
          ownerState
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, {
          ...rootProps,
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Rail, {
            ...railProps
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Track, {
            ...trackProps
          }), marks.filter((mark) => mark.value >= min && mark.value <= max).map((mark, index) => {
            const percent = (0, _useSlider.valueToPercent)(mark.value, min, max);
            const style = axisProps[axis].offset(percent);
            let markActive;
            if (track === false) {
              markActive = values.indexOf(mark.value) !== -1;
            } else {
              markActive = track === "normal" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === "inverted" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
            }
            return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React16.Fragment, {
              children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Mark, {
                "data-index": index,
                ...markProps,
                ...!(0, _isHostComponent.default)(Mark) && {
                  markActive
                },
                style: {
                  ...style,
                  ...markProps.style
                },
                className: (0, _clsx.default)(markProps.className, markActive && classes.markActive)
              }), mark.label != null ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(MarkLabel, {
                "aria-hidden": true,
                "data-index": index,
                ...markLabelProps,
                ...!(0, _isHostComponent.default)(MarkLabel) && {
                  markLabelActive: markActive
                },
                style: {
                  ...style,
                  ...markLabelProps.style
                },
                className: (0, _clsx.default)(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
                children: mark.label
              }) : null]
            }, index);
          }), values.map((value, index) => {
            const percent = (0, _useSlider.valueToPercent)(value, min, max);
            const style = axisProps[axis].offset(percent);
            return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Thumb, {
              "data-index": index,
              ...thumbProps,
              className: (0, _clsx.default)(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
              style: {
                ...style,
                pointerEvents: disableSwap && active !== index ? "none" : void 0,
                ...thumbProps.style
              },
              children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Input, {
                "data-index": index,
                "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                "aria-valuenow": scale(value),
                "aria-labelledby": ariaLabelledby,
                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                value: values[index],
                ...inputProps
              }), ValueLabel ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(ValueLabel, {
                ...!(0, _isHostComponent.default)(ValueLabel) && {
                  valueLabelFormat,
                  index,
                  disabled
                },
                ...valueLabelProps,
                children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat
              }) : null]
            }, index);
          })]
        });
      });
      true ? Slider.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The label of the slider.
         */
        "aria-label": (0, _utils.chainPropTypes)(_propTypes.default.string, (props) => {
          const range = Array.isArray(props.value || props.defaultValue);
          if (range && props["aria-label"] != null) {
            return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
          }
          return null;
        }),
        /**
         * The id of the element containing a label for the slider.
         */
        "aria-labelledby": _propTypes.default.string,
        /**
         * A string value that provides a user-friendly name for the current value of the slider.
         */
        "aria-valuetext": (0, _utils.chainPropTypes)(_propTypes.default.string, (props) => {
          const range = Array.isArray(props.value || props.defaultValue);
          if (range && props["aria-valuetext"] != null) {
            return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
          }
          return null;
        }),
        /**
         * The default value. Use when the component is not controlled.
         */
        defaultValue: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),
        /**
         * If `true`, the component is disabled.
         * @default false
         */
        disabled: _propTypes.default.bool,
        /**
         * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
         * @default false
         */
        disableSwap: _propTypes.default.bool,
        /**
         * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
         * This is important for screen reader users.
         * @param {number} index The thumb label's index to format.
         * @returns {string}
         */
        getAriaLabel: _propTypes.default.func,
        /**
         * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
         * This is important for screen reader users.
         * @param {number} value The thumb label's value to format.
         * @param {number} index The thumb label's index to format.
         * @returns {string}
         */
        getAriaValueText: _propTypes.default.func,
        /**
         * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).
         * @default false
         */
        isRtl: _propTypes.default.bool,
        /**
         * Marks indicate predetermined values to which the user can move the slider.
         * If `true` the marks are spaced according the value of the `step` prop.
         * If an array, it should contain objects with `value` and an optional `label` keys.
         * @default false
         */
        marks: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape({
          label: _propTypes.default.node,
          value: _propTypes.default.number.isRequired
        })), _propTypes.default.bool]),
        /**
         * The maximum allowed value of the slider.
         * Should not be equal to min.
         * @default 100
         */
        max: _propTypes.default.number,
        /**
         * The minimum allowed value of the slider.
         * Should not be equal to max.
         * @default 0
         */
        min: _propTypes.default.number,
        /**
         * Name attribute of the hidden `input` element.
         */
        name: _propTypes.default.string,
        /**
         * Callback function that is fired when the slider's value changed.
         *
         * @param {Event} event The event source of the callback.
         * You can pull out the new value by accessing `event.target.value` (any).
         * **Warning**: This is a generic event not a change event.
         * @param {number | number[]} value The new value.
         * @param {number} activeThumb Index of the currently moved thumb.
         */
        onChange: _propTypes.default.func,
        /**
         * Callback function that is fired when the `mouseup` is triggered.
         *
         * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
         * @param {number | number[]} value The new value.
         */
        onChangeCommitted: _propTypes.default.func,
        /**
         * The component orientation.
         * @default 'horizontal'
         */
        orientation: _propTypes.default.oneOf(["horizontal", "vertical"]),
        /**
         * A transformation function, to change the scale of the slider.
         * @param {any} x
         * @returns {any}
         * @default function Identity(x) {
         *   return x;
         * }
         */
        scale: _propTypes.default.func,
        /**
         * The props used for each slot inside the Slider.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          mark: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          markLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          rail: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          thumb: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          track: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          valueLabel: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.func])
        }),
        /**
         * The components used for each slot inside the Slider.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          input: _propTypes.default.elementType,
          mark: _propTypes.default.elementType,
          markLabel: _propTypes.default.elementType,
          rail: _propTypes.default.elementType,
          root: _propTypes.default.elementType,
          thumb: _propTypes.default.elementType,
          track: _propTypes.default.elementType,
          valueLabel: _propTypes.default.elementType
        }),
        /**
         * The granularity with which the slider can step through values. (A "discrete" slider.)
         * The `min` prop serves as the origin for the valid values.
         * We recommend (max - min) to be evenly divisible by the step.
         *
         * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
         * @default 1
         */
        step: _propTypes.default.number,
        /**
         * Tab index attribute of the hidden `input` element.
         */
        tabIndex: _propTypes.default.number,
        /**
         * The track presentation:
         *
         * - `normal` the track will render a bar representing the slider value.
         * - `inverted` the track will render a bar representing the remaining slider value.
         * - `false` the track will render without a bar.
         * @default 'normal'
         */
        track: _propTypes.default.oneOf(["inverted", "normal", false]),
        /**
         * The value of the slider.
         * For ranged sliders, provide an array with two values.
         */
        value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),
        /**
         * The format function the value label's value.
         *
         * When a function is provided, it should have the following signature:
         *
         * - {number} value The value label's value to format
         * - {number} index The value label's index to format
         * @param {any} x
         * @returns {any}
         * @default function Identity(x) {
         *   return x;
         * }
         */
        valueLabelFormat: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string])
      } : void 0;
      var _default = Slider;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Slider/Slider.types.js
  var require_Slider_types = __commonJS({
    "node_modules/@mui/base/node/Slider/Slider.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Slider/index.js
  var require_Slider2 = __commonJS({
    "node_modules/@mui/base/node/Slider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        sliderClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Slider.default;
        }
      });
      Object.defineProperty(exports, "sliderClasses", {
        enumerable: true,
        get: function() {
          return _sliderClasses.default;
        }
      });
      var _Slider = _interopRequireDefault(require_Slider());
      var _Slider2 = require_Slider_types();
      Object.keys(_Slider2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Slider2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Slider2[key];
          }
        });
      });
      var _sliderClasses = _interopRequireWildcard(require_sliderClasses());
      Object.keys(_sliderClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _sliderClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _sliderClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Snackbar/snackbarClasses.js
  var require_snackbarClasses = __commonJS({
    "node_modules/@mui/base/node/Snackbar/snackbarClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSnackbarUtilityClass = getSnackbarUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getSnackbarUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSnackbar", slot);
      }
      var snackbarClasses = (0, _generateUtilityClasses.default)("MuiSnackbar", ["root"]);
      var _default = snackbarClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useSnackbar/useSnackbar.js
  var require_useSnackbar = __commonJS({
    "node_modules/@mui/base/node/useSnackbar/useSnackbar.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useSnackbar;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useSnackbar(parameters) {
        const {
          autoHideDuration = null,
          disableWindowBlurListener = false,
          onClose,
          open,
          resumeHideDuration
        } = parameters;
        const timerAutoHide = React16.useRef();
        React16.useEffect(() => {
          if (!open) {
            return void 0;
          }
          function handleKeyDown(nativeEvent) {
            if (!nativeEvent.defaultPrevented) {
              if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
                onClose == null ? void 0 : onClose(nativeEvent, "escapeKeyDown");
              }
            }
          }
          document.addEventListener("keydown", handleKeyDown);
          return () => {
            document.removeEventListener("keydown", handleKeyDown);
          };
        }, [open, onClose]);
        const handleClose = (0, _utils.unstable_useEventCallback)((event, reason) => {
          onClose == null ? void 0 : onClose(event, reason);
        });
        const setAutoHideTimer = (0, _utils.unstable_useEventCallback)((autoHideDurationParam) => {
          if (!onClose || autoHideDurationParam == null) {
            return;
          }
          clearTimeout(timerAutoHide.current);
          timerAutoHide.current = setTimeout(() => {
            handleClose(null, "timeout");
          }, autoHideDurationParam);
        });
        React16.useEffect(() => {
          if (open) {
            setAutoHideTimer(autoHideDuration);
          }
          return () => {
            clearTimeout(timerAutoHide.current);
          };
        }, [open, autoHideDuration, setAutoHideTimer]);
        const handleClickAway = (event) => {
          onClose == null ? void 0 : onClose(event, "clickaway");
        };
        const handlePause = () => {
          clearTimeout(timerAutoHide.current);
        };
        const handleResume = React16.useCallback(() => {
          if (autoHideDuration != null) {
            setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
          }
        }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
        const createHandleBlur = (otherHandlers) => (event) => {
          const onBlurCallback = otherHandlers.onBlur;
          onBlurCallback == null ? void 0 : onBlurCallback(event);
          handleResume();
        };
        const createHandleFocus = (otherHandlers) => (event) => {
          const onFocusCallback = otherHandlers.onFocus;
          onFocusCallback == null ? void 0 : onFocusCallback(event);
          handlePause();
        };
        const createMouseEnter = (otherHandlers) => (event) => {
          const onMouseEnterCallback = otherHandlers.onMouseEnter;
          onMouseEnterCallback == null ? void 0 : onMouseEnterCallback(event);
          handlePause();
        };
        const createMouseLeave = (otherHandlers) => (event) => {
          const onMouseLeaveCallback = otherHandlers.onMouseLeave;
          onMouseLeaveCallback == null ? void 0 : onMouseLeaveCallback(event);
          handleResume();
        };
        React16.useEffect(() => {
          if (!disableWindowBlurListener && open) {
            window.addEventListener("focus", handleResume);
            window.addEventListener("blur", handlePause);
            return () => {
              window.removeEventListener("focus", handleResume);
              window.removeEventListener("blur", handlePause);
            };
          }
          return void 0;
        }, [disableWindowBlurListener, handleResume, open]);
        const getRootProps = (otherHandlers = {}) => {
          const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
          const externalEventHandlers = {
            ...propsEventHandlers,
            ...otherHandlers
          };
          return {
            // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
            // See https://github.com/mui/material-ui/issues/29080
            role: "presentation",
            ...externalEventHandlers,
            onBlur: createHandleBlur(externalEventHandlers),
            onFocus: createHandleFocus(externalEventHandlers),
            onMouseEnter: createMouseEnter(externalEventHandlers),
            onMouseLeave: createMouseLeave(externalEventHandlers)
          };
        };
        return {
          getRootProps,
          onClickAway: handleClickAway
        };
      }
    }
  });

  // node_modules/@mui/base/node/useSnackbar/useSnackbar.types.js
  var require_useSnackbar_types = __commonJS({
    "node_modules/@mui/base/node/useSnackbar/useSnackbar.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useSnackbar/index.js
  var require_useSnackbar2 = __commonJS({
    "node_modules/@mui/base/node/useSnackbar/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useSnackbar.default;
        }
      });
      var _useSnackbar = _interopRequireDefault(require_useSnackbar());
      var _useSnackbar2 = require_useSnackbar_types();
      Object.keys(_useSnackbar2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSnackbar2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSnackbar2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/Snackbar/Snackbar.js
  var require_Snackbar = __commonJS({
    "node_modules/@mui/base/node/Snackbar/Snackbar.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _ClickAwayListener = _interopRequireDefault(require_ClickAwayListener2());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _snackbarClasses = require_snackbarClasses();
      var _useSnackbar = _interopRequireDefault(require_useSnackbar2());
      var _utils = require_utils2();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = () => {
        const slots = {
          root: ["root"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_snackbarClasses.getSnackbarUtilityClass));
      };
      var Snackbar = /* @__PURE__ */ React16.forwardRef(function Snackbar2(props, forwardedRef) {
        const {
          autoHideDuration = null,
          children,
          disableWindowBlurListener = false,
          exited = true,
          onBlur,
          onClose,
          onFocus,
          onMouseEnter,
          onMouseLeave,
          open,
          resumeHideDuration,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const classes = useUtilityClasses4();
        const {
          getRootProps,
          onClickAway
        } = (0, _useSnackbar.default)({
          ...props,
          autoHideDuration,
          disableWindowBlurListener,
          onClose,
          open,
          resumeHideDuration
        });
        const ownerState = props;
        const Root = slots.root || "div";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root,
          getSlotProps: getRootProps,
          externalForwardedProps: other,
          externalSlotProps: slotProps.root,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        const clickAwayListenerProps = (0, _utils.useSlotProps)({
          elementType: _ClickAwayListener.default,
          externalSlotProps: slotProps.clickAwayListener,
          additionalProps: {
            onClickAway
          },
          ownerState
        });
        delete clickAwayListenerProps.ownerState;
        if (!open && exited) {
          return null;
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ClickAwayListener.default, {
          ...clickAwayListenerProps,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
            ...rootProps,
            children
          })
        });
      });
      true ? Snackbar.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The number of milliseconds to wait before automatically calling the
         * `onClose` function. `onClose` should then set the state of the `open`
         * prop to hide the Snackbar. This behavior is disabled by default with
         * the `null` value.
         * @default null
         */
        autoHideDuration: _propTypes.default.number,
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
         * @default false
         */
        disableWindowBlurListener: _propTypes.default.bool,
        /**
         * The prop used to handle exited transition and unmount the component.
         * @default true
         */
        exited: _propTypes.default.bool,
        /**
         * Callback fired when the component requests to be closed.
         * Typically `onClose` is used to set state in the parent component,
         * which is used to control the `Snackbar` `open` prop.
         * The `reason` parameter can optionally be used to control the response to `onClose`,
         * for example ignoring `clickaway`.
         *
         * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
         * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
         */
        onClose: _propTypes.default.func,
        /**
         * If `true`, the component is shown.
         */
        open: _propTypes.default.bool,
        /**
         * The number of milliseconds to wait before dismissing after user interaction.
         * If `autoHideDuration` prop isn't specified, it does nothing.
         * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
         * we default to `autoHideDuration / 2` ms.
         */
        resumeHideDuration: _propTypes.default.number,
        /**
         * The props used for each slot inside the Snackbar.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          clickAwayListener: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
            children: _propTypes.default.element.isRequired,
            disableReactTree: _propTypes.default.bool,
            mouseEvent: _propTypes.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
            onClickAway: _propTypes.default.func,
            touchEvent: _propTypes.default.oneOf(["onTouchEnd", "onTouchStart", false])
          })]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Snackbar.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        })
      } : void 0;
      var _default = Snackbar;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Snackbar/Snackbar.types.js
  var require_Snackbar_types = __commonJS({
    "node_modules/@mui/base/node/Snackbar/Snackbar.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Snackbar/index.js
  var require_Snackbar2 = __commonJS({
    "node_modules/@mui/base/node/Snackbar/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        snackbarClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Snackbar.default;
        }
      });
      Object.defineProperty(exports, "snackbarClasses", {
        enumerable: true,
        get: function() {
          return _snackbarClasses.default;
        }
      });
      var _Snackbar = _interopRequireDefault(require_Snackbar());
      var _Snackbar2 = require_Snackbar_types();
      Object.keys(_Snackbar2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Snackbar2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Snackbar2[key];
          }
        });
      });
      var _snackbarClasses = _interopRequireWildcard(require_snackbarClasses());
      Object.keys(_snackbarClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _snackbarClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _snackbarClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/useSwitch/useSwitch.js
  var require_useSwitch = __commonJS({
    "node_modules/@mui/base/node/useSwitch/useSwitch.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useSwitch;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useSwitch(props) {
        const {
          checked: checkedProp,
          defaultChecked,
          disabled,
          onBlur,
          onChange,
          onFocus,
          onFocusVisible,
          readOnly,
          required
        } = props;
        const [checked, setCheckedState] = (0, _utils.unstable_useControlled)({
          controlled: checkedProp,
          default: Boolean(defaultChecked),
          name: "Switch",
          state: "checked"
        });
        const createHandleInputChange = (otherProps) => (event) => {
          var _otherProps$onChange;
          if (event.nativeEvent.defaultPrevented) {
            return;
          }
          setCheckedState(event.target.checked);
          onChange == null ? void 0 : onChange(event);
          (_otherProps$onChange = otherProps.onChange) == null ? void 0 : _otherProps$onChange.call(otherProps, event);
        };
        const {
          isFocusVisibleRef,
          onBlur: handleBlurVisible,
          onFocus: handleFocusVisible,
          ref: focusVisibleRef
        } = (0, _utils.unstable_useIsFocusVisible)();
        const [focusVisible, setFocusVisible] = React16.useState(false);
        if (disabled && focusVisible) {
          setFocusVisible(false);
        }
        React16.useEffect(() => {
          isFocusVisibleRef.current = focusVisible;
        }, [focusVisible, isFocusVisibleRef]);
        const inputRef = React16.useRef(null);
        const createHandleFocus = (otherProps) => (event) => {
          var _otherProps$onFocus;
          if (!inputRef.current) {
            inputRef.current = event.currentTarget;
          }
          handleFocusVisible(event);
          if (isFocusVisibleRef.current === true) {
            setFocusVisible(true);
            onFocusVisible == null ? void 0 : onFocusVisible(event);
          }
          onFocus == null ? void 0 : onFocus(event);
          (_otherProps$onFocus = otherProps.onFocus) == null ? void 0 : _otherProps$onFocus.call(otherProps, event);
        };
        const createHandleBlur = (otherProps) => (event) => {
          var _otherProps$onBlur;
          handleBlurVisible(event);
          if (isFocusVisibleRef.current === false) {
            setFocusVisible(false);
          }
          onBlur == null ? void 0 : onBlur(event);
          (_otherProps$onBlur = otherProps.onBlur) == null ? void 0 : _otherProps$onBlur.call(otherProps, event);
        };
        const handleInputRef = (0, _utils.unstable_useForkRef)(focusVisibleRef, inputRef);
        const getInputProps = (otherProps = {}) => ({
          checked: checkedProp,
          defaultChecked,
          disabled,
          readOnly,
          ref: handleInputRef,
          required,
          type: "checkbox",
          ...otherProps,
          onChange: createHandleInputChange(otherProps),
          onFocus: createHandleFocus(otherProps),
          onBlur: createHandleBlur(otherProps)
        });
        return {
          checked,
          disabled: Boolean(disabled),
          focusVisible,
          getInputProps,
          inputRef: handleInputRef,
          readOnly: Boolean(readOnly)
        };
      }
    }
  });

  // node_modules/@mui/base/node/useSwitch/useSwitch.types.js
  var require_useSwitch_types = __commonJS({
    "node_modules/@mui/base/node/useSwitch/useSwitch.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useSwitch/index.js
  var require_useSwitch2 = __commonJS({
    "node_modules/@mui/base/node/useSwitch/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useSwitch.default;
        }
      });
      var _useSwitch = _interopRequireDefault(require_useSwitch());
      var _useSwitch2 = require_useSwitch_types();
      Object.keys(_useSwitch2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSwitch2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSwitch2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/Switch/switchClasses.js
  var require_switchClasses = __commonJS({
    "node_modules/@mui/base/node/Switch/switchClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSwitchUtilityClass = getSwitchUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getSwitchUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSwitch", slot);
      }
      var switchClasses = (0, _generateUtilityClasses.default)("MuiSwitch", ["root", "input", "track", "thumb", "checked", "disabled", "focusVisible", "readOnly"]);
      var _default = switchClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Switch/Switch.js
  var require_Switch = __commonJS({
    "node_modules/@mui/base/node/Switch/Switch.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _useSwitch = _interopRequireDefault(require_useSwitch2());
      var _utils = require_utils2();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _switchClasses = require_switchClasses();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          checked,
          disabled,
          focusVisible,
          readOnly
        } = ownerState;
        const slots = {
          root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
          thumb: ["thumb"],
          input: ["input"],
          track: ["track"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_switchClasses.getSwitchUtilityClass));
      };
      var Switch = /* @__PURE__ */ React16.forwardRef(function Switch2(props, forwardedRef) {
        var _slots$root, _slots$thumb, _slots$input, _slots$track;
        const {
          checked: checkedProp,
          defaultChecked,
          disabled: disabledProp,
          onBlur,
          onChange,
          onFocus,
          onFocusVisible,
          readOnly: readOnlyProp,
          required,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const useSwitchProps = {
          checked: checkedProp,
          defaultChecked,
          disabled: disabledProp,
          onBlur,
          onChange,
          onFocus,
          onFocusVisible,
          readOnly: readOnlyProp
        };
        const {
          getInputProps,
          checked,
          disabled,
          focusVisible,
          readOnly
        } = (0, _useSwitch.default)(useSwitchProps);
        const ownerState = {
          ...props,
          checked,
          disabled,
          focusVisible,
          readOnly
        };
        const classes = useUtilityClasses4(ownerState);
        const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
        const thumbProps = (0, _utils.useSlotProps)({
          elementType: Thumb,
          externalSlotProps: slotProps.thumb,
          ownerState,
          className: classes.thumb
        });
        const Input = (_slots$input = slots.input) != null ? _slots$input : "input";
        const inputProps = (0, _utils.useSlotProps)({
          elementType: Input,
          getSlotProps: getInputProps,
          externalSlotProps: slotProps.input,
          ownerState,
          className: classes.input
        });
        const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : "span";
        const trackProps = (0, _utils.useSlotProps)({
          elementType: Track,
          externalSlotProps: slotProps.track,
          ownerState,
          className: classes.track
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, {
          ...rootProps,
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Track, {
            ...trackProps
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Thumb, {
            ...thumbProps
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Input, {
            ...inputProps
          })]
        });
      });
      true ? Switch.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * If `true`, the component is checked.
         */
        checked: _propTypes.default.bool,
        /**
         * The default checked state. Use when the component is not controlled.
         */
        defaultChecked: _propTypes.default.bool,
        /**
         * If `true`, the component is disabled.
         */
        disabled: _propTypes.default.bool,
        /**
         * @ignore
         */
        onBlur: _propTypes.default.func,
        /**
         * Callback fired when the state is changed.
         *
         * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
         * You can pull out the new value by accessing `event.target.value` (string).
         * You can pull out the new checked state by accessing `event.target.checked` (boolean).
         */
        onChange: _propTypes.default.func,
        /**
         * @ignore
         */
        onFocus: _propTypes.default.func,
        /**
         * @ignore
         */
        onFocusVisible: _propTypes.default.func,
        /**
         * If `true`, the component is read only.
         */
        readOnly: _propTypes.default.bool,
        /**
         * If `true`, the `input` element is required.
         */
        required: _propTypes.default.bool,
        /**
         * The props used for each slot inside the Switch.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          thumb: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          track: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Switch.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          input: _propTypes.default.elementType,
          root: _propTypes.default.elementType,
          thumb: _propTypes.default.elementType,
          track: _propTypes.default.oneOfType([_propTypes.default.elementType, _propTypes.default.oneOf([null])])
        })
      } : void 0;
      var _default = Switch;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Switch/Switch.types.js
  var require_Switch_types = __commonJS({
    "node_modules/@mui/base/node/Switch/Switch.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Switch/index.js
  var require_Switch2 = __commonJS({
    "node_modules/@mui/base/node/Switch/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        switchClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Switch.default;
        }
      });
      Object.defineProperty(exports, "switchClasses", {
        enumerable: true,
        get: function() {
          return _switchClasses.default;
        }
      });
      var _Switch = _interopRequireDefault(require_Switch());
      var _Switch2 = require_Switch_types();
      Object.keys(_Switch2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Switch2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Switch2[key];
          }
        });
      });
      var _switchClasses = _interopRequireWildcard(require_switchClasses());
      Object.keys(_switchClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _switchClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _switchClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TablePagination/TablePaginationActions.js
  var require_TablePaginationActions = __commonJS({
    "node_modules/@mui/base/node/TablePagination/TablePaginationActions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _span;
      var _span2;
      var _span3;
      var _span4;
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function LastPageIconDefault() {
        return _span || (_span = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
          children: "\u21FE|"
        }));
      }
      function FirstPageIconDefault() {
        return _span2 || (_span2 = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
          children: "|\u21FD"
        }));
      }
      function NextPageIconDefault() {
        return _span3 || (_span3 = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
          children: "\u21FE"
        }));
      }
      function BackPageIconDefault() {
        return _span4 || (_span4 = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
          children: "\u21FD"
        }));
      }
      function defaultGetAriaLabel(type) {
        return `Go to ${type} page`;
      }
      var TablePaginationActions = /* @__PURE__ */ React16.forwardRef(function TablePaginationActions2(props, forwardedRef) {
        var _slots$root, _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$backButton, _slots$lastPageIcon, _slots$firstPageIcon, _slots$nextPageIcon, _slots$backPageIcon;
        const {
          count,
          getItemAriaLabel = defaultGetAriaLabel,
          onPageChange,
          page,
          rowsPerPage,
          showFirstButton = false,
          showLastButton = false,
          direction,
          // @ts-ignore
          ownerState: ownerStateProp,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const ownerState = props;
        const handleFirstPageButtonClick = (event) => {
          onPageChange(event, 0);
        };
        const handleBackButtonClick = (event) => {
          onPageChange(event, page - 1);
        };
        const handleNextButtonClick = (event) => {
          onPageChange(event, page + 1);
        };
        const handleLastPageButtonClick = (event) => {
          onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
        };
        const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState
        });
        const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : "button";
        const firstButtonProps = (0, _utils.useSlotProps)({
          elementType: FirstButton,
          externalSlotProps: slotProps.firstButton,
          additionalProps: {
            onClick: handleFirstPageButtonClick,
            disabled: page === 0,
            "aria-label": getItemAriaLabel("first", page),
            title: getItemAriaLabel("first", page)
          },
          ownerState
        });
        const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : "button";
        const lastButtonProps = (0, _utils.useSlotProps)({
          elementType: LastButton,
          externalSlotProps: slotProps.lastButton,
          additionalProps: {
            onClick: handleLastPageButtonClick,
            disabled: page >= Math.ceil(count / rowsPerPage) - 1,
            "aria-label": getItemAriaLabel("last", page),
            title: getItemAriaLabel("last", page)
          },
          ownerState
        });
        const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : "button";
        const nextButtonProps = (0, _utils.useSlotProps)({
          elementType: NextButton,
          externalSlotProps: slotProps.nextButton,
          additionalProps: {
            onClick: handleNextButtonClick,
            disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
            "aria-label": getItemAriaLabel("next", page),
            title: getItemAriaLabel("next", page)
          },
          ownerState
        });
        const BackButton = (_slots$backButton = slots.backButton) != null ? _slots$backButton : "button";
        const backButtonProps = (0, _utils.useSlotProps)({
          elementType: BackButton,
          externalSlotProps: slotProps.backButton,
          additionalProps: {
            onClick: handleBackButtonClick,
            disabled: page === 0,
            "aria-label": getItemAriaLabel("previous", page),
            title: getItemAriaLabel("previous", page)
          },
          ownerState
        });
        const LastPageIcon = (_slots$lastPageIcon = slots.lastPageIcon) != null ? _slots$lastPageIcon : LastPageIconDefault;
        const FirstPageIcon = (_slots$firstPageIcon = slots.firstPageIcon) != null ? _slots$firstPageIcon : FirstPageIconDefault;
        const NextPageIcon = (_slots$nextPageIcon = slots.nextPageIcon) != null ? _slots$nextPageIcon : NextPageIconDefault;
        const BackPageIcon = (_slots$backPageIcon = slots.backPageIcon) != null ? _slots$backPageIcon : BackPageIconDefault;
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root, {
          ...rootProps,
          children: [showFirstButton && /* @__PURE__ */ (0, _jsxRuntime.jsx)(FirstButton, {
            ...firstButtonProps,
            children: direction === "rtl" ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(LastPageIcon, {}) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(FirstPageIcon, {})
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackButton, {
            ...backButtonProps,
            children: direction === "rtl" ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(NextPageIcon, {}) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackPageIcon, {})
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(NextButton, {
            ...nextButtonProps,
            children: direction === "rtl" ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackPageIcon, {}) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(NextPageIcon, {})
          }), showLastButton && /* @__PURE__ */ (0, _jsxRuntime.jsx)(LastButton, {
            ...lastButtonProps,
            children: direction === "rtl" ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(FirstPageIcon, {}) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(LastPageIcon, {})
          })]
        });
      });
      var _default = TablePaginationActions;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TablePagination/tablePaginationClasses.js
  var require_tablePaginationClasses = __commonJS({
    "node_modules/@mui/base/node/TablePagination/tablePaginationClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTablePaginationUtilityClass = getTablePaginationUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTablePaginationUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiTablePagination", slot);
      }
      var tablePaginationClasses = (0, _generateUtilityClasses.default)("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
      var _default = tablePaginationClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TablePagination/TablePagination.js
  var require_TablePagination = __commonJS({
    "node_modules/@mui/base/node/TablePagination/TablePagination.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _utils2 = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      var _TablePaginationActions = _interopRequireDefault(require_TablePaginationActions());
      var _tablePaginationClasses = require_tablePaginationClasses();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function defaultLabelDisplayedRows({
        from: from2,
        to,
        count
      }) {
        return `${from2}\u2013${to} of ${count !== -1 ? count : `more than ${to}`}`;
      }
      function defaultGetAriaLabel(type) {
        return `Go to ${type} page`;
      }
      var useUtilityClasses4 = () => {
        const slots = {
          root: ["root"],
          toolbar: ["toolbar"],
          spacer: ["spacer"],
          selectLabel: ["selectLabel"],
          select: ["select"],
          input: ["input"],
          selectIcon: ["selectIcon"],
          menuItem: ["menuItem"],
          displayedRows: ["displayedRows"],
          actions: ["actions"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_tablePaginationClasses.getTablePaginationUtilityClass));
      };
      var TablePagination = /* @__PURE__ */ React16.forwardRef(function TablePagination2(props, forwardedRef) {
        var _slots$root, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;
        const {
          colSpan: colSpanProp,
          count,
          getItemAriaLabel = defaultGetAriaLabel,
          labelDisplayedRows = defaultLabelDisplayedRows,
          labelId: labelIdProp,
          labelRowsPerPage = "Rows per page:",
          onPageChange,
          onRowsPerPageChange,
          page,
          rowsPerPage,
          rowsPerPageOptions = [10, 25, 50, 100],
          selectId: selectIdProp,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const ownerState = props;
        const classes = useUtilityClasses4();
        let colSpan;
        const Root = (_slots$root = slots.root) != null ? _slots$root : "td";
        if (Root === "td" || !(0, _isHostComponent.default)(Root)) {
          colSpan = colSpanProp || 1e3;
        }
        const getLabelDisplayedRowsTo = () => {
          if (count === -1) {
            return (page + 1) * rowsPerPage;
          }
          return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
        };
        const selectId = (0, _utils.unstable_useId)(selectIdProp);
        const labelId = (0, _utils.unstable_useId)(labelIdProp);
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            colSpan,
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        const Select = (_slots$select = slots.select) != null ? _slots$select : "select";
        const selectProps = (0, _utils2.useSlotProps)({
          elementType: Select,
          externalSlotProps: slotProps.select,
          additionalProps: {
            value: rowsPerPage,
            id: selectId,
            onChange: (event) => onRowsPerPageChange && onRowsPerPageChange(event),
            "aria-label": rowsPerPage.toString(),
            "aria-labelledby": [labelId, selectId].filter(Boolean).join(" ") || void 0
          },
          ownerState,
          className: classes.select
        });
        const Actions = (_slots$actions = slots.actions) != null ? _slots$actions : _TablePaginationActions.default;
        const actionsProps = (0, _utils2.useSlotProps)({
          elementType: Actions,
          externalSlotProps: slotProps.actions,
          additionalProps: {
            page,
            rowsPerPage,
            count,
            onPageChange,
            getItemAriaLabel
          },
          ownerState,
          className: classes.actions
        });
        const MenuItem = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : "option";
        const menuItemProps = (0, _utils2.useSlotProps)({
          elementType: MenuItem,
          externalSlotProps: slotProps.menuItem,
          additionalProps: {
            value: void 0
          },
          ownerState,
          className: classes.menuItem
        });
        const SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : "p";
        const selectLabelProps = (0, _utils2.useSlotProps)({
          elementType: SelectLabel,
          externalSlotProps: slotProps.selectLabel,
          additionalProps: {
            id: labelId
          },
          ownerState,
          className: classes.selectLabel
        });
        const DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : "p";
        const displayedRowsProps = (0, _utils2.useSlotProps)({
          elementType: DisplayedRows,
          externalSlotProps: slotProps.displayedRows,
          ownerState,
          className: classes.displayedRows
        });
        const Toolbar = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : "div";
        const toolbarProps = (0, _utils2.useSlotProps)({
          elementType: Toolbar,
          externalSlotProps: slotProps.toolbar,
          ownerState,
          className: classes.toolbar
        });
        const Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : "div";
        const spacerProps = (0, _utils2.useSlotProps)({
          elementType: Spacer,
          externalSlotProps: slotProps.spacer,
          ownerState,
          className: classes.spacer
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root, {
          ...rootProps,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Toolbar, {
            ...toolbarProps,
            children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Spacer, {
              ...spacerProps
            }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, _jsxRuntime.jsx)(SelectLabel, {
              ...selectLabelProps,
              children: labelRowsPerPage
            }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, _jsxRuntime.jsx)(Select, {
              ...selectProps,
              children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ (0, React16.createElement)(MenuItem, {
                ...menuItemProps,
                key: typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
                value: typeof rowsPerPageOption !== "number" && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
              }, typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
            }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(DisplayedRows, {
              ...displayedRowsProps,
              children: labelDisplayedRows({
                from: count === 0 ? 0 : page * rowsPerPage + 1,
                to: getLabelDisplayedRowsTo(),
                count: count === -1 ? -1 : count,
                page
              })
            }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Actions, {
              ...actionsProps
            })]
          })
        });
      });
      true ? TablePagination.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        colSpan: _propTypes.default.number,
        /**
         * The total number of rows.
         *
         * To enable server side pagination for an unknown number of items, provide -1.
         */
        count: _propTypes.default.number.isRequired,
        /**
         * Accepts a function which returns a string value that provides a user-friendly name for the current page.
         * This is important for screen reader users.
         *
         * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
         * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
         * @returns {string}
         * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {
         *   return `Go to ${type} page`;
         * }
         */
        getItemAriaLabel: _propTypes.default.func,
        /**
         * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
         * object.
         *
         * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
         * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {
         *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
         * }
         */
        labelDisplayedRows: _propTypes.default.func,
        /**
         * Id of the label element within the pagination.
         */
        labelId: _propTypes.default.string,
        /**
         * Customize the rows per page label.
         *
         * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
         * @default 'Rows per page:'
         */
        labelRowsPerPage: _propTypes.default.node,
        /**
         * Callback fired when the page is changed.
         *
         * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
         * @param {number} page The page selected.
         */
        onPageChange: _propTypes.default.func.isRequired,
        /**
         * Callback fired when the number of rows per page is changed.
         *
         * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
         */
        onRowsPerPageChange: _propTypes.default.func,
        /**
         * The zero-based index of the current page.
         */
        page: (0, _utils.chainPropTypes)(_utils.integerPropType.isRequired, (props) => {
          const {
            count,
            page,
            rowsPerPage
          } = props;
          if (count === -1) {
            return null;
          }
          const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
          if (page < 0 || page > newLastPage) {
            return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
          }
          return null;
        }),
        /**
         * The number of rows per page.
         *
         * Set -1 to display all the rows.
         */
        rowsPerPage: _utils.integerPropType.isRequired,
        /**
         * Customizes the options of the rows per page select field. If less than two options are
         * available, no select field will be displayed.
         * Use -1 for the value with a custom label to show all the rows.
         * @default [10, 25, 50, 100]
         */
        rowsPerPageOptions: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
          label: _propTypes.default.string.isRequired,
          value: _propTypes.default.number.isRequired
        })]).isRequired),
        /**
         * Id of the select element within the pagination.
         */
        selectId: _propTypes.default.string,
        /**
         * The props used for each slot inside the TablePagination.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          actions: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          displayedRows: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          menuItem: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          select: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          selectLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          spacer: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          toolbar: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the TablePagination.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          actions: _propTypes.default.elementType,
          displayedRows: _propTypes.default.elementType,
          menuItem: _propTypes.default.elementType,
          root: _propTypes.default.elementType,
          select: _propTypes.default.elementType,
          selectLabel: _propTypes.default.elementType,
          spacer: _propTypes.default.elementType,
          toolbar: _propTypes.default.elementType
        })
      } : void 0;
      var _default = TablePagination;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TablePagination/TablePagination.types.js
  var require_TablePagination_types = __commonJS({
    "node_modules/@mui/base/node/TablePagination/TablePagination.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TablePagination/TablePaginationActions.types.js
  var require_TablePaginationActions_types = __commonJS({
    "node_modules/@mui/base/node/TablePagination/TablePaginationActions.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TablePagination/common.types.js
  var require_common_types = __commonJS({
    "node_modules/@mui/base/node/TablePagination/common.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TablePagination/index.js
  var require_TablePagination2 = __commonJS({
    "node_modules/@mui/base/node/TablePagination/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        TablePaginationActions: true,
        tablePaginationClasses: true
      };
      Object.defineProperty(exports, "TablePaginationActions", {
        enumerable: true,
        get: function() {
          return _TablePaginationActions.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TablePagination.default;
        }
      });
      Object.defineProperty(exports, "tablePaginationClasses", {
        enumerable: true,
        get: function() {
          return _tablePaginationClasses.default;
        }
      });
      var _TablePagination = _interopRequireDefault(require_TablePagination());
      var _TablePagination2 = require_TablePagination_types();
      Object.keys(_TablePagination2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TablePagination2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TablePagination2[key];
          }
        });
      });
      var _TablePaginationActions = _interopRequireDefault(require_TablePaginationActions());
      var _TablePaginationActions2 = require_TablePaginationActions_types();
      Object.keys(_TablePaginationActions2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TablePaginationActions2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TablePaginationActions2[key];
          }
        });
      });
      var _tablePaginationClasses = _interopRequireWildcard(require_tablePaginationClasses());
      Object.keys(_tablePaginationClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tablePaginationClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tablePaginationClasses[key];
          }
        });
      });
      var _common = require_common_types();
      Object.keys(_common).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _common[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _common[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TabPanel/tabPanelClasses.js
  var require_tabPanelClasses = __commonJS({
    "node_modules/@mui/base/node/TabPanel/tabPanelClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTabPanelUtilityClass = getTabPanelUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTabPanelUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiTabPanel", slot);
      }
      var tabPanelClasses = (0, _generateUtilityClasses.default)("MuiTabPanel", ["root", "hidden"]);
      var _default = tabPanelClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Tabs/tabsClasses.js
  var require_tabsClasses = __commonJS({
    "node_modules/@mui/base/node/Tabs/tabsClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTabsUtilityClass = getTabsUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTabsUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiTabs", slot);
      }
      var tabsClasses = (0, _generateUtilityClasses.default)("MuiTabs", ["root", "horizontal", "vertical"]);
      var _default = tabsClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useTabs/useTabs.js
  var require_useTabs = __commonJS({
    "node_modules/@mui/base/node/useTabs/useTabs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _useCompound = require_useCompound();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useTabs(parameters) {
        const {
          value: valueProp,
          defaultValue,
          onChange,
          orientation,
          direction,
          selectionFollowsFocus
        } = parameters;
        const [value, setValue] = (0, _utils.unstable_useControlled)({
          controlled: valueProp,
          default: defaultValue,
          name: "Tabs",
          state: "value"
        });
        const onSelected = React16.useCallback((event, newValue) => {
          setValue(newValue);
          onChange == null ? void 0 : onChange(event, newValue);
        }, [onChange, setValue]);
        const {
          subitems: tabPanels,
          contextValue: compoundComponentContextValue
        } = (0, _useCompound.useCompoundParent)();
        const tabIdLookup = React16.useRef(() => void 0);
        const getTabPanelId = React16.useCallback((tabValue) => {
          return tabPanels.get(tabValue);
        }, [tabPanels]);
        const getTabId = React16.useCallback((tabPanelId) => {
          return tabIdLookup.current(tabPanelId);
        }, []);
        const registerTabIdLookup = React16.useCallback((lookupFunction) => {
          tabIdLookup.current = lookupFunction;
        }, []);
        return {
          contextValue: {
            direction,
            getTabId,
            getTabPanelId,
            onSelected,
            orientation,
            registerTabIdLookup,
            selectionFollowsFocus,
            value,
            ...compoundComponentContextValue
          }
        };
      }
      var _default = useTabs;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useTabs/useTabs.types.js
  var require_useTabs_types = __commonJS({
    "node_modules/@mui/base/node/useTabs/useTabs.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Tabs/TabsContext.js
  var require_TabsContext = __commonJS({
    "node_modules/@mui/base/node/Tabs/TabsContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.useTabsContext = useTabsContext;
      var React16 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var Context = /* @__PURE__ */ React16.createContext(null);
      if (true) {
        Context.displayName = "TabsContext";
      }
      function useTabsContext() {
        const context = React16.useContext(Context);
        if (context == null) {
          throw new Error("No TabsContext provided");
        }
        return context;
      }
      var _default = Context;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useTabs/TabsProvider.js
  var require_TabsProvider = __commonJS({
    "node_modules/@mui/base/node/useTabs/TabsProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = TabsProvider;
      var React16 = _interopRequireWildcard(require_react());
      var _TabsContext = _interopRequireDefault(require_TabsContext());
      var _useCompound = require_useCompound();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function TabsProvider(props) {
        const {
          value: valueProp,
          children
        } = props;
        const {
          direction,
          getItemIndex,
          onSelected,
          orientation,
          registerItem,
          registerTabIdLookup,
          selectionFollowsFocus,
          totalSubitemCount,
          value,
          getTabId,
          getTabPanelId
        } = valueProp;
        const compoundComponentContextValue = React16.useMemo(() => ({
          getItemIndex,
          registerItem,
          totalSubitemCount
        }), [registerItem, getItemIndex, totalSubitemCount]);
        const tabsContextValue = React16.useMemo(() => ({
          direction,
          getTabId,
          getTabPanelId,
          onSelected,
          orientation,
          registerTabIdLookup,
          selectionFollowsFocus,
          value
        }), [direction, getTabId, getTabPanelId, onSelected, orientation, registerTabIdLookup, selectionFollowsFocus, value]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_useCompound.CompoundComponentContext.Provider, {
          value: compoundComponentContextValue,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TabsContext.default.Provider, {
            value: tabsContextValue,
            children
          })
        });
      }
    }
  });

  // node_modules/@mui/base/node/useTabs/index.js
  var require_useTabs2 = __commonJS({
    "node_modules/@mui/base/node/useTabs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        TabsProvider: true
      };
      Object.defineProperty(exports, "TabsProvider", {
        enumerable: true,
        get: function() {
          return _TabsProvider.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useTabs.default;
        }
      });
      var _useTabs = _interopRequireWildcard(require_useTabs());
      Object.keys(_useTabs).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabs[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabs[key];
          }
        });
      });
      var _useTabs2 = require_useTabs_types();
      Object.keys(_useTabs2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabs2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabs2[key];
          }
        });
      });
      var _TabsProvider = _interopRequireWildcard(require_TabsProvider());
      Object.keys(_TabsProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsProvider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsProvider[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Tabs/Tabs.js
  var require_Tabs = __commonJS({
    "node_modules/@mui/base/node/Tabs/Tabs.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _tabsClasses = require_tabsClasses();
      var _useTabs = _interopRequireDefault(require_useTabs2());
      var _TabsProvider = _interopRequireDefault(require_TabsProvider());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          orientation
        } = ownerState;
        const slots = {
          root: ["root", orientation]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_tabsClasses.getTabsUtilityClass));
      };
      var Tabs = /* @__PURE__ */ React16.forwardRef(function Tabs2(props, forwardedRef) {
        var _slots$root;
        const {
          children,
          value: valueProp,
          defaultValue,
          orientation = "horizontal",
          direction = "ltr",
          onChange,
          selectionFollowsFocus,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const {
          contextValue
        } = (0, _useTabs.default)(props);
        const ownerState = {
          ...props,
          orientation,
          direction
        };
        const classes = useUtilityClasses4(ownerState);
        const TabsRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
        const tabsRootProps = (0, _utils.useSlotProps)({
          elementType: TabsRoot,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabsRoot, {
          ...tabsRootProps,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TabsProvider.default, {
            value: contextValue,
            children
          })
        });
      });
      true ? Tabs.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content of the component.
         */
        children: _propTypes.default.node,
        /**
         * The default value. Use when the component is not controlled.
         */
        defaultValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        /**
         * The direction of the text.
         * @default 'ltr'
         */
        direction: _propTypes.default.oneOf(["ltr", "rtl"]),
        /**
         * Callback invoked when new value is being set.
         */
        onChange: _propTypes.default.func,
        /**
         * The component orientation (layout flow direction).
         * @default 'horizontal'
         */
        orientation: _propTypes.default.oneOf(["horizontal", "vertical"]),
        /**
         * If `true` the selected tab changes on focus. Otherwise it only
         * changes on activation.
         */
        selectionFollowsFocus: _propTypes.default.bool,
        /**
         * The props used for each slot inside the Tabs.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Tabs.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        }),
        /**
         * The value of the currently selected `Tab`.
         * If you don't want any selected `Tab`, you can set this prop to `null`.
         */
        value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      } : void 0;
      var _default = Tabs;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Tabs/Tabs.types.js
  var require_Tabs_types = __commonJS({
    "node_modules/@mui/base/node/Tabs/Tabs.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Tabs/index.js
  var require_Tabs2 = __commonJS({
    "node_modules/@mui/base/node/Tabs/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        TabsContext: true,
        tabsClasses: true
      };
      Object.defineProperty(exports, "TabsContext", {
        enumerable: true,
        get: function() {
          return _TabsContext.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Tabs.default;
        }
      });
      Object.defineProperty(exports, "tabsClasses", {
        enumerable: true,
        get: function() {
          return _tabsClasses.default;
        }
      });
      var _Tabs = _interopRequireDefault(require_Tabs());
      var _TabsContext = _interopRequireWildcard(require_TabsContext());
      Object.keys(_TabsContext).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsContext[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsContext[key];
          }
        });
      });
      var _tabsClasses = _interopRequireWildcard(require_tabsClasses());
      Object.keys(_tabsClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tabsClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tabsClasses[key];
          }
        });
      });
      var _Tabs2 = require_Tabs_types();
      Object.keys(_Tabs2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Tabs2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Tabs2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/useTabPanel/useTabPanel.js
  var require_useTabPanel = __commonJS({
    "node_modules/@mui/base/node/useTabPanel/useTabPanel.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _Tabs = require_Tabs2();
      var _useCompoundItem = require_useCompoundItem();
      function tabPanelValueGenerator(otherTabPanelValues) {
        return otherTabPanelValues.size;
      }
      function useTabPanel(parameters) {
        const {
          value: valueParam,
          id: idParam
        } = parameters;
        const context = (0, _Tabs.useTabsContext)();
        if (context === null) {
          throw new Error("No TabContext provided");
        }
        const {
          value: selectedTabValue,
          getTabId
        } = context;
        const id = (0, _utils.unstable_useId)(idParam);
        const {
          id: value
        } = (0, _useCompoundItem.useCompoundItem)(valueParam, id, tabPanelValueGenerator);
        const hidden = value !== selectedTabValue;
        const correspondingTabId = value !== void 0 ? getTabId(value) : void 0;
        const getRootProps = () => {
          return {
            "aria-labelledby": correspondingTabId != null ? correspondingTabId : void 0,
            hidden,
            id: id != null ? id : void 0
          };
        };
        return {
          hidden,
          getRootProps
        };
      }
      var _default = useTabPanel;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabPanel/TabPanel.js
  var require_TabPanel = __commonJS({
    "node_modules/@mui/base/node/TabPanel/TabPanel.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _tabPanelClasses = require_tabPanelClasses();
      var _useTabPanel = _interopRequireDefault(require_useTabPanel());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          hidden
        } = ownerState;
        const slots = {
          root: ["root", hidden && "hidden"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_tabPanelClasses.getTabPanelUtilityClass));
      };
      var TabPanel = /* @__PURE__ */ React16.forwardRef(function TabPanel2(props, forwardedRef) {
        var _slots$root;
        const {
          children,
          value,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const {
          hidden,
          getRootProps
        } = (0, _useTabPanel.default)(props);
        const ownerState = {
          ...props,
          hidden
        };
        const classes = useUtilityClasses4(ownerState);
        const TabPanelRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
        const tabPanelRootProps = (0, _utils.useSlotProps)({
          elementType: TabPanelRoot,
          getSlotProps: getRootProps,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            role: "tabpanel",
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabPanelRoot, {
          ...tabPanelRootProps,
          children: !hidden && children
        });
      });
      true ? TabPanel.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content of the component.
         */
        children: _propTypes.default.node,
        /**
         * The props used for each slot inside the TabPanel.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the TabPanel.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        }),
        /**
         * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
         * If not provided, it will fall back to the index of the panel.
         * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.
         */
        value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      } : void 0;
      var _default = TabPanel;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabPanel/TabPanel.types.js
  var require_TabPanel_types = __commonJS({
    "node_modules/@mui/base/node/TabPanel/TabPanel.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TabPanel/index.js
  var require_TabPanel2 = __commonJS({
    "node_modules/@mui/base/node/TabPanel/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        tabPanelClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TabPanel.default;
        }
      });
      Object.defineProperty(exports, "tabPanelClasses", {
        enumerable: true,
        get: function() {
          return _tabPanelClasses.default;
        }
      });
      var _TabPanel = _interopRequireDefault(require_TabPanel());
      var _TabPanel2 = require_TabPanel_types();
      Object.keys(_TabPanel2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabPanel2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabPanel2[key];
          }
        });
      });
      var _tabPanelClasses = _interopRequireWildcard(require_tabPanelClasses());
      Object.keys(_tabPanelClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tabPanelClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tabPanelClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TabsList/tabsListClasses.js
  var require_tabsListClasses = __commonJS({
    "node_modules/@mui/base/node/TabsList/tabsListClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTabsListUtilityClass = getTabsListUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTabsListUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiTabsList", slot);
      }
      var tabsListClasses = (0, _generateUtilityClasses.default)("MuiTabsList", ["root", "horizontal", "vertical"]);
      var _default = tabsListClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useTabsList/useTabsList.types.js
  var require_useTabsList_types = __commonJS({
    "node_modules/@mui/base/node/useTabsList/useTabsList.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TabsListActionTypes = void 0;
      var TabsListActionTypes = {
        valueChange: "valueChange"
      };
      exports.TabsListActionTypes = TabsListActionTypes;
    }
  });

  // node_modules/@mui/base/node/useTabsList/tabsListReducer.js
  var require_tabsListReducer = __commonJS({
    "node_modules/@mui/base/node/useTabsList/tabsListReducer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = tabsListReducer;
      var _useList = require_useList2();
      var _useTabsList = require_useTabsList_types();
      function tabsListReducer(state, action) {
        if (action.type === _useTabsList.TabsListActionTypes.valueChange) {
          return {
            ...state,
            highlightedValue: action.value
          };
        }
        const newState = (0, _useList.listReducer)(state, action);
        const {
          context: {
            selectionFollowsFocus
          }
        } = action;
        if (action.type === _useList.ListActionTypes.itemsChange) {
          if (newState.selectedValues.length > 0) {
            return {
              ...newState,
              highlightedValue: newState.selectedValues[0]
            };
          }
          (0, _useList.moveHighlight)(null, "reset", action.context);
        }
        if (selectionFollowsFocus && newState.highlightedValue != null) {
          return {
            ...newState,
            selectedValues: [newState.highlightedValue]
          };
        }
        return newState;
      }
    }
  });

  // node_modules/@mui/base/node/useTabsList/useTabsList.js
  var require_useTabsList = __commonJS({
    "node_modules/@mui/base/node/useTabsList/useTabsList.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _Tabs = require_Tabs2();
      var _useTabsList = require_useTabsList_types();
      var _useCompound = require_useCompound();
      var _useList = _interopRequireDefault(require_useList2());
      var _tabsListReducer = _interopRequireDefault(require_tabsListReducer());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useTabsList(parameters) {
        var _selectedValues$;
        const {
          rootRef: externalRef
        } = parameters;
        const {
          direction = "ltr",
          onSelected,
          orientation = "horizontal",
          value,
          registerTabIdLookup,
          selectionFollowsFocus
        } = (0, _Tabs.useTabsContext)();
        const {
          subitems,
          contextValue: compoundComponentContextValue
        } = (0, _useCompound.useCompoundParent)();
        const tabIdLookup = React16.useCallback((tabValue) => {
          var _subitems$get;
          return (_subitems$get = subitems.get(tabValue)) == null ? void 0 : _subitems$get.id;
        }, [subitems]);
        registerTabIdLookup(tabIdLookup);
        const subitemKeys = React16.useMemo(() => Array.from(subitems.keys()), [subitems]);
        const getTabElement = React16.useCallback((tabValue) => {
          var _subitems$get$ref$cur, _subitems$get2;
          if (tabValue == null) {
            return null;
          }
          return (_subitems$get$ref$cur = (_subitems$get2 = subitems.get(tabValue)) == null ? void 0 : _subitems$get2.ref.current) != null ? _subitems$get$ref$cur : null;
        }, [subitems]);
        const isRtl = direction === "rtl";
        let listOrientation;
        if (orientation === "vertical") {
          listOrientation = "vertical";
        } else {
          listOrientation = isRtl ? "horizontal-rtl" : "horizontal-ltr";
        }
        const handleChange = React16.useCallback((event, newValue) => {
          var _newValue$;
          onSelected(event, (_newValue$ = newValue[0]) != null ? _newValue$ : null);
        }, [onSelected]);
        const controlledProps = React16.useMemo(() => {
          if (value === void 0) {
            return {};
          }
          return value != null ? {
            selectedValues: [value]
          } : {
            selectedValues: []
          };
        }, [value]);
        const isItemDisabled = React16.useCallback((item) => {
          var _subitems$get$disable, _subitems$get3;
          return (_subitems$get$disable = (_subitems$get3 = subitems.get(item)) == null ? void 0 : _subitems$get3.disabled) != null ? _subitems$get$disable : false;
        }, [subitems]);
        const {
          contextValue: listContextValue,
          dispatch,
          getRootProps: getListboxRootProps,
          state: {
            highlightedValue,
            selectedValues
          },
          rootRef: mergedRootRef
        } = (0, _useList.default)({
          controlledProps,
          disabledItemsFocusable: !selectionFollowsFocus,
          focusManagement: "DOM",
          getItemDomElement: getTabElement,
          isItemDisabled,
          items: subitemKeys,
          rootRef: externalRef,
          onChange: handleChange,
          orientation: listOrientation,
          reducerActionContext: React16.useMemo(() => ({
            selectionFollowsFocus: selectionFollowsFocus || false
          }), [selectionFollowsFocus]),
          selectionMode: "single",
          stateReducer: _tabsListReducer.default
        });
        React16.useEffect(() => {
          if (value === void 0) {
            return;
          }
          if (value != null) {
            dispatch({
              type: _useTabsList.TabsListActionTypes.valueChange,
              value
            });
          }
        }, [dispatch, value]);
        const getRootProps = (otherHandlers = {}) => {
          return {
            ...otherHandlers,
            ...getListboxRootProps(otherHandlers),
            "aria-orientation": orientation === "vertical" ? "vertical" : void 0,
            role: "tablist"
          };
        };
        return {
          contextValue: {
            ...compoundComponentContextValue,
            ...listContextValue
          },
          dispatch,
          getRootProps,
          highlightedValue,
          isRtl,
          orientation,
          rootRef: mergedRootRef,
          selectedValue: (_selectedValues$ = selectedValues[0]) != null ? _selectedValues$ : null
        };
      }
      var _default = useTabsList;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useTabsList/TabsListProvider.js
  var require_TabsListProvider = __commonJS({
    "node_modules/@mui/base/node/useTabsList/TabsListProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = TabsListProvider;
      var React16 = _interopRequireWildcard(require_react());
      var _ListContext = require_ListContext();
      var _useCompound = require_useCompound();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function TabsListProvider(props) {
        const {
          value,
          children
        } = props;
        const {
          dispatch,
          getItemIndex,
          getItemState,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler,
          registerItem,
          totalSubitemCount
        } = value;
        const listContextValue = React16.useMemo(() => ({
          dispatch,
          getItemState,
          getItemIndex,
          registerHighlightChangeHandler,
          registerSelectionChangeHandler
        }), [dispatch, getItemIndex, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
        const compoundComponentContextValue = React16.useMemo(() => ({
          getItemIndex,
          registerItem,
          totalSubitemCount
        }), [registerItem, getItemIndex, totalSubitemCount]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_useCompound.CompoundComponentContext.Provider, {
          value: compoundComponentContextValue,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ListContext.ListContext.Provider, {
            value: listContextValue,
            children
          })
        });
      }
    }
  });

  // node_modules/@mui/base/node/useTabsList/index.js
  var require_useTabsList2 = __commonJS({
    "node_modules/@mui/base/node/useTabsList/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        TabsListProvider: true
      };
      Object.defineProperty(exports, "TabsListProvider", {
        enumerable: true,
        get: function() {
          return _TabsListProvider.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useTabsList.default;
        }
      });
      var _useTabsList = _interopRequireDefault(require_useTabsList());
      var _useTabsList2 = require_useTabsList_types();
      Object.keys(_useTabsList2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabsList2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabsList2[key];
          }
        });
      });
      var _TabsListProvider = _interopRequireWildcard(require_TabsListProvider());
      Object.keys(_TabsListProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsListProvider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsListProvider[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TabsList/TabsList.js
  var require_TabsList = __commonJS({
    "node_modules/@mui/base/node/TabsList/TabsList.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _utils = require_utils2();
      var _tabsListClasses = require_tabsListClasses();
      var _useTabsList = _interopRequireDefault(require_useTabsList2());
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _TabsListProvider = _interopRequireDefault(require_TabsListProvider());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          orientation
        } = ownerState;
        const slots = {
          root: ["root", orientation]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_tabsListClasses.getTabsListUtilityClass));
      };
      var TabsList = /* @__PURE__ */ React16.forwardRef(function TabsList2(props, forwardedRef) {
        var _slots$root;
        const {
          children,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const {
          isRtl,
          orientation,
          getRootProps,
          contextValue
        } = (0, _useTabsList.default)({
          rootRef: forwardedRef
        });
        const ownerState = {
          ...props,
          isRtl,
          orientation
        };
        const classes = useUtilityClasses4(ownerState);
        const TabsListRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
        const tabsListRootProps = (0, _utils.useSlotProps)({
          elementType: TabsListRoot,
          getSlotProps: getRootProps,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TabsListProvider.default, {
          value: contextValue,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabsListRoot, {
            ...tabsListRootProps,
            children
          })
        });
      });
      true ? TabsList.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content of the component.
         */
        children: _propTypes.default.node,
        /**
         * The props used for each slot inside the TabsList.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the TabsList.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        })
      } : void 0;
      var _default = TabsList;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsList/TabsList.types.js
  var require_TabsList_types = __commonJS({
    "node_modules/@mui/base/node/TabsList/TabsList.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TabsList/index.js
  var require_TabsList2 = __commonJS({
    "node_modules/@mui/base/node/TabsList/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        tabsListClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TabsList.default;
        }
      });
      Object.defineProperty(exports, "tabsListClasses", {
        enumerable: true,
        get: function() {
          return _tabsListClasses.default;
        }
      });
      var _TabsList = _interopRequireDefault(require_TabsList());
      var _TabsList2 = require_TabsList_types();
      Object.keys(_TabsList2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsList2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsList2[key];
          }
        });
      });
      var _tabsListClasses = _interopRequireWildcard(require_tabsListClasses());
      Object.keys(_tabsListClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tabsListClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tabsListClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/Tab/tabClasses.js
  var require_tabClasses = __commonJS({
    "node_modules/@mui/base/node/Tab/tabClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTabUtilityClass = getTabUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass4());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTabUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiTab", slot);
      }
      var tabClasses = (0, _generateUtilityClasses.default)("MuiTab", ["root", "selected", "disabled"]);
      var _default = tabClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useTab/useTab.js
  var require_useTab = __commonJS({
    "node_modules/@mui/base/node/useTab/useTab.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _Tabs = require_Tabs2();
      var _useCompoundItem = require_useCompoundItem();
      var _useList = require_useList2();
      var _useButton = _interopRequireDefault(require_useButton2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function tabValueGenerator(otherTabValues) {
        return otherTabValues.size;
      }
      function useTab(parameters) {
        const {
          value: valueParam,
          rootRef: externalRef,
          disabled = false,
          id: idParam
        } = parameters;
        const tabRef = React16.useRef(null);
        const id = (0, _utils.unstable_useId)(idParam);
        const {
          value: selectedValue,
          selectionFollowsFocus,
          getTabPanelId
        } = (0, _Tabs.useTabsContext)();
        const tabMetadata = React16.useMemo(() => ({
          disabled,
          ref: tabRef,
          id
        }), [disabled, tabRef, id]);
        const {
          id: value,
          index,
          totalItemCount: totalTabsCount
        } = (0, _useCompoundItem.useCompoundItem)(valueParam, tabMetadata, tabValueGenerator);
        const {
          getRootProps: getTabProps,
          rootRef: listItemRefHandler,
          highlighted,
          selected
        } = (0, _useList.useListItem)({
          item: value
        });
        const {
          getRootProps: getButtonProps,
          rootRef: buttonRefHandler,
          active,
          focusVisible,
          setFocusVisible
        } = (0, _useButton.default)({
          disabled,
          focusableWhenDisabled: !selectionFollowsFocus,
          type: "button"
        });
        const handleRef = (0, _utils.unstable_useForkRef)(tabRef, externalRef, listItemRefHandler, buttonRefHandler);
        const tabPanelId = value !== void 0 ? getTabPanelId(value) : void 0;
        const getRootProps = (otherHandlers = {}) => {
          const resolvedTabProps = {
            ...otherHandlers,
            ...getTabProps(otherHandlers)
          };
          const resolvedButtonProps = {
            ...resolvedTabProps,
            ...getButtonProps(resolvedTabProps)
          };
          return {
            ...resolvedButtonProps,
            role: "tab",
            "aria-controls": tabPanelId,
            "aria-selected": selected,
            id,
            ref: handleRef
          };
        };
        return {
          getRootProps,
          active,
          focusVisible,
          highlighted,
          index,
          rootRef: handleRef,
          // the `selected` state isn't set on the server (it relies on effects to be calculated),
          // so we fall back to checking the `value` prop with the selectedValue from the TabsContext
          selected: selected || value === selectedValue,
          setFocusVisible,
          totalTabsCount
        };
      }
      var _default = useTab;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/useTab/useTab.types.js
  var require_useTab_types = __commonJS({
    "node_modules/@mui/base/node/useTab/useTab.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useTab/index.js
  var require_useTab2 = __commonJS({
    "node_modules/@mui/base/node/useTab/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useTab.default;
        }
      });
      var _useTab = _interopRequireDefault(require_useTab());
      var _useTab2 = require_useTab_types();
      Object.keys(_useTab2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTab2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTab2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/Tab/Tab.js
  var require_Tab = __commonJS({
    "node_modules/@mui/base/node/Tab/Tab.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _tabClasses = require_tabClasses();
      var _useTab = _interopRequireDefault(require_useTab2());
      var _utils2 = require_utils2();
      var _ClassNameConfigurator = require_ClassNameConfigurator();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          selected,
          disabled
        } = ownerState;
        const slots = {
          root: ["root", selected && "selected", disabled && "disabled"]
        };
        return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_tabClasses.getTabUtilityClass));
      };
      var Tab = /* @__PURE__ */ React16.forwardRef(function Tab2(props, forwardedRef) {
        var _slots$root;
        const {
          action,
          children,
          value: valueProp,
          disabled = false,
          onChange,
          onClick,
          onFocus,
          slotProps = {},
          slots = {},
          ...other
        } = props;
        const tabRef = React16.useRef();
        const handleRef = (0, _utils.unstable_useForkRef)(tabRef, forwardedRef);
        const {
          active,
          highlighted,
          selected,
          getRootProps
        } = (0, _useTab.default)({
          ...props,
          rootRef: handleRef
        });
        const ownerState = {
          ...props,
          active,
          disabled,
          highlighted,
          selected
        };
        const classes = useUtilityClasses4(ownerState);
        const TabRoot = (_slots$root = slots.root) != null ? _slots$root : "button";
        const tabRootProps = (0, _utils2.useSlotProps)({
          elementType: TabRoot,
          getSlotProps: getRootProps,
          externalSlotProps: slotProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabRoot, {
          ...tabRootProps,
          children
        });
      });
      true ? Tab.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * A ref for imperative actions. It currently only supports `focusVisible()` action.
         */
        action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
          current: _propTypes.default.shape({
            focusVisible: _propTypes.default.func.isRequired
          })
        })]),
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * If `true`, the component is disabled.
         * @default false
         */
        disabled: _propTypes.default.bool,
        /**
         * Callback invoked when new value is being set.
         */
        onChange: _propTypes.default.func,
        /**
         * The props used for each slot inside the Tab.
         * @default {}
         */
        slotProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        /**
         * The components used for each slot inside the Tab.
         * Either a string to use a HTML element or a component.
         * @default {}
         */
        slots: _propTypes.default.shape({
          root: _propTypes.default.elementType
        }),
        /**
         * You can provide your own value. Otherwise, it falls back to the child position index.
         */
        value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      } : void 0;
      var _default = Tab;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Tab/Tab.types.js
  var require_Tab_types = __commonJS({
    "node_modules/@mui/base/node/Tab/Tab.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/Tab/index.js
  var require_Tab2 = __commonJS({
    "node_modules/@mui/base/node/Tab/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        tabClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Tab.default;
        }
      });
      Object.defineProperty(exports, "tabClasses", {
        enumerable: true,
        get: function() {
          return _tabClasses.default;
        }
      });
      var _Tab = _interopRequireDefault(require_Tab());
      var _Tab2 = require_Tab_types();
      Object.keys(_Tab2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Tab2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Tab2[key];
          }
        });
      });
      var _tabClasses = _interopRequireWildcard(require_tabClasses());
      Object.keys(_tabClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tabClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tabClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TextareaAutosize/TextareaAutosize.js
  var require_TextareaAutosize = __commonJS({
    "node_modules/@mui/base/node/TextareaAutosize/TextareaAutosize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var ReactDOM2 = _interopRequireWildcard(require_react_dom());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getStyleValue(value) {
        return parseInt(value, 10) || 0;
      }
      var styles = {
        shadow: {
          // Visibility needed to hide the extra text area on iPads
          visibility: "hidden",
          // Remove from the content flow
          position: "absolute",
          // Ignore the scrollbar width
          overflow: "hidden",
          height: 0,
          top: 0,
          left: 0,
          // Create a new layer, increase the isolation of the computed values
          transform: "translateZ(0)"
        }
      };
      function isEmpty(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
      }
      var TextareaAutosize = /* @__PURE__ */ React16.forwardRef(function TextareaAutosize2(props, forwardedRef) {
        const {
          onChange,
          maxRows,
          minRows = 1,
          style,
          value,
          ...other
        } = props;
        const {
          current: isControlled
        } = React16.useRef(value != null);
        const inputRef = React16.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(forwardedRef, inputRef);
        const shadowRef = React16.useRef(null);
        const renders = React16.useRef(0);
        const [state, setState] = React16.useState({
          outerHeightStyle: 0
        });
        const getUpdatedState = React16.useCallback(() => {
          const input = inputRef.current;
          const containerWindow = (0, _utils.unstable_ownerWindow)(input);
          const computedStyle = containerWindow.getComputedStyle(input);
          if (computedStyle.width === "0px") {
            return {
              outerHeightStyle: 0
            };
          }
          const inputShallow = shadowRef.current;
          inputShallow.style.width = computedStyle.width;
          inputShallow.value = input.value || props.placeholder || "x";
          if (inputShallow.value.slice(-1) === "\n") {
            inputShallow.value += " ";
          }
          const boxSizing = computedStyle.boxSizing;
          const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
          const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
          const innerHeight = inputShallow.scrollHeight;
          inputShallow.value = "x";
          const singleRowHeight = inputShallow.scrollHeight;
          let outerHeight = innerHeight;
          if (minRows) {
            outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
          }
          if (maxRows) {
            outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
          }
          outerHeight = Math.max(outerHeight, singleRowHeight);
          const outerHeightStyle = outerHeight + (boxSizing === "border-box" ? padding + border : 0);
          const overflow = Math.abs(outerHeight - innerHeight) <= 1;
          return {
            outerHeightStyle,
            overflow
          };
        }, [maxRows, minRows, props.placeholder]);
        const updateState = (prevState, newState) => {
          const {
            outerHeightStyle,
            overflow
          } = newState;
          if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
            renders.current += 1;
            return {
              overflow,
              outerHeightStyle
            };
          }
          if (true) {
            if (renders.current === 20) {
              console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
            }
          }
          return prevState;
        };
        const syncHeight = React16.useCallback(() => {
          const newState = getUpdatedState();
          if (isEmpty(newState)) {
            return;
          }
          setState((prevState) => {
            return updateState(prevState, newState);
          });
        }, [getUpdatedState]);
        const syncHeightWithFlushSync = () => {
          const newState = getUpdatedState();
          if (isEmpty(newState)) {
            return;
          }
          ReactDOM2.flushSync(() => {
            setState((prevState) => {
              return updateState(prevState, newState);
            });
          });
        };
        React16.useEffect(() => {
          const handleResize = (0, _utils.unstable_debounce)(() => {
            renders.current = 0;
            if (inputRef.current) {
              syncHeightWithFlushSync();
            }
          });
          let resizeObserver;
          const input = inputRef.current;
          const containerWindow = (0, _utils.unstable_ownerWindow)(input);
          containerWindow.addEventListener("resize", handleResize);
          if (typeof ResizeObserver !== "undefined") {
            resizeObserver = new ResizeObserver(handleResize);
            resizeObserver.observe(input);
          }
          return () => {
            handleResize.clear();
            containerWindow.removeEventListener("resize", handleResize);
            if (resizeObserver) {
              resizeObserver.disconnect();
            }
          };
        });
        (0, _utils.unstable_useEnhancedEffect)(() => {
          syncHeight();
        });
        React16.useEffect(() => {
          renders.current = 0;
        }, [value]);
        const handleChange = (event) => {
          renders.current = 0;
          if (!isControlled) {
            syncHeight();
          }
          if (onChange) {
            onChange(event);
          }
        };
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React16.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)("textarea", {
            value,
            onChange: handleChange,
            ref: handleRef,
            rows: minRows,
            style: {
              height: state.outerHeightStyle,
              // Need a large enough difference to allow scrolling.
              // This prevents infinite rendering loop.
              overflow: state.overflow ? "hidden" : void 0,
              ...style
            },
            ...other
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)("textarea", {
            "aria-hidden": true,
            className: props.className,
            readOnly: true,
            ref: shadowRef,
            tabIndex: -1,
            style: {
              ...styles.shadow,
              ...style,
              padding: 0
            }
          })]
        });
      });
      true ? TextareaAutosize.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        className: _propTypes.default.string,
        /**
         * Maximum number of rows to display.
         */
        maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        /**
         * Minimum number of rows to display.
         * @default 1
         */
        minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        /**
         * @ignore
         */
        onChange: _propTypes.default.func,
        /**
         * @ignore
         */
        placeholder: _propTypes.default.string,
        /**
         * @ignore
         */
        style: _propTypes.default.object,
        /**
         * @ignore
         */
        value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.number, _propTypes.default.string])
      } : void 0;
      var _default = TextareaAutosize;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TextareaAutosize/TextareaAutosize.types.js
  var require_TextareaAutosize_types = __commonJS({
    "node_modules/@mui/base/node/TextareaAutosize/TextareaAutosize.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TextareaAutosize/index.js
  var require_TextareaAutosize2 = __commonJS({
    "node_modules/@mui/base/node/TextareaAutosize/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TextareaAutosize.default;
        }
      });
      var _TextareaAutosize = _interopRequireDefault(require_TextareaAutosize());
      var _TextareaAutosize2 = require_TextareaAutosize_types();
      Object.keys(_TextareaAutosize2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TextareaAutosize2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TextareaAutosize2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/useAutocomplete/useAutocomplete.js
  var require_useAutocomplete = __commonJS({
    "node_modules/@mui/base/node/useAutocomplete/useAutocomplete.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createFilterOptions = createFilterOptions;
      exports.default = useAutocomplete;
      var React16 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function stripDiacritics(string) {
        return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
      }
      function createFilterOptions(config = {}) {
        const {
          ignoreAccents = true,
          ignoreCase = true,
          limit,
          matchFrom = "any",
          stringify: stringify2,
          trim: trim2 = false
        } = config;
        return (options, {
          inputValue,
          getOptionLabel
        }) => {
          let input = trim2 ? inputValue.trim() : inputValue;
          if (ignoreCase) {
            input = input.toLowerCase();
          }
          if (ignoreAccents) {
            input = stripDiacritics(input);
          }
          const filteredOptions = !input ? options : options.filter((option) => {
            let candidate = (stringify2 || getOptionLabel)(option);
            if (ignoreCase) {
              candidate = candidate.toLowerCase();
            }
            if (ignoreAccents) {
              candidate = stripDiacritics(candidate);
            }
            return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
          });
          return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
        };
      }
      function findIndex2(array, comp) {
        for (let i = 0; i < array.length; i += 1) {
          if (comp(array[i])) {
            return i;
          }
        }
        return -1;
      }
      var defaultFilterOptions = createFilterOptions();
      var pageSize = 5;
      var defaultIsActiveElementInListbox = (listboxRef) => {
        var _listboxRef$current$p;
        return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
      };
      function useAutocomplete(props) {
        const {
          // eslint-disable-next-line @typescript-eslint/naming-convention
          unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
          // eslint-disable-next-line @typescript-eslint/naming-convention
          unstable_classNamePrefix = "Mui",
          autoComplete = false,
          autoHighlight = false,
          autoSelect = false,
          blurOnSelect = false,
          clearOnBlur = !props.freeSolo,
          clearOnEscape = false,
          componentName = "useAutocomplete",
          defaultValue = props.multiple ? [] : null,
          disableClearable = false,
          disableCloseOnSelect = false,
          disabled: disabledProp,
          disabledItemsFocusable = false,
          disableListWrap = false,
          filterOptions = defaultFilterOptions,
          filterSelectedOptions = false,
          freeSolo = false,
          getOptionDisabled,
          getOptionLabel: getOptionLabelProp = (option) => {
            var _option$label;
            return (_option$label = option.label) != null ? _option$label : option;
          },
          groupBy,
          handleHomeEndKeys = !props.freeSolo,
          id: idProp,
          includeInputInList = false,
          inputValue: inputValueProp,
          isOptionEqualToValue = (option, value2) => option === value2,
          multiple = false,
          onChange,
          onClose,
          onHighlightChange,
          onInputChange,
          onOpen,
          open: openProp,
          openOnFocus = false,
          options,
          readOnly = false,
          selectOnFocus = !props.freeSolo,
          value: valueProp
        } = props;
        const id = (0, _utils.unstable_useId)(idProp);
        let getOptionLabel = getOptionLabelProp;
        getOptionLabel = (option) => {
          const optionLabel = getOptionLabelProp(option);
          if (typeof optionLabel !== "string") {
            if (true) {
              const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
              console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
            }
            return String(optionLabel);
          }
          return optionLabel;
        };
        const ignoreFocus = React16.useRef(false);
        const firstFocus = React16.useRef(true);
        const inputRef = React16.useRef(null);
        const listboxRef = React16.useRef(null);
        const [anchorEl, setAnchorEl] = React16.useState(null);
        const [focusedTag, setFocusedTag] = React16.useState(-1);
        const defaultHighlighted = autoHighlight ? 0 : -1;
        const highlightedIndexRef = React16.useRef(defaultHighlighted);
        const [value, setValueState] = (0, _utils.unstable_useControlled)({
          controlled: valueProp,
          default: defaultValue,
          name: componentName
        });
        const [inputValue, setInputValueState] = (0, _utils.unstable_useControlled)({
          controlled: inputValueProp,
          default: "",
          name: componentName,
          state: "inputValue"
        });
        const [focused, setFocused] = React16.useState(false);
        const resetInputValue = React16.useCallback((event, newValue) => {
          const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
          if (!isOptionSelected && !clearOnBlur) {
            return;
          }
          let newInputValue;
          if (multiple) {
            newInputValue = "";
          } else if (newValue == null) {
            newInputValue = "";
          } else {
            const optionLabel = getOptionLabel(newValue);
            newInputValue = typeof optionLabel === "string" ? optionLabel : "";
          }
          if (inputValue === newInputValue) {
            return;
          }
          setInputValueState(newInputValue);
          if (onInputChange) {
            onInputChange(event, newInputValue, "reset");
          }
        }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
        const [open, setOpenState] = (0, _utils.unstable_useControlled)({
          controlled: openProp,
          default: false,
          name: componentName,
          state: "open"
        });
        const [inputPristine, setInputPristine] = React16.useState(true);
        const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
        const popupOpen = open && !readOnly;
        const filteredOptions = popupOpen ? filterOptions(
          options.filter((option) => {
            if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
              return false;
            }
            return true;
          }),
          // we use the empty string to manipulate `filterOptions` to not filter any options
          // i.e. the filter predicate always returns true
          {
            inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
            getOptionLabel
          }
        ) : [];
        const previousProps = (0, _utils.usePreviousProps)({
          filteredOptions,
          value
        });
        React16.useEffect(() => {
          const valueChange = value !== previousProps.value;
          if (focused && !valueChange) {
            return;
          }
          if (freeSolo && !valueChange) {
            return;
          }
          resetInputValue(null, value);
        }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
        const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
        if (true) {
          if (value !== null && !freeSolo && options.length > 0) {
            const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
            if (missingValue.length > 0) {
              console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
            }
          }
        }
        const focusTag = (0, _utils.unstable_useEventCallback)((tagToFocus) => {
          if (tagToFocus === -1) {
            inputRef.current.focus();
          } else {
            anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
          }
        });
        React16.useEffect(() => {
          if (multiple && focusedTag > value.length - 1) {
            setFocusedTag(-1);
            focusTag(-1);
          }
        }, [value, multiple, focusedTag, focusTag]);
        function validOptionIndex(index, direction) {
          if (!listboxRef.current || index === -1) {
            return -1;
          }
          let nextFocus = index;
          while (true) {
            if (direction === "next" && nextFocus === filteredOptions.length || direction === "previous" && nextFocus === -1) {
              return -1;
            }
            const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
            const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
            if (option && !option.hasAttribute("tabindex") || nextFocusDisabled) {
              nextFocus += direction === "next" ? 1 : -1;
            } else {
              return nextFocus;
            }
          }
        }
        const setHighlightedIndex = (0, _utils.unstable_useEventCallback)(({
          event,
          index,
          reason = "auto"
        }) => {
          highlightedIndexRef.current = index;
          if (index === -1) {
            inputRef.current.removeAttribute("aria-activedescendant");
          } else {
            inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
          }
          if (onHighlightChange) {
            onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
          }
          if (!listboxRef.current) {
            return;
          }
          const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
          if (prev2) {
            prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
            prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
          }
          let listboxNode = listboxRef.current;
          if (listboxRef.current.getAttribute("role") !== "listbox") {
            listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
          }
          if (!listboxNode) {
            return;
          }
          if (index === -1) {
            listboxNode.scrollTop = 0;
            return;
          }
          const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
          if (!option) {
            return;
          }
          option.classList.add(`${unstable_classNamePrefix}-focused`);
          if (reason === "keyboard") {
            option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
          }
          if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse") {
            const element = option;
            const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
            const elementBottom = element.offsetTop + element.offsetHeight;
            if (elementBottom > scrollBottom) {
              listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
            } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
              listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
            }
          }
        });
        const changeHighlightedIndex = (0, _utils.unstable_useEventCallback)(({
          event,
          diff,
          direction = "next",
          reason = "auto"
        }) => {
          if (!popupOpen) {
            return;
          }
          const getNextIndex = () => {
            const maxIndex = filteredOptions.length - 1;
            if (diff === "reset") {
              return defaultHighlighted;
            }
            if (diff === "start") {
              return 0;
            }
            if (diff === "end") {
              return maxIndex;
            }
            const newIndex = highlightedIndexRef.current + diff;
            if (newIndex < 0) {
              if (newIndex === -1 && includeInputInList) {
                return -1;
              }
              if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
                return 0;
              }
              return maxIndex;
            }
            if (newIndex > maxIndex) {
              if (newIndex === maxIndex + 1 && includeInputInList) {
                return -1;
              }
              if (disableListWrap || Math.abs(diff) > 1) {
                return maxIndex;
              }
              return 0;
            }
            return newIndex;
          };
          const nextIndex = validOptionIndex(getNextIndex(), direction);
          setHighlightedIndex({
            index: nextIndex,
            reason,
            event
          });
          if (autoComplete && diff !== "reset") {
            if (nextIndex === -1) {
              inputRef.current.value = inputValue;
            } else {
              const option = getOptionLabel(filteredOptions[nextIndex]);
              inputRef.current.value = option;
              const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
              if (index === 0 && inputValue.length > 0) {
                inputRef.current.setSelectionRange(inputValue.length, option.length);
              }
            }
          }
        });
        const checkHighlightedOptionExists = () => {
          const isSameValue = (value1, value2) => {
            const label1 = value1 ? getOptionLabel(value1) : "";
            const label2 = value2 ? getOptionLabel(value2) : "";
            return label1 === label2;
          };
          if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
            const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
            if (previousHighlightedOption) {
              const previousHighlightedOptionExists = filteredOptions.some((option) => {
                return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
              });
              if (previousHighlightedOptionExists) {
                return true;
              }
            }
          }
          return false;
        };
        const syncHighlightedIndex = React16.useCallback(() => {
          if (!popupOpen) {
            return;
          }
          if (checkHighlightedOptionExists()) {
            return;
          }
          const valueItem = multiple ? value[0] : value;
          if (filteredOptions.length === 0 || valueItem == null) {
            changeHighlightedIndex({
              diff: "reset"
            });
            return;
          }
          if (!listboxRef.current) {
            return;
          }
          if (valueItem != null) {
            const currentOption = filteredOptions[highlightedIndexRef.current];
            if (multiple && currentOption && findIndex2(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
              return;
            }
            const itemIndex = findIndex2(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
            if (itemIndex === -1) {
              changeHighlightedIndex({
                diff: "reset"
              });
            } else {
              setHighlightedIndex({
                index: itemIndex
              });
            }
            return;
          }
          if (highlightedIndexRef.current >= filteredOptions.length - 1) {
            setHighlightedIndex({
              index: filteredOptions.length - 1
            });
            return;
          }
          setHighlightedIndex({
            index: highlightedIndexRef.current
          });
        }, [
          // Only sync the highlighted index when the option switch between empty and not
          filteredOptions.length,
          // Don't sync the highlighted index with the value when multiple
          // eslint-disable-next-line react-hooks/exhaustive-deps
          multiple ? false : value,
          filterSelectedOptions,
          changeHighlightedIndex,
          setHighlightedIndex,
          popupOpen,
          inputValue,
          multiple
        ]);
        const handleListboxRef = (0, _utils.unstable_useEventCallback)((node2) => {
          (0, _utils.unstable_setRef)(listboxRef, node2);
          if (!node2) {
            return;
          }
          syncHighlightedIndex();
        });
        if (true) {
          React16.useEffect(() => {
            if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
              if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
                console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
              } else {
                console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
              }
            }
          }, [componentName]);
        }
        React16.useEffect(() => {
          syncHighlightedIndex();
        }, [syncHighlightedIndex]);
        const handleOpen = (event) => {
          if (open) {
            return;
          }
          setOpenState(true);
          setInputPristine(true);
          if (onOpen) {
            onOpen(event);
          }
        };
        const handleClose = (event, reason) => {
          if (!open) {
            return;
          }
          setOpenState(false);
          if (onClose) {
            onClose(event, reason);
          }
        };
        const handleValue = (event, newValue, reason, details) => {
          if (multiple) {
            if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
              return;
            }
          } else if (value === newValue) {
            return;
          }
          if (onChange) {
            onChange(event, newValue, reason, details);
          }
          setValueState(newValue);
        };
        const isTouch = React16.useRef(false);
        const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
          let reason = reasonProp;
          let newValue = option;
          if (multiple) {
            newValue = Array.isArray(value) ? value.slice() : [];
            if (true) {
              const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
              if (matches.length > 1) {
                console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
              }
            }
            const itemIndex = findIndex2(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
            if (itemIndex === -1) {
              newValue.push(option);
            } else if (origin !== "freeSolo") {
              newValue.splice(itemIndex, 1);
              reason = "removeOption";
            }
          }
          resetInputValue(event, newValue);
          handleValue(event, newValue, reason, {
            option
          });
          if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
            handleClose(event, reason);
          }
          if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
            inputRef.current.blur();
          }
        };
        function validTagIndex(index, direction) {
          if (index === -1) {
            return -1;
          }
          let nextFocus = index;
          while (true) {
            if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
              return -1;
            }
            const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
            if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
              nextFocus += direction === "next" ? 1 : -1;
            } else {
              return nextFocus;
            }
          }
        }
        const handleFocusTag = (event, direction) => {
          if (!multiple) {
            return;
          }
          if (inputValue === "") {
            handleClose(event, "toggleInput");
          }
          let nextTag = focusedTag;
          if (focusedTag === -1) {
            if (inputValue === "" && direction === "previous") {
              nextTag = value.length - 1;
            }
          } else {
            nextTag += direction === "next" ? 1 : -1;
            if (nextTag < 0) {
              nextTag = 0;
            }
            if (nextTag === value.length) {
              nextTag = -1;
            }
          }
          nextTag = validTagIndex(nextTag, direction);
          setFocusedTag(nextTag);
          focusTag(nextTag);
        };
        const handleClear = (event) => {
          ignoreFocus.current = true;
          setInputValueState("");
          if (onInputChange) {
            onInputChange(event, "", "clear");
          }
          handleValue(event, multiple ? [] : null, "clear");
        };
        const handleKeyDown = (other) => (event) => {
          if (other.onKeyDown) {
            other.onKeyDown(event);
          }
          if (event.defaultMuiPrevented) {
            return;
          }
          if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
            setFocusedTag(-1);
            focusTag(-1);
          }
          if (event.which !== 229) {
            switch (event.key) {
              case "Home":
                if (popupOpen && handleHomeEndKeys) {
                  event.preventDefault();
                  changeHighlightedIndex({
                    diff: "start",
                    direction: "next",
                    reason: "keyboard",
                    event
                  });
                }
                break;
              case "End":
                if (popupOpen && handleHomeEndKeys) {
                  event.preventDefault();
                  changeHighlightedIndex({
                    diff: "end",
                    direction: "previous",
                    reason: "keyboard",
                    event
                  });
                }
                break;
              case "PageUp":
                event.preventDefault();
                changeHighlightedIndex({
                  diff: -pageSize,
                  direction: "previous",
                  reason: "keyboard",
                  event
                });
                handleOpen(event);
                break;
              case "PageDown":
                event.preventDefault();
                changeHighlightedIndex({
                  diff: pageSize,
                  direction: "next",
                  reason: "keyboard",
                  event
                });
                handleOpen(event);
                break;
              case "ArrowDown":
                event.preventDefault();
                changeHighlightedIndex({
                  diff: 1,
                  direction: "next",
                  reason: "keyboard",
                  event
                });
                handleOpen(event);
                break;
              case "ArrowUp":
                event.preventDefault();
                changeHighlightedIndex({
                  diff: -1,
                  direction: "previous",
                  reason: "keyboard",
                  event
                });
                handleOpen(event);
                break;
              case "ArrowLeft":
                handleFocusTag(event, "previous");
                break;
              case "ArrowRight":
                handleFocusTag(event, "next");
                break;
              case "Enter":
                if (highlightedIndexRef.current !== -1 && popupOpen) {
                  const option = filteredOptions[highlightedIndexRef.current];
                  const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
                  event.preventDefault();
                  if (disabled) {
                    return;
                  }
                  selectNewValue(event, option, "selectOption");
                  if (autoComplete) {
                    inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                  }
                } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
                  if (multiple) {
                    event.preventDefault();
                  }
                  selectNewValue(event, inputValue, "createOption", "freeSolo");
                }
                break;
              case "Escape":
                if (popupOpen) {
                  event.preventDefault();
                  event.stopPropagation();
                  handleClose(event, "escape");
                } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
                  event.preventDefault();
                  event.stopPropagation();
                  handleClear(event);
                }
                break;
              case "Backspace":
                if (multiple && !readOnly && inputValue === "" && value.length > 0) {
                  const index = focusedTag === -1 ? value.length - 1 : focusedTag;
                  const newValue = value.slice();
                  newValue.splice(index, 1);
                  handleValue(event, newValue, "removeOption", {
                    option: value[index]
                  });
                }
                break;
              case "Delete":
                if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
                  const index = focusedTag;
                  const newValue = value.slice();
                  newValue.splice(index, 1);
                  handleValue(event, newValue, "removeOption", {
                    option: value[index]
                  });
                }
                break;
              default:
            }
          }
        };
        const handleFocus = (event) => {
          setFocused(true);
          if (openOnFocus && !ignoreFocus.current) {
            handleOpen(event);
          }
        };
        const handleBlur = (event) => {
          if (unstable_isActiveElementInListbox(listboxRef)) {
            inputRef.current.focus();
            return;
          }
          setFocused(false);
          firstFocus.current = true;
          ignoreFocus.current = false;
          if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
            selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
          } else if (autoSelect && freeSolo && inputValue !== "") {
            selectNewValue(event, inputValue, "blur", "freeSolo");
          } else if (clearOnBlur) {
            resetInputValue(event, value);
          }
          handleClose(event, "blur");
        };
        const handleInputChange = (event) => {
          const newValue = event.target.value;
          if (inputValue !== newValue) {
            setInputValueState(newValue);
            setInputPristine(false);
            if (onInputChange) {
              onInputChange(event, newValue, "input");
            }
          }
          if (newValue === "") {
            if (!disableClearable && !multiple) {
              handleValue(event, null, "clear");
            }
          } else {
            handleOpen(event);
          }
        };
        const handleOptionMouseMove = (event) => {
          const index = Number(event.currentTarget.getAttribute("data-option-index"));
          if (highlightedIndexRef.current !== index) {
            setHighlightedIndex({
              event,
              index,
              reason: "mouse"
            });
          }
        };
        const handleOptionTouchStart = (event) => {
          setHighlightedIndex({
            event,
            index: Number(event.currentTarget.getAttribute("data-option-index")),
            reason: "touch"
          });
          isTouch.current = true;
        };
        const handleOptionClick = (event) => {
          const index = Number(event.currentTarget.getAttribute("data-option-index"));
          selectNewValue(event, filteredOptions[index], "selectOption");
          isTouch.current = false;
        };
        const handleTagDelete = (index) => (event) => {
          const newValue = value.slice();
          newValue.splice(index, 1);
          handleValue(event, newValue, "removeOption", {
            option: value[index]
          });
        };
        const handlePopupIndicator = (event) => {
          if (open) {
            handleClose(event, "toggleInput");
          } else {
            handleOpen(event);
          }
        };
        const handleMouseDown = (event) => {
          if (!event.currentTarget.contains(event.target)) {
            return;
          }
          if (event.target.getAttribute("id") !== id) {
            event.preventDefault();
          }
        };
        const handleClick = (event) => {
          if (!event.currentTarget.contains(event.target)) {
            return;
          }
          inputRef.current.focus();
          if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
            inputRef.current.select();
          }
          firstFocus.current = false;
        };
        const handleInputMouseDown = (event) => {
          if (inputValue === "" || !open) {
            handlePopupIndicator(event);
          }
        };
        let dirty = freeSolo && inputValue.length > 0;
        dirty = dirty || (multiple ? value.length > 0 : value !== null);
        let groupedOptions = filteredOptions;
        if (groupBy) {
          const indexBy = /* @__PURE__ */ new Map();
          let warn = false;
          groupedOptions = filteredOptions.reduce((acc, option, index) => {
            const group = groupBy(option);
            if (acc.length > 0 && acc[acc.length - 1].group === group) {
              acc[acc.length - 1].options.push(option);
            } else {
              if (true) {
                if (indexBy.get(group) && !warn) {
                  console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
                  warn = true;
                }
                indexBy.set(group, true);
              }
              acc.push({
                key: index,
                index,
                group,
                options: [option]
              });
            }
            return acc;
          }, []);
        }
        if (disabledProp && focused) {
          handleBlur();
        }
        return {
          getRootProps: (other = {}) => ({
            "aria-owns": listboxAvailable ? `${id}-listbox` : null,
            ...other,
            onKeyDown: handleKeyDown(other),
            onMouseDown: handleMouseDown,
            onClick: handleClick
          }),
          getInputLabelProps: () => ({
            id: `${id}-label`,
            htmlFor: id
          }),
          getInputProps: () => ({
            id,
            value: inputValue,
            onBlur: handleBlur,
            onFocus: handleFocus,
            onChange: handleInputChange,
            onMouseDown: handleInputMouseDown,
            // if open then this is handled imperatively so don't let react override
            // only have an opinion about this when closed
            "aria-activedescendant": popupOpen ? "" : null,
            "aria-autocomplete": autoComplete ? "both" : "list",
            "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
            "aria-expanded": listboxAvailable,
            // Disable browser's suggestion that might overlap with the popup.
            // Handle autocomplete but not autofill.
            autoComplete: "off",
            ref: inputRef,
            autoCapitalize: "none",
            spellCheck: "false",
            role: "combobox",
            disabled: disabledProp
          }),
          getClearProps: () => ({
            tabIndex: -1,
            onClick: handleClear
          }),
          getPopupIndicatorProps: () => ({
            tabIndex: -1,
            onClick: handlePopupIndicator
          }),
          getTagProps: ({
            index
          }) => ({
            key: index,
            "data-tag-index": index,
            tabIndex: -1,
            ...!readOnly && {
              onDelete: handleTagDelete(index)
            }
          }),
          getListboxProps: () => ({
            role: "listbox",
            id: `${id}-listbox`,
            "aria-labelledby": `${id}-label`,
            ref: handleListboxRef,
            onMouseDown: (event) => {
              event.preventDefault();
            }
          }),
          getOptionProps: ({
            index,
            option
          }) => {
            const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
            return {
              key: getOptionLabel(option),
              tabIndex: -1,
              role: "option",
              id: `${id}-option-${index}`,
              onMouseMove: handleOptionMouseMove,
              onClick: handleOptionClick,
              onTouchStart: handleOptionTouchStart,
              "data-option-index": index,
              "aria-disabled": disabled,
              "aria-selected": selected
            };
          },
          id,
          inputValue,
          value,
          dirty,
          expanded: popupOpen && anchorEl,
          popupOpen,
          focused: focused || focusedTag !== -1,
          anchorEl,
          setAnchorEl,
          focusedTag,
          groupedOptions
        };
      }
    }
  });

  // node_modules/@mui/base/node/useAutocomplete/index.js
  var require_useAutocomplete2 = __commonJS({
    "node_modules/@mui/base/node/useAutocomplete/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useAutocomplete.default;
        }
      });
      var _useAutocomplete = _interopRequireWildcard(require_useAutocomplete());
      Object.keys(_useAutocomplete).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useAutocomplete[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useAutocomplete[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/useTabPanel/useTabPanel.types.js
  var require_useTabPanel_types = __commonJS({
    "node_modules/@mui/base/node/useTabPanel/useTabPanel.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/useTabPanel/index.js
  var require_useTabPanel2 = __commonJS({
    "node_modules/@mui/base/node/useTabPanel/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useTabPanel.default;
        }
      });
      var _useTabPanel = _interopRequireDefault(require_useTabPanel());
      var _useTabPanel2 = require_useTabPanel_types();
      Object.keys(_useTabPanel2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabPanel2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabPanel2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/index.js
  var require_node3 = __commonJS({
    "node_modules/@mui/base/node/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        Badge: true,
        Button: true,
        ClickAwayListener: true,
        unstable_composeClasses: true,
        FocusTrap: true,
        FormControl: true,
        Input: true,
        Menu: true,
        MenuItem: true,
        Modal: true,
        NoSsr: true,
        OptionGroup: true,
        Option: true,
        Popper: true,
        Portal: true,
        Select: true,
        Slider: true,
        Snackbar: true,
        Switch: true,
        TablePagination: true,
        TabPanel: true,
        TabsList: true,
        Tabs: true,
        Tab: true,
        TextareaAutosize: true,
        useAutocomplete: true,
        useBadge: true,
        useButton: true,
        useInput: true,
        useMenu: true,
        useMenuItem: true,
        useOption: true,
        useSelect: true,
        useSlider: true,
        useSnackbar: true,
        useSwitch: true,
        useTab: true,
        useTabPanel: true,
        useTabs: true,
        useTabsList: true
      };
      Object.defineProperty(exports, "Badge", {
        enumerable: true,
        get: function() {
          return _Badge.default;
        }
      });
      Object.defineProperty(exports, "Button", {
        enumerable: true,
        get: function() {
          return _Button.default;
        }
      });
      Object.defineProperty(exports, "ClickAwayListener", {
        enumerable: true,
        get: function() {
          return _ClickAwayListener.default;
        }
      });
      Object.defineProperty(exports, "FocusTrap", {
        enumerable: true,
        get: function() {
          return _FocusTrap.default;
        }
      });
      Object.defineProperty(exports, "FormControl", {
        enumerable: true,
        get: function() {
          return _FormControl.default;
        }
      });
      Object.defineProperty(exports, "Input", {
        enumerable: true,
        get: function() {
          return _Input.default;
        }
      });
      Object.defineProperty(exports, "Menu", {
        enumerable: true,
        get: function() {
          return _Menu.default;
        }
      });
      Object.defineProperty(exports, "MenuItem", {
        enumerable: true,
        get: function() {
          return _MenuItem.default;
        }
      });
      Object.defineProperty(exports, "Modal", {
        enumerable: true,
        get: function() {
          return _Modal.default;
        }
      });
      Object.defineProperty(exports, "NoSsr", {
        enumerable: true,
        get: function() {
          return _NoSsr.default;
        }
      });
      Object.defineProperty(exports, "Option", {
        enumerable: true,
        get: function() {
          return _Option.default;
        }
      });
      Object.defineProperty(exports, "OptionGroup", {
        enumerable: true,
        get: function() {
          return _OptionGroup.default;
        }
      });
      Object.defineProperty(exports, "Popper", {
        enumerable: true,
        get: function() {
          return _Popper.default;
        }
      });
      Object.defineProperty(exports, "Portal", {
        enumerable: true,
        get: function() {
          return _Portal.default;
        }
      });
      Object.defineProperty(exports, "Select", {
        enumerable: true,
        get: function() {
          return _Select.default;
        }
      });
      Object.defineProperty(exports, "Slider", {
        enumerable: true,
        get: function() {
          return _Slider.default;
        }
      });
      Object.defineProperty(exports, "Snackbar", {
        enumerable: true,
        get: function() {
          return _Snackbar.default;
        }
      });
      Object.defineProperty(exports, "Switch", {
        enumerable: true,
        get: function() {
          return _Switch.default;
        }
      });
      Object.defineProperty(exports, "Tab", {
        enumerable: true,
        get: function() {
          return _Tab.default;
        }
      });
      Object.defineProperty(exports, "TabPanel", {
        enumerable: true,
        get: function() {
          return _TabPanel.default;
        }
      });
      Object.defineProperty(exports, "TablePagination", {
        enumerable: true,
        get: function() {
          return _TablePagination.default;
        }
      });
      Object.defineProperty(exports, "Tabs", {
        enumerable: true,
        get: function() {
          return _Tabs.default;
        }
      });
      Object.defineProperty(exports, "TabsList", {
        enumerable: true,
        get: function() {
          return _TabsList.default;
        }
      });
      Object.defineProperty(exports, "TextareaAutosize", {
        enumerable: true,
        get: function() {
          return _TextareaAutosize.default;
        }
      });
      Object.defineProperty(exports, "unstable_composeClasses", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      Object.defineProperty(exports, "useAutocomplete", {
        enumerable: true,
        get: function() {
          return _useAutocomplete.default;
        }
      });
      Object.defineProperty(exports, "useBadge", {
        enumerable: true,
        get: function() {
          return _useBadge.default;
        }
      });
      Object.defineProperty(exports, "useButton", {
        enumerable: true,
        get: function() {
          return _useButton.default;
        }
      });
      Object.defineProperty(exports, "useInput", {
        enumerable: true,
        get: function() {
          return _useInput.default;
        }
      });
      Object.defineProperty(exports, "useMenu", {
        enumerable: true,
        get: function() {
          return _useMenu.default;
        }
      });
      Object.defineProperty(exports, "useMenuItem", {
        enumerable: true,
        get: function() {
          return _useMenuItem.default;
        }
      });
      Object.defineProperty(exports, "useOption", {
        enumerable: true,
        get: function() {
          return _useOption.default;
        }
      });
      Object.defineProperty(exports, "useSelect", {
        enumerable: true,
        get: function() {
          return _useSelect.default;
        }
      });
      Object.defineProperty(exports, "useSlider", {
        enumerable: true,
        get: function() {
          return _useSlider.default;
        }
      });
      Object.defineProperty(exports, "useSnackbar", {
        enumerable: true,
        get: function() {
          return _useSnackbar.default;
        }
      });
      Object.defineProperty(exports, "useSwitch", {
        enumerable: true,
        get: function() {
          return _useSwitch.default;
        }
      });
      Object.defineProperty(exports, "useTab", {
        enumerable: true,
        get: function() {
          return _useTab.default;
        }
      });
      Object.defineProperty(exports, "useTabPanel", {
        enumerable: true,
        get: function() {
          return _useTabPanel.default;
        }
      });
      Object.defineProperty(exports, "useTabs", {
        enumerable: true,
        get: function() {
          return _useTabs.default;
        }
      });
      Object.defineProperty(exports, "useTabsList", {
        enumerable: true,
        get: function() {
          return _useTabsList.default;
        }
      });
      var _utils = require_utils2();
      Object.keys(_utils).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _utils[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _utils[key];
          }
        });
      });
      var _Badge = _interopRequireWildcard(require_Badge2());
      Object.keys(_Badge).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Badge[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Badge[key];
          }
        });
      });
      var _Button = _interopRequireWildcard(require_Button2());
      Object.keys(_Button).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Button[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Button[key];
          }
        });
      });
      var _ClickAwayListener = _interopRequireDefault(require_ClickAwayListener2());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _FocusTrap = _interopRequireDefault(require_FocusTrap2());
      var _FormControl = _interopRequireWildcard(require_FormControl2());
      Object.keys(_FormControl).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _FormControl[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _FormControl[key];
          }
        });
      });
      var _Input = _interopRequireWildcard(require_Input2());
      Object.keys(_Input).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Input[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Input[key];
          }
        });
      });
      var _Menu = _interopRequireWildcard(require_Menu2());
      Object.keys(_Menu).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Menu[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Menu[key];
          }
        });
      });
      var _MenuItem = _interopRequireWildcard(require_MenuItem2());
      Object.keys(_MenuItem).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MenuItem[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MenuItem[key];
          }
        });
      });
      var _Modal = _interopRequireWildcard(require_Modal2());
      Object.keys(_Modal).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Modal[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Modal[key];
          }
        });
      });
      var _NoSsr = _interopRequireDefault(require_NoSsr2());
      var _OptionGroup = _interopRequireWildcard(require_OptionGroup2());
      Object.keys(_OptionGroup).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _OptionGroup[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _OptionGroup[key];
          }
        });
      });
      var _Option = _interopRequireWildcard(require_Option2());
      Object.keys(_Option).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Option[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Option[key];
          }
        });
      });
      var _Popper = _interopRequireDefault(require_Popper2());
      var _Portal = _interopRequireDefault(require_Portal2());
      var _Select = _interopRequireWildcard(require_Select2());
      Object.keys(_Select).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Select[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Select[key];
          }
        });
      });
      var _Slider = _interopRequireWildcard(require_Slider2());
      Object.keys(_Slider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Slider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Slider[key];
          }
        });
      });
      var _Snackbar = _interopRequireWildcard(require_Snackbar2());
      Object.keys(_Snackbar).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Snackbar[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Snackbar[key];
          }
        });
      });
      var _Switch = _interopRequireWildcard(require_Switch2());
      Object.keys(_Switch).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Switch[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Switch[key];
          }
        });
      });
      var _TablePagination = _interopRequireWildcard(require_TablePagination2());
      Object.keys(_TablePagination).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TablePagination[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TablePagination[key];
          }
        });
      });
      var _TabPanel = _interopRequireWildcard(require_TabPanel2());
      Object.keys(_TabPanel).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabPanel[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabPanel[key];
          }
        });
      });
      var _TabsList = _interopRequireWildcard(require_TabsList2());
      Object.keys(_TabsList).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsList[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsList[key];
          }
        });
      });
      var _Tabs = _interopRequireWildcard(require_Tabs2());
      Object.keys(_Tabs).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Tabs[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Tabs[key];
          }
        });
      });
      var _Tab = _interopRequireWildcard(require_Tab2());
      Object.keys(_Tab).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Tab[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Tab[key];
          }
        });
      });
      var _TextareaAutosize = _interopRequireDefault(require_TextareaAutosize2());
      var _useAutocomplete = _interopRequireWildcard(require_useAutocomplete2());
      Object.keys(_useAutocomplete).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useAutocomplete[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useAutocomplete[key];
          }
        });
      });
      var _useBadge = _interopRequireWildcard(require_useBadge2());
      Object.keys(_useBadge).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useBadge[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useBadge[key];
          }
        });
      });
      var _useButton = _interopRequireWildcard(require_useButton2());
      Object.keys(_useButton).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useButton[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useButton[key];
          }
        });
      });
      var _useInput = _interopRequireWildcard(require_useInput2());
      Object.keys(_useInput).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useInput[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useInput[key];
          }
        });
      });
      var _useMenu = _interopRequireWildcard(require_useMenu2());
      Object.keys(_useMenu).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useMenu[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useMenu[key];
          }
        });
      });
      var _useMenuItem = _interopRequireWildcard(require_useMenuItem2());
      Object.keys(_useMenuItem).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useMenuItem[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useMenuItem[key];
          }
        });
      });
      var _useOption = _interopRequireWildcard(require_useOption2());
      Object.keys(_useOption).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useOption[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useOption[key];
          }
        });
      });
      var _useSelect = _interopRequireWildcard(require_useSelect2());
      Object.keys(_useSelect).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSelect[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSelect[key];
          }
        });
      });
      var _useSlider = _interopRequireWildcard(require_useSlider2());
      Object.keys(_useSlider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSlider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSlider[key];
          }
        });
      });
      var _useSnackbar = _interopRequireWildcard(require_useSnackbar2());
      Object.keys(_useSnackbar).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSnackbar[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSnackbar[key];
          }
        });
      });
      var _useSwitch = _interopRequireWildcard(require_useSwitch2());
      Object.keys(_useSwitch).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSwitch[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSwitch[key];
          }
        });
      });
      var _useTab = _interopRequireWildcard(require_useTab2());
      Object.keys(_useTab).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTab[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTab[key];
          }
        });
      });
      var _useTabPanel = _interopRequireWildcard(require_useTabPanel2());
      Object.keys(_useTabPanel).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabPanel[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabPanel[key];
          }
        });
      });
      var _useTabs = _interopRequireWildcard(require_useTabs2());
      Object.keys(_useTabs).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabs[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabs[key];
          }
        });
      });
      var _useTabsList = _interopRequireWildcard(require_useTabsList2());
      Object.keys(_useTabsList).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabsList[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabsList[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/className/index.js
  var require_className = __commonJS({
    "node_modules/@mui/base/node/className/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "unstable_ClassNameGenerator", {
        enumerable: true,
        get: function() {
          return _utils.unstable_ClassNameGenerator;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/material/node/utils/capitalize.js
  var require_capitalize2 = __commonJS({
    "node_modules/@mui/material/node/utils/capitalize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_capitalize;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/createChainedFunction.js
  var require_createChainedFunction2 = __commonJS({
    "node_modules/@mui/material/node/utils/createChainedFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_createChainedFunction;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/createMixins.js
  var require_createMixins = __commonJS({
    "node_modules/@mui/material/node/styles/createMixins.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createMixins2;
      function createMixins2(breakpoints, mixins) {
        return {
          toolbar: {
            minHeight: 56,
            [breakpoints.up("xs")]: {
              "@media (orientation: landscape)": {
                minHeight: 48
              }
            },
            [breakpoints.up("sm")]: {
              minHeight: 64
            }
          },
          ...mixins
        };
      }
    }
  });

  // node_modules/@mui/material/node/colors/common.js
  var require_common = __commonJS({
    "node_modules/@mui/material/node/colors/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var common2 = {
        black: "#000",
        white: "#fff"
      };
      var _default = common2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/grey.js
  var require_grey = __commonJS({
    "node_modules/@mui/material/node/colors/grey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var grey2 = {
        50: "#fafafa",
        100: "#f5f5f5",
        200: "#eeeeee",
        300: "#e0e0e0",
        400: "#bdbdbd",
        500: "#9e9e9e",
        600: "#757575",
        700: "#616161",
        800: "#424242",
        900: "#212121",
        A100: "#f5f5f5",
        A200: "#eeeeee",
        A400: "#bdbdbd",
        A700: "#616161"
      };
      var _default = grey2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/purple.js
  var require_purple = __commonJS({
    "node_modules/@mui/material/node/colors/purple.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var purple2 = {
        50: "#f3e5f5",
        100: "#e1bee7",
        200: "#ce93d8",
        300: "#ba68c8",
        400: "#ab47bc",
        500: "#9c27b0",
        600: "#8e24aa",
        700: "#7b1fa2",
        800: "#6a1b9a",
        900: "#4a148c",
        A100: "#ea80fc",
        A200: "#e040fb",
        A400: "#d500f9",
        A700: "#aa00ff"
      };
      var _default = purple2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/red.js
  var require_red = __commonJS({
    "node_modules/@mui/material/node/colors/red.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var red2 = {
        50: "#ffebee",
        100: "#ffcdd2",
        200: "#ef9a9a",
        300: "#e57373",
        400: "#ef5350",
        500: "#f44336",
        600: "#e53935",
        700: "#d32f2f",
        800: "#c62828",
        900: "#b71c1c",
        A100: "#ff8a80",
        A200: "#ff5252",
        A400: "#ff1744",
        A700: "#d50000"
      };
      var _default = red2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/orange.js
  var require_orange = __commonJS({
    "node_modules/@mui/material/node/colors/orange.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var orange2 = {
        50: "#fff3e0",
        100: "#ffe0b2",
        200: "#ffcc80",
        300: "#ffb74d",
        400: "#ffa726",
        500: "#ff9800",
        600: "#fb8c00",
        700: "#f57c00",
        800: "#ef6c00",
        900: "#e65100",
        A100: "#ffd180",
        A200: "#ffab40",
        A400: "#ff9100",
        A700: "#ff6d00"
      };
      var _default = orange2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/blue.js
  var require_blue = __commonJS({
    "node_modules/@mui/material/node/colors/blue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var blue2 = {
        50: "#e3f2fd",
        100: "#bbdefb",
        200: "#90caf9",
        300: "#64b5f6",
        400: "#42a5f5",
        500: "#2196f3",
        600: "#1e88e5",
        700: "#1976d2",
        800: "#1565c0",
        900: "#0d47a1",
        A100: "#82b1ff",
        A200: "#448aff",
        A400: "#2979ff",
        A700: "#2962ff"
      };
      var _default = blue2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/lightBlue.js
  var require_lightBlue = __commonJS({
    "node_modules/@mui/material/node/colors/lightBlue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var lightBlue2 = {
        50: "#e1f5fe",
        100: "#b3e5fc",
        200: "#81d4fa",
        300: "#4fc3f7",
        400: "#29b6f6",
        500: "#03a9f4",
        600: "#039be5",
        700: "#0288d1",
        800: "#0277bd",
        900: "#01579b",
        A100: "#80d8ff",
        A200: "#40c4ff",
        A400: "#00b0ff",
        A700: "#0091ea"
      };
      var _default = lightBlue2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/green.js
  var require_green = __commonJS({
    "node_modules/@mui/material/node/colors/green.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var green2 = {
        50: "#e8f5e9",
        100: "#c8e6c9",
        200: "#a5d6a7",
        300: "#81c784",
        400: "#66bb6a",
        500: "#4caf50",
        600: "#43a047",
        700: "#388e3c",
        800: "#2e7d32",
        900: "#1b5e20",
        A100: "#b9f6ca",
        A200: "#69f0ae",
        A400: "#00e676",
        A700: "#00c853"
      };
      var _default = green2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/createPalette.js
  var require_createPalette = __commonJS({
    "node_modules/@mui/material/node/styles/createPalette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.dark = void 0;
      exports.default = createPalette2;
      exports.light = void 0;
      var _utils = require_utils();
      var _system = require_system();
      var _common = _interopRequireDefault(require_common());
      var _grey = _interopRequireDefault(require_grey());
      var _purple = _interopRequireDefault(require_purple());
      var _red = _interopRequireDefault(require_red());
      var _orange = _interopRequireDefault(require_orange());
      var _blue = _interopRequireDefault(require_blue());
      var _lightBlue = _interopRequireDefault(require_lightBlue());
      var _green = _interopRequireDefault(require_green());
      var light2 = {
        // The colors used to style the text.
        text: {
          // The most important text.
          primary: "rgba(0, 0, 0, 0.87)",
          // Secondary text.
          secondary: "rgba(0, 0, 0, 0.6)",
          // Disabled text have even lower visual prominence.
          disabled: "rgba(0, 0, 0, 0.38)"
        },
        // The color used to divide different elements.
        divider: "rgba(0, 0, 0, 0.12)",
        // The background colors used to style the surfaces.
        // Consistency between these values is important.
        background: {
          paper: _common.default.white,
          default: _common.default.white
        },
        // The colors used to style the action elements.
        action: {
          // The color of an active action like an icon button.
          active: "rgba(0, 0, 0, 0.54)",
          // The color of an hovered action.
          hover: "rgba(0, 0, 0, 0.04)",
          hoverOpacity: 0.04,
          // The color of a selected action.
          selected: "rgba(0, 0, 0, 0.08)",
          selectedOpacity: 0.08,
          // The color of a disabled action.
          disabled: "rgba(0, 0, 0, 0.26)",
          // The background color of a disabled action.
          disabledBackground: "rgba(0, 0, 0, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(0, 0, 0, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.12
        }
      };
      exports.light = light2;
      var dark2 = {
        text: {
          primary: _common.default.white,
          secondary: "rgba(255, 255, 255, 0.7)",
          disabled: "rgba(255, 255, 255, 0.5)",
          icon: "rgba(255, 255, 255, 0.5)"
        },
        divider: "rgba(255, 255, 255, 0.12)",
        background: {
          paper: "#121212",
          default: "#121212"
        },
        action: {
          active: _common.default.white,
          hover: "rgba(255, 255, 255, 0.08)",
          hoverOpacity: 0.08,
          selected: "rgba(255, 255, 255, 0.16)",
          selectedOpacity: 0.16,
          disabled: "rgba(255, 255, 255, 0.3)",
          disabledBackground: "rgba(255, 255, 255, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(255, 255, 255, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.24
        }
      };
      exports.dark = dark2;
      function addLightOrDark2(intent, direction, shade, tonalOffset) {
        const tonalOffsetLight = tonalOffset.light || tonalOffset;
        const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
        if (!intent[direction]) {
          if (intent.hasOwnProperty(shade)) {
            intent[direction] = intent[shade];
          } else if (direction === "light") {
            intent.light = (0, _system.lighten)(intent.main, tonalOffsetLight);
          } else if (direction === "dark") {
            intent.dark = (0, _system.darken)(intent.main, tonalOffsetDark);
          }
        }
      }
      function getDefaultPrimary2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _blue.default[200],
            light: _blue.default[50],
            dark: _blue.default[400]
          };
        }
        return {
          main: _blue.default[700],
          light: _blue.default[400],
          dark: _blue.default[800]
        };
      }
      function getDefaultSecondary2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _purple.default[200],
            light: _purple.default[50],
            dark: _purple.default[400]
          };
        }
        return {
          main: _purple.default[500],
          light: _purple.default[300],
          dark: _purple.default[700]
        };
      }
      function getDefaultError2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _red.default[500],
            light: _red.default[300],
            dark: _red.default[700]
          };
        }
        return {
          main: _red.default[700],
          light: _red.default[400],
          dark: _red.default[800]
        };
      }
      function getDefaultInfo2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _lightBlue.default[400],
            light: _lightBlue.default[300],
            dark: _lightBlue.default[700]
          };
        }
        return {
          main: _lightBlue.default[700],
          light: _lightBlue.default[500],
          dark: _lightBlue.default[900]
        };
      }
      function getDefaultSuccess2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _green.default[400],
            light: _green.default[300],
            dark: _green.default[700]
          };
        }
        return {
          main: _green.default[800],
          light: _green.default[500],
          dark: _green.default[900]
        };
      }
      function getDefaultWarning2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _orange.default[400],
            light: _orange.default[300],
            dark: _orange.default[700]
          };
        }
        return {
          main: "#ed6c02",
          // closest to orange[800] that pass 3:1.
          light: _orange.default[500],
          dark: _orange.default[900]
        };
      }
      function createPalette2(palette) {
        const {
          mode = "light",
          contrastThreshold = 3,
          tonalOffset = 0.2,
          ...other
        } = palette;
        const primary = palette.primary || getDefaultPrimary2(mode);
        const secondary = palette.secondary || getDefaultSecondary2(mode);
        const error = palette.error || getDefaultError2(mode);
        const info = palette.info || getDefaultInfo2(mode);
        const success = palette.success || getDefaultSuccess2(mode);
        const warning = palette.warning || getDefaultWarning2(mode);
        function getContrastText(background) {
          const contrastText = (0, _system.getContrastRatio)(background, dark2.text.primary) >= contrastThreshold ? dark2.text.primary : light2.text.primary;
          if (true) {
            const contrast = (0, _system.getContrastRatio)(background, contrastText);
            if (contrast < 3) {
              console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
            }
          }
          return contrastText;
        }
        const augmentColor = ({
          color,
          name,
          mainShade = 500,
          lightShade = 300,
          darkShade = 700
        }) => {
          color = {
            ...color
          };
          if (!color.main && color[mainShade]) {
            color.main = color[mainShade];
          }
          if (!color.hasOwnProperty("main")) {
            throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, _utils.formatMuiErrorMessage)(11, name ? ` (${name})` : "", mainShade));
          }
          if (typeof color.main !== "string") {
            throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, _utils.formatMuiErrorMessage)(12, name ? ` (${name})` : "", JSON.stringify(color.main)));
          }
          addLightOrDark2(color, "light", lightShade, tonalOffset);
          addLightOrDark2(color, "dark", darkShade, tonalOffset);
          if (!color.contrastText) {
            color.contrastText = getContrastText(color.main);
          }
          return color;
        };
        const modes = {
          dark: dark2,
          light: light2
        };
        if (true) {
          if (!modes[mode]) {
            console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
          }
        }
        const paletteOutput = (0, _utils.deepmerge)({
          // A collection of common colors.
          common: {
            ..._common.default
          },
          // prevent mutable object.
          // The palette mode, can be light or dark.
          mode,
          // The colors used to represent primary interface elements for a user.
          primary: augmentColor({
            color: primary,
            name: "primary"
          }),
          // The colors used to represent secondary interface elements for a user.
          secondary: augmentColor({
            color: secondary,
            name: "secondary",
            mainShade: "A400",
            lightShade: "A200",
            darkShade: "A700"
          }),
          // The colors used to represent interface elements that the user should be made aware of.
          error: augmentColor({
            color: error,
            name: "error"
          }),
          // The colors used to represent potentially dangerous actions or important messages.
          warning: augmentColor({
            color: warning,
            name: "warning"
          }),
          // The colors used to present information to the user that is neutral and not necessarily important.
          info: augmentColor({
            color: info,
            name: "info"
          }),
          // The colors used to indicate the successful completion of an action that user triggered.
          success: augmentColor({
            color: success,
            name: "success"
          }),
          // The grey colors.
          grey: _grey.default,
          // Used by `getContrastText()` to maximize the contrast between
          // the background and the text.
          contrastThreshold,
          // Takes a background color and returns the text color that maximizes the contrast.
          getContrastText,
          // Generate a rich color object.
          augmentColor,
          // Used by the functions below to shift a color's luminance by approximately
          // two indexes within its tonal palette.
          // E.g., shift from Red 500 to Red 300 or Red 700.
          tonalOffset,
          // The light and dark mode object.
          ...modes[mode]
        }, other);
        return paletteOutput;
      }
    }
  });

  // node_modules/@mui/material/node/styles/createTypography.js
  var require_createTypography = __commonJS({
    "node_modules/@mui/material/node/styles/createTypography.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTypography2;
      var _utils = require_utils();
      function round2(value) {
        return Math.round(value * 1e5) / 1e5;
      }
      var caseAllCaps2 = {
        textTransform: "uppercase"
      };
      var defaultFontFamily2 = '"Roboto", "Helvetica", "Arial", sans-serif';
      function createTypography2(palette, typography) {
        const {
          fontFamily = defaultFontFamily2,
          // The default font size of the Material Specification.
          fontSize = 14,
          // px
          fontWeightLight = 300,
          fontWeightRegular = 400,
          fontWeightMedium = 500,
          fontWeightBold = 700,
          // Tell MUI what's the font-size on the html element.
          // 16px is the default font-size used by browsers.
          htmlFontSize = 16,
          // Apply the CSS properties to all the variants.
          allVariants,
          pxToRem: pxToRem2,
          ...other
        } = typeof typography === "function" ? typography(palette) : typography;
        if (true) {
          if (typeof fontSize !== "number") {
            console.error("MUI: `fontSize` is required to be a number.");
          }
          if (typeof htmlFontSize !== "number") {
            console.error("MUI: `htmlFontSize` is required to be a number.");
          }
        }
        const coef = fontSize / 14;
        const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
        const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => ({
          fontFamily,
          fontWeight,
          fontSize: pxToRem(size),
          // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
          lineHeight,
          // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
          // across font-families can cause issues with the kerning.
          ...fontFamily === defaultFontFamily2 ? {
            letterSpacing: `${round2(letterSpacing / size)}em`
          } : {},
          ...casing,
          ...allVariants
        });
        const variants = {
          h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
          h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
          h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
          h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
          h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
          h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
          subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
          subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
          body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
          body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
          button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps2),
          caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
          overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps2),
          inherit: {
            fontFamily: "inherit",
            fontWeight: "inherit",
            fontSize: "inherit",
            lineHeight: "inherit",
            letterSpacing: "inherit"
          }
        };
        return (0, _utils.deepmerge)({
          htmlFontSize,
          pxToRem,
          fontFamily,
          fontSize,
          fontWeightLight,
          fontWeightRegular,
          fontWeightMedium,
          fontWeightBold,
          ...variants
        }, other, {
          clone: false
          // No need to clone deep
        });
      }
    }
  });

  // node_modules/@mui/material/node/styles/shadows.js
  var require_shadows2 = __commonJS({
    "node_modules/@mui/material/node/styles/shadows.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shadowKeyUmbraOpacity2 = 0.2;
      var shadowKeyPenumbraOpacity2 = 0.14;
      var shadowAmbientShadowOpacity2 = 0.12;
      function createShadow2(...px) {
        return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity2})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity2})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity2})`].join(",");
      }
      var shadows2 = ["none", createShadow2(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow2(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow2(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow2(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow2(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow2(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow2(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow2(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow2(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow2(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow2(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow2(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow2(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow2(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow2(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow2(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow2(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow2(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow2(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow2(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow2(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow2(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow2(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow2(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
      var _default = shadows2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/createTransitions.js
  var require_createTransitions = __commonJS({
    "node_modules/@mui/material/node/styles/createTransitions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTransitions2;
      exports.easing = exports.duration = void 0;
      var easing2 = {
        // This is the most common easing curve.
        easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
        // Objects enter the screen at full velocity from off-screen and
        // slowly decelerate to a resting point.
        easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
        // Objects leave the screen at full velocity. They do not decelerate when off-screen.
        easeIn: "cubic-bezier(0.4, 0, 1, 1)",
        // The sharp curve is used by objects that may return to the screen at any time.
        sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
      };
      exports.easing = easing2;
      var duration2 = {
        shortest: 150,
        shorter: 200,
        short: 250,
        // most basic recommended timing
        standard: 300,
        // this is to be used in complex animations
        complex: 375,
        // recommended when something is entering screen
        enteringScreen: 225,
        // recommended when something is leaving screen
        leavingScreen: 195
      };
      exports.duration = duration2;
      function formatMs2(milliseconds) {
        return `${Math.round(milliseconds)}ms`;
      }
      function getAutoHeightDuration2(height) {
        if (!height) {
          return 0;
        }
        const constant = height / 36;
        return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
      }
      function createTransitions2(inputTransitions) {
        const mergedEasing = {
          ...easing2,
          ...inputTransitions.easing
        };
        const mergedDuration = {
          ...duration2,
          ...inputTransitions.duration
        };
        const create = (props = ["all"], options = {}) => {
          const {
            duration: durationOption = mergedDuration.standard,
            easing: easingOption = mergedEasing.easeInOut,
            delay = 0,
            ...other
          } = options;
          if (true) {
            const isString = (value) => typeof value === "string";
            const isNumber = (value) => !isNaN(parseFloat(value));
            if (!isString(props) && !Array.isArray(props)) {
              console.error('MUI: Argument "props" must be a string or Array.');
            }
            if (!isNumber(durationOption) && !isString(durationOption)) {
              console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
            }
            if (!isString(easingOption)) {
              console.error('MUI: Argument "easing" must be a string.');
            }
            if (!isNumber(delay) && !isString(delay)) {
              console.error('MUI: Argument "delay" must be a number or a string.');
            }
            if (Object.keys(other).length !== 0) {
              console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
            }
          }
          return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs2(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs2(delay)}`).join(",");
        };
        return {
          getAutoHeightDuration: getAutoHeightDuration2,
          create,
          ...inputTransitions,
          easing: mergedEasing,
          duration: mergedDuration
        };
      }
    }
  });

  // node_modules/@mui/material/node/styles/zIndex.js
  var require_zIndex = __commonJS({
    "node_modules/@mui/material/node/styles/zIndex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var zIndex2 = {
        mobileStepper: 1e3,
        fab: 1050,
        speedDial: 1050,
        appBar: 1100,
        drawer: 1200,
        modal: 1300,
        snackbar: 1400,
        tooltip: 1500
      };
      var _default = zIndex2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/createTheme.js
  var require_createTheme3 = __commonJS({
    "node_modules/@mui/material/node/styles/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createMuiTheme = createMuiTheme;
      exports.default = void 0;
      var _utils = require_utils();
      var _system = require_system();
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _createMixins = _interopRequireDefault(require_createMixins());
      var _createPalette = _interopRequireDefault(require_createPalette());
      var _createTypography = _interopRequireDefault(require_createTypography());
      var _shadows = _interopRequireDefault(require_shadows2());
      var _createTransitions = _interopRequireDefault(require_createTransitions());
      var _zIndex = _interopRequireDefault(require_zIndex());
      function createTheme2(options = {}, ...args) {
        const {
          breakpoints: breakpointsInput,
          mixins: mixinsInput = {},
          spacing: spacingInput,
          palette: paletteInput = {},
          transitions: transitionsInput = {},
          typography: typographyInput = {},
          shape: shapeInput,
          ...other
        } = options;
        if (options.vars) {
          throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, _utils.formatMuiErrorMessage)(18));
        }
        const palette = (0, _createPalette.default)(paletteInput);
        const systemTheme = (0, _system.createTheme)(options);
        let muiTheme = (0, _utils.deepmerge)(systemTheme, {
          mixins: (0, _createMixins.default)(systemTheme.breakpoints, mixinsInput),
          palette,
          // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
          shadows: _shadows.default.slice(),
          typography: (0, _createTypography.default)(palette, typographyInput),
          transitions: (0, _createTransitions.default)(transitionsInput),
          zIndex: {
            ..._zIndex.default
          }
        });
        muiTheme = (0, _utils.deepmerge)(muiTheme, other);
        muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
        if (true) {
          const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
          const traverse = (node2, component) => {
            let key;
            for (key in node2) {
              const child = node2[key];
              if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
                if (true) {
                  const stateClass = (0, _generateUtilityClass.default)("", key);
                  console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                    root: {
                      [`&.${stateClass}`]: child
                    }
                  }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
                }
                node2[key] = {};
              }
            }
          };
          Object.keys(muiTheme.components).forEach((component) => {
            const styleOverrides = muiTheme.components[component].styleOverrides;
            if (styleOverrides && component.indexOf("Mui") === 0) {
              traverse(styleOverrides, component);
            }
          });
        }
        muiTheme.unstable_sxConfig = {
          ..._system.unstable_defaultSxConfig,
          ...other == null ? void 0 : other.unstable_sxConfig
        };
        muiTheme.unstable_sx = function sx(props) {
          return (0, _system.unstable_styleFunctionSx)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var warnedOnce = false;
      function createMuiTheme(...args) {
        if (true) {
          if (!warnedOnce) {
            warnedOnce = true;
            console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
          }
        }
        return createTheme2(...args);
      }
      var _default = createTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/defaultTheme.js
  var require_defaultTheme = __commonJS({
    "node_modules/@mui/material/node/styles/defaultTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme3());
      var defaultTheme2 = (0, _createTheme.default)();
      var _default = defaultTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/identifier.js
  var require_identifier = __commonJS({
    "node_modules/@mui/material/node/styles/identifier.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = "$$material";
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/useThemeProps.js
  var require_useThemeProps3 = __commonJS({
    "node_modules/@mui/material/node/styles/useThemeProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useThemeProps2;
      var _system = require_system();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var _identifier = _interopRequireDefault(require_identifier());
      function useThemeProps2({
        props,
        name
      }) {
        return (0, _system.useThemeProps)({
          props,
          name,
          defaultTheme: _defaultTheme.default,
          themeId: _identifier.default
        });
      }
    }
  });

  // node_modules/@mui/material/node/styles/styled.js
  var require_styled2 = __commonJS({
    "node_modules/@mui/material/node/styles/styled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.slotShouldForwardProp = exports.rootShouldForwardProp = exports.default = void 0;
      var _system = require_system();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var _identifier = _interopRequireDefault(require_identifier());
      var rootShouldForwardProp2 = (prop) => (0, _system.shouldForwardProp)(prop) && prop !== "classes";
      exports.rootShouldForwardProp = rootShouldForwardProp2;
      var slotShouldForwardProp = _system.shouldForwardProp;
      exports.slotShouldForwardProp = slotShouldForwardProp;
      var styled2 = (0, _system.createStyled)({
        themeId: _identifier.default,
        defaultTheme: _defaultTheme.default,
        rootShouldForwardProp: rootShouldForwardProp2
      });
      var _default = styled2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/svgIconClasses.js
  var require_svgIconClasses = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/svgIconClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSvgIconUtilityClass = getSvgIconUtilityClass;
      var _utils = require_utils();
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      function getSvgIconUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSvgIcon", slot);
      }
      var svgIconClasses = (0, _utils.unstable_generateUtilityClasses)("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
      var _default = svgIconClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/SvgIcon.js
  var require_SvgIcon = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/SvgIcon.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React16 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _base = require_node3();
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps3());
      var _styled = _interopRequireDefault(require_styled2());
      var _svgIconClasses = require_svgIconClasses();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses4 = (ownerState) => {
        const {
          color,
          fontSize,
          classes
        } = ownerState;
        const slots = {
          root: ["root", color !== "inherit" && `color${(0, _capitalize.default)(color)}`, `fontSize${(0, _capitalize.default)(fontSize)}`]
        };
        return (0, _base.unstable_composeClasses)(slots, _svgIconClasses.getSvgIconUtilityClass, classes);
      };
      var SvgIconRoot = (0, _styled.default)("svg", {
        name: "MuiSvgIcon",
        slot: "Root",
        overridesResolver: (props, styles) => {
          const {
            ownerState
          } = props;
          return [styles.root, ownerState.color !== "inherit" && styles[`color${(0, _capitalize.default)(ownerState.color)}`], styles[`fontSize${(0, _capitalize.default)(ownerState.fontSize)}`]];
        }
      })(({
        theme,
        ownerState
      }) => {
        var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
        return {
          userSelect: "none",
          width: "1em",
          height: "1em",
          display: "inline-block",
          fill: "currentColor",
          flexShrink: 0,
          transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
            duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
          }),
          fontSize: {
            inherit: "inherit",
            small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
            medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
            large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
          }[ownerState.fontSize],
          // TODO v5 deprecate, v6 remove for sx
          color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
            action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
            disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
            inherit: void 0
          }[ownerState.color]
        };
      });
      var SvgIcon = /* @__PURE__ */ React16.forwardRef(function SvgIcon2(inProps, ref) {
        const props = (0, _useThemeProps.default)({
          props: inProps,
          name: "MuiSvgIcon"
        });
        const {
          children,
          className,
          color = "inherit",
          component = "svg",
          fontSize = "medium",
          htmlColor,
          inheritViewBox = false,
          titleAccess,
          viewBox = "0 0 24 24",
          ...other
        } = props;
        const ownerState = {
          ...props,
          color,
          component,
          fontSize,
          instanceFontSize: inProps.fontSize,
          inheritViewBox,
          viewBox
        };
        const more = {};
        if (!inheritViewBox) {
          more.viewBox = viewBox;
        }
        const classes = useUtilityClasses4(ownerState);
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(SvgIconRoot, {
          as: component,
          className: (0, _clsx.default)(classes.root, className),
          focusable: "false",
          color: htmlColor,
          "aria-hidden": titleAccess ? void 0 : true,
          role: titleAccess ? "img" : void 0,
          ref,
          ...more,
          ...other,
          ownerState,
          children: [children, titleAccess ? /* @__PURE__ */ (0, _jsxRuntime.jsx)("title", {
            children: titleAccess
          }) : null]
        });
      });
      true ? SvgIcon.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit the d.ts file and run "yarn proptypes"     |
        // ----------------------------------------------------------------------
        /**
         * Node passed into the SVG element.
         */
        children: _propTypes.default.node,
        /**
         * Override or extend the styles applied to the component.
         */
        classes: _propTypes.default.object,
        /**
         * @ignore
         */
        className: _propTypes.default.string,
        /**
         * The color of the component.
         * It supports both default and custom theme colors, which can be added as shown in the
         * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
         * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
         * @default 'inherit'
         */
        color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
         * @default 'medium'
         */
        fontSize: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "large", "medium", "small"]), _propTypes.default.string]),
        /**
         * Applies a color attribute to the SVG element.
         */
        htmlColor: _propTypes.default.string,
        /**
         * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
         * prop will be ignored.
         * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
         * `component`'s viewBox to the root node.
         * @default false
         */
        inheritViewBox: _propTypes.default.bool,
        /**
         * The shape-rendering attribute. The behavior of the different options is described on the
         * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
         * If you are having issues with blurry icons you should investigate this prop.
         */
        shapeRendering: _propTypes.default.string,
        /**
         * The system prop that allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        /**
         * Provides a human-readable title for the element that contains it.
         * https://www.w3.org/TR/SVG-access/#Equivalent
         */
        titleAccess: _propTypes.default.string,
        /**
         * Allows you to redefine what the coordinates without units mean inside an SVG element.
         * For example, if the SVG element is 500 (width) by 200 (height),
         * and you pass viewBox="0 0 50 20",
         * this means that the coordinates inside the SVG will go from the top left corner (0,0)
         * to bottom right (50,20) and each unit will be worth 10px.
         * @default '0 0 24 24'
         */
        viewBox: _propTypes.default.string
      } : void 0;
      SvgIcon.muiName = "SvgIcon";
      var _default = SvgIcon;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/index.js
  var require_SvgIcon2 = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        svgIconClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _SvgIcon.default;
        }
      });
      Object.defineProperty(exports, "svgIconClasses", {
        enumerable: true,
        get: function() {
          return _svgIconClasses.default;
        }
      });
      var _SvgIcon = _interopRequireDefault(require_SvgIcon());
      var _svgIconClasses = _interopRequireWildcard(require_svgIconClasses());
      Object.keys(_svgIconClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _svgIconClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _svgIconClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/material/node/utils/createSvgIcon.js
  var require_createSvgIcon = __commonJS({
    "node_modules/@mui/material/node/utils/createSvgIcon.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSvgIcon;
      var React16 = _interopRequireWildcard(require_react());
      var _SvgIcon = _interopRequireDefault(require_SvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function createSvgIcon(path, displayName) {
        function Component(props, ref) {
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_SvgIcon.default, {
            "data-testid": `${displayName}Icon`,
            ref,
            ...props,
            children: path
          });
        }
        if (true) {
          Component.displayName = `${displayName}Icon`;
        }
        Component.muiName = _SvgIcon.default.muiName;
        return /* @__PURE__ */ React16.memo(/* @__PURE__ */ React16.forwardRef(Component));
      }
    }
  });

  // node_modules/@mui/material/node/utils/debounce.js
  var require_debounce2 = __commonJS({
    "node_modules/@mui/material/node/utils/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_debounce;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/deprecatedPropType.js
  var require_deprecatedPropType2 = __commonJS({
    "node_modules/@mui/material/node/utils/deprecatedPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_deprecatedPropType;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/isMuiElement.js
  var require_isMuiElement2 = __commonJS({
    "node_modules/@mui/material/node/utils/isMuiElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_isMuiElement;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/ownerDocument.js
  var require_ownerDocument2 = __commonJS({
    "node_modules/@mui/material/node/utils/ownerDocument.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_ownerDocument;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/ownerWindow.js
  var require_ownerWindow2 = __commonJS({
    "node_modules/@mui/material/node/utils/ownerWindow.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_ownerWindow;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/requirePropFactory.js
  var require_requirePropFactory2 = __commonJS({
    "node_modules/@mui/material/node/utils/requirePropFactory.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_requirePropFactory;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/setRef.js
  var require_setRef2 = __commonJS({
    "node_modules/@mui/material/node/utils/setRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_setRef;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useEnhancedEffect.js
  var require_useEnhancedEffect2 = __commonJS({
    "node_modules/@mui/material/node/utils/useEnhancedEffect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useEnhancedEffect;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useId.js
  var require_useId2 = __commonJS({
    "node_modules/@mui/material/node/utils/useId.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useId;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/unsupportedProp.js
  var require_unsupportedProp2 = __commonJS({
    "node_modules/@mui/material/node/utils/unsupportedProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_unsupportedProp;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useControlled.js
  var require_useControlled2 = __commonJS({
    "node_modules/@mui/material/node/utils/useControlled.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useControlled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useEventCallback.js
  var require_useEventCallback2 = __commonJS({
    "node_modules/@mui/material/node/utils/useEventCallback.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useEventCallback;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useForkRef.js
  var require_useForkRef2 = __commonJS({
    "node_modules/@mui/material/node/utils/useForkRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useForkRef;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useIsFocusVisible.js
  var require_useIsFocusVisible2 = __commonJS({
    "node_modules/@mui/material/node/utils/useIsFocusVisible.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useIsFocusVisible;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/index.js
  var require_utils3 = __commonJS({
    "node_modules/@mui/material/node/utils/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "capitalize", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "createChainedFunction", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "createSvgIcon", {
        enumerable: true,
        get: function() {
          return _createSvgIcon.default;
        }
      });
      Object.defineProperty(exports, "debounce", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "deprecatedPropType", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "isMuiElement", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "ownerDocument", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "ownerWindow", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "requirePropFactory", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "setRef", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      exports.unstable_ClassNameGenerator = void 0;
      Object.defineProperty(exports, "unstable_useEnhancedEffect", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      Object.defineProperty(exports, "unsupportedProp", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "useControlled", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "useEventCallback", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "useForkRef", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "useIsFocusVisible", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      var _className = require_className();
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction2());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
      var _debounce = _interopRequireDefault(require_debounce2());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType2());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement2());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow2());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory2());
      var _setRef = _interopRequireDefault(require_setRef2());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
      var _useId = _interopRequireDefault(require_useId2());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
      var _useControlled = _interopRequireDefault(require_useControlled2());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
      var _useForkRef = _interopRequireDefault(require_useForkRef2());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible2());
      var unstable_ClassNameGenerator = {
        configure: (generator) => {
          if (true) {
            console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
          }
          _className.unstable_ClassNameGenerator.configure(generator);
        }
      };
      exports.unstable_ClassNameGenerator = unstable_ClassNameGenerator;
    }
  });

  // node_modules/@mui/icons-material/utils/createSvgIcon.js
  var require_createSvgIcon2 = __commonJS({
    "node_modules/@mui/icons-material/utils/createSvgIcon.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.createSvgIcon;
        }
      });
      var _utils = require_utils3();
    }
  });

  // node_modules/@mui/icons-material/ExpandMore.js
  var require_ExpandMore = __commonJS({
    "node_modules/@mui/icons-material/ExpandMore.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
      }), "ExpandMore");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/ChevronRight.js
  var require_ChevronRight = __commonJS({
    "node_modules/@mui/icons-material/ChevronRight.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
      }), "ChevronRight");
      exports.default = _default;
    }
  });

  // src/tree_view.tsx
  var React15 = __toESM(require_react());
  var import_react6 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // node_modules/@mui/lab/TreeView/TreeView.js
  var React8 = __toESM(require_react());
  var import_clsx = __toESM(require_clsx());
  var import_prop_types2 = __toESM(require_prop_types());

  // node_modules/@mui/material/styles/identifier.js
  var identifier_default = "$$material";

  // node_modules/@mui/material/styles/index.js
  var import_system6 = __toESM(require_system());

  // node_modules/@mui/material/styles/createTheme.js
  var import_utils7 = __toESM(require_utils());
  var import_system2 = __toESM(require_system());
  var import_generateUtilityClass = __toESM(require_generateUtilityClass3());

  // node_modules/@mui/material/styles/createMixins.js
  function createMixins(breakpoints, mixins) {
    return {
      toolbar: {
        minHeight: 56,
        [breakpoints.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      },
      ...mixins
    };
  }

  // node_modules/@mui/material/styles/createPalette.js
  var import_utils5 = __toESM(require_utils());
  var import_system = __toESM(require_system());

  // node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/styles/createPalette.js
  var light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = (0, import_system.lighten)(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = (0, import_system.darken)(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2,
      ...other
    } = palette;
    const primary = palette.primary || getDefaultPrimary(mode);
    const secondary = palette.secondary || getDefaultSecondary(mode);
    const error = palette.error || getDefaultError(mode);
    const info = palette.info || getDefaultInfo(mode);
    const success = palette.success || getDefaultSuccess(mode);
    const warning = palette.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = (0, import_system.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = (0, import_system.getContrastRatio)(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color = {
        ...color
      };
      if (!color.main && color[mainShade]) {
        color.main = color[mainShade];
      }
      if (!color.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, import_utils.formatMuiErrorMessage)(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, import_utils.formatMuiErrorMessage)(12, name ? ` (${name})` : "", JSON.stringify(color.main)));
      }
      addLightOrDark(color, "light", lightShade, tonalOffset);
      addLightOrDark(color, "dark", darkShade, tonalOffset);
      if (!color.contrastText) {
        color.contrastText = getContrastText(color.main);
      }
      return color;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = (0, import_utils5.deepmerge)({
      // A collection of common colors.
      common: {
        ...common_default
      },
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey: grey_default,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset,
      // The light and dark mode object.
      ...modes[mode]
    }, other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  var import_utils6 = __toESM(require_utils());
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette, typography) {
    const {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2,
      ...other
    } = typeof typography === "function" ? typography(palette) : typography;
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => ({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight,
      // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
      // across font-families can cause issues with the kerning.
      ...fontFamily === defaultFontFamily ? {
        letterSpacing: `${round(letterSpacing / size)}em`
      } : {},
      ...casing,
      ...allVariants
    });
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return (0, import_utils6.deepmerge)({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold,
      ...variants
    }, other, {
      clone: false
      // No need to clone deep
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@mui/material/styles/createTransitions.js
  var easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height) {
    if (!height) {
      return 0;
    }
    const constant = height / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = {
      ...easing,
      ...inputTransitions.easing
    };
    const mergedDuration = {
      ...duration,
      ...inputTransitions.duration
    };
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0,
        ...other
      } = options;
      if (true) {
        const isString = (value) => typeof value === "string";
        const isNumber = (value) => !isNaN(parseFloat(value));
        if (!isString(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber(delay) && !isString(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return {
      getAutoHeightDuration,
      create,
      ...inputTransitions,
      easing: mergedEasing,
      duration: mergedDuration
    };
  }

  // node_modules/@mui/material/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // node_modules/@mui/material/styles/createTheme.js
  function createTheme(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput,
      mixins: mixinsInput = {},
      spacing: spacingInput,
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {},
      shape: shapeInput,
      ...other
    } = options;
    if (options.vars) {
      throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, import_utils.formatMuiErrorMessage)(18));
    }
    const palette = createPalette(paletteInput);
    const systemTheme = (0, import_system2.createTheme)(options);
    let muiTheme = (0, import_utils7.deepmerge)(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows_default.slice(),
      typography: createTypography(palette, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: {
        ...zIndex_default
      }
    });
    muiTheme = (0, import_utils7.deepmerge)(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => (0, import_utils7.deepmerge)(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = (0, import_generateUtilityClass.default)("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = {
      ...import_system2.unstable_defaultSxConfig,
      ...other == null ? void 0 : other.unstable_sxConfig
    };
    muiTheme.unstable_sx = function sx(props) {
      return (0, import_system2.unstable_styleFunctionSx)({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/material/styles/useTheme.js
  var React5 = __toESM(require_react());
  var import_system3 = __toESM(require_system());

  // node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme = createTheme_default();
  var defaultTheme_default = defaultTheme;

  // node_modules/@mui/material/styles/useTheme.js
  function useTheme3() {
    const theme = (0, import_system3.useTheme)(defaultTheme_default);
    if (true) {
      React5.useDebugValue(theme);
    }
    return theme[identifier_default] || theme;
  }

  // node_modules/@mui/material/styles/useThemeProps.js
  var import_system4 = __toESM(require_system());
  function useThemeProps({
    props,
    name
  }) {
    return (0, import_system4.useThemeProps)({
      props,
      name,
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    });
  }

  // node_modules/@mui/material/styles/styled.js
  var import_system5 = __toESM(require_system());
  var rootShouldForwardProp = (prop) => (0, import_system5.shouldForwardProp)(prop) && prop !== "classes";
  var styled = (0, import_system5.createStyled)({
    themeId: identifier_default,
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp
  });
  var styled_default = styled;

  // node_modules/@mui/lab/TreeView/TreeView.js
  var import_base = __toESM(require_node3());
  var import_utils10 = __toESM(require_utils3());

  // node_modules/@mui/lab/TreeView/TreeViewContext.js
  var React6 = __toESM(require_react());
  var TreeViewContext = /* @__PURE__ */ React6.createContext({});
  if (true) {
    TreeViewContext.displayName = "TreeViewContext";
  }
  var TreeViewContext_default = TreeViewContext;

  // node_modules/@mui/lab/TreeView/descendants.js
  var React7 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());
  var import_utils8 = __toESM(require_utils3());
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function findIndex(array, comp) {
    for (let i = 0; i < array.length; i += 1) {
      if (comp(array[i])) {
        return i;
      }
    }
    return -1;
  }
  function binaryFindElement(array, element) {
    let start = 0;
    let end = array.length - 1;
    while (start <= end) {
      const middle = Math.floor((start + end) / 2);
      if (array[middle].element === element) {
        return middle;
      }
      if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {
        end = middle - 1;
      } else {
        start = middle + 1;
      }
    }
    return start;
  }
  var DescendantContext = /* @__PURE__ */ React7.createContext({});
  if (true) {
    DescendantContext.displayName = "DescendantContext";
  }
  function usePrevious(value) {
    const ref = React7.useRef(null);
    React7.useEffect(() => {
      ref.current = value;
    }, [value]);
    return ref.current;
  }
  var noop = () => {
  };
  function useDescendant(descendant) {
    const [, forceUpdate] = React7.useState();
    const {
      registerDescendant = noop,
      unregisterDescendant = noop,
      descendants = [],
      parentId = null
    } = React7.useContext(DescendantContext);
    const index = findIndex(descendants, (item) => item.element === descendant.element);
    const previousDescendants = usePrevious(descendants);
    const someDescendantsHaveChanged = descendants.some((newDescendant, position2) => {
      return previousDescendants && previousDescendants[position2] && previousDescendants[position2].element !== newDescendant.element;
    });
    (0, import_utils8.unstable_useEnhancedEffect)(() => {
      if (descendant.element) {
        registerDescendant({
          ...descendant,
          index
        });
        return () => {
          unregisterDescendant(descendant.element);
        };
      }
      forceUpdate({});
      return void 0;
    }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);
    return {
      parentId,
      index
    };
  }
  function DescendantProvider(props) {
    const {
      children,
      id
    } = props;
    const [items, set] = React7.useState([]);
    const registerDescendant = React7.useCallback(({
      element,
      ...other
    }) => {
      set((oldItems) => {
        let newItems;
        if (oldItems.length === 0) {
          return [{
            ...other,
            element,
            index: 0
          }];
        }
        const index = binaryFindElement(oldItems, element);
        if (oldItems[index] && oldItems[index].element === element) {
          newItems = oldItems;
        } else {
          const newItem = {
            ...other,
            element,
            index
          };
          newItems = oldItems.slice();
          newItems.splice(index, 0, newItem);
        }
        newItems.forEach((item, position2) => {
          item.index = position2;
        });
        return newItems;
      });
    }, []);
    const unregisterDescendant = React7.useCallback((element) => {
      set((oldItems) => oldItems.filter((item) => element !== item.element));
    }, []);
    const value = React7.useMemo(() => ({
      descendants: items,
      registerDescendant,
      unregisterDescendant,
      parentId: id
    }), [items, registerDescendant, unregisterDescendant, id]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DescendantContext.Provider, {
      value,
      children
    });
  }
  true ? DescendantProvider.propTypes = {
    children: import_prop_types.default.node,
    id: import_prop_types.default.string
  } : void 0;

  // node_modules/@mui/lab/TreeView/treeViewClasses.js
  var import_generateUtilityClass2 = __toESM(require_generateUtilityClass3());

  // node_modules/@mui/material/generateUtilityClasses/index.js
  var import_utils9 = __toESM(require_utils());

  // node_modules/@mui/lab/TreeView/treeViewClasses.js
  function getTreeViewUtilityClass(slot) {
    return (0, import_generateUtilityClass2.default)("MuiTreeView", slot);
  }
  var treeViewClasses = (0, import_utils9.unstable_generateUtilityClasses)("MuiTreeView", ["root"]);

  // node_modules/@mui/lab/TreeView/TreeView.js
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var useUtilityClasses = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_base.unstable_composeClasses)(slots, getTreeViewUtilityClass, classes);
  };
  var TreeViewRoot = styled_default("ul", {
    name: "MuiTreeView",
    slot: "Root",
    overridesResolver: (props, styles) => styles.root
  })({
    padding: 0,
    margin: 0,
    listStyle: "none",
    outline: 0
  });
  function isPrintableCharacter(string) {
    return string && string.length === 1 && string.match(/\S/);
  }
  function findNextFirstChar(firstChars, startIndex, char2) {
    for (let i = startIndex; i < firstChars.length; i += 1) {
      if (char2 === firstChars[i]) {
        return i;
      }
    }
    return -1;
  }
  function noopSelection() {
    return false;
  }
  var defaultDefaultExpanded = [];
  var defaultDefaultSelected = [];
  var TreeView = /* @__PURE__ */ React8.forwardRef(function TreeView2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTreeView"
    });
    const {
      children,
      className,
      defaultCollapseIcon,
      defaultEndIcon,
      defaultExpanded = defaultDefaultExpanded,
      defaultExpandIcon,
      defaultParentIcon,
      defaultSelected = defaultDefaultSelected,
      disabledItemsFocusable = false,
      disableSelection = false,
      expanded: expandedProp,
      id: idProp,
      multiSelect = false,
      onBlur,
      onFocus,
      onKeyDown,
      onNodeFocus,
      onNodeSelect,
      onNodeToggle,
      selected: selectedProp,
      ...other
    } = props;
    const theme = useTheme3();
    const isRtl = theme.direction === "rtl";
    const ownerState = {
      ...props,
      defaultExpanded,
      defaultSelected,
      disabledItemsFocusable,
      disableSelection,
      multiSelect
    };
    const classes = useUtilityClasses(ownerState);
    const treeId = (0, import_utils10.unstable_useId)(idProp);
    const treeRef = React8.useRef(null);
    const handleRef = (0, import_utils10.useForkRef)(treeRef, ref);
    const [focusedNodeId, setFocusedNodeId] = React8.useState(null);
    const nodeMap = React8.useRef({});
    const firstCharMap = React8.useRef({});
    const [expanded, setExpandedState] = (0, import_utils10.useControlled)({
      controlled: expandedProp,
      default: defaultExpanded,
      name: "TreeView",
      state: "expanded"
    });
    const [selected, setSelectedState] = (0, import_utils10.useControlled)({
      controlled: selectedProp,
      default: defaultSelected,
      name: "TreeView",
      state: "selected"
    });
    const isExpanded = React8.useCallback((id) => Array.isArray(expanded) ? expanded.indexOf(id) !== -1 : false, [expanded]);
    const isExpandable = React8.useCallback((id) => nodeMap.current[id] && nodeMap.current[id].expandable, []);
    const isSelected = React8.useCallback((id) => Array.isArray(selected) ? selected.indexOf(id) !== -1 : selected === id, [selected]);
    const isDisabled = React8.useCallback((id) => {
      let node2 = nodeMap.current[id];
      if (!node2) {
        return false;
      }
      if (node2.disabled) {
        return true;
      }
      while (node2.parentId != null) {
        node2 = nodeMap.current[node2.parentId];
        if (node2.disabled) {
          return true;
        }
      }
      return false;
    }, []);
    const isFocused = (id) => focusedNodeId === id;
    const getChildrenIds = (id) => Object.keys(nodeMap.current).map((key) => {
      return nodeMap.current[key];
    }).filter((node2) => node2.parentId === id).sort((a, b) => a.index - b.index).map((child) => child.id);
    const getNavigableChildrenIds = (id) => {
      let childrenIds = getChildrenIds(id);
      if (!disabledItemsFocusable) {
        childrenIds = childrenIds.filter((node2) => !isDisabled(node2));
      }
      return childrenIds;
    };
    const getNextNode = (id) => {
      if (isExpanded(id) && getNavigableChildrenIds(id).length > 0) {
        return getNavigableChildrenIds(id)[0];
      }
      let node2 = nodeMap.current[id];
      while (node2 != null) {
        const siblings = getNavigableChildrenIds(node2.parentId);
        const nextSibling = siblings[siblings.indexOf(node2.id) + 1];
        if (nextSibling) {
          return nextSibling;
        }
        node2 = nodeMap.current[node2.parentId];
      }
      return null;
    };
    const getPreviousNode = (id) => {
      const node2 = nodeMap.current[id];
      const siblings = getNavigableChildrenIds(node2.parentId);
      const nodeIndex = siblings.indexOf(id);
      if (nodeIndex === 0) {
        return node2.parentId;
      }
      let currentNode = siblings[nodeIndex - 1];
      while (isExpanded(currentNode) && getNavigableChildrenIds(currentNode).length > 0) {
        currentNode = getNavigableChildrenIds(currentNode).pop();
      }
      return currentNode;
    };
    const getLastNode = () => {
      let lastNode = getNavigableChildrenIds(null).pop();
      while (isExpanded(lastNode)) {
        lastNode = getNavigableChildrenIds(lastNode).pop();
      }
      return lastNode;
    };
    const getFirstNode = () => getNavigableChildrenIds(null)[0];
    const getParent = (id) => nodeMap.current[id].parentId;
    const findOrderInTremauxTree = (nodeAId, nodeBId) => {
      if (nodeAId === nodeBId) {
        return [nodeAId, nodeBId];
      }
      const nodeA = nodeMap.current[nodeAId];
      const nodeB = nodeMap.current[nodeBId];
      if (nodeA.parentId === nodeB.id || nodeB.parentId === nodeA.id) {
        return nodeB.parentId === nodeA.id ? [nodeA.id, nodeB.id] : [nodeB.id, nodeA.id];
      }
      const aFamily = [nodeA.id];
      const bFamily = [nodeB.id];
      let aAncestor = nodeA.parentId;
      let bAncestor = nodeB.parentId;
      let aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;
      let bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;
      let continueA = true;
      let continueB = true;
      while (!bAncestorIsCommon && !aAncestorIsCommon) {
        if (continueA) {
          aFamily.push(aAncestor);
          aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;
          continueA = aAncestor !== null;
          if (!aAncestorIsCommon && continueA) {
            aAncestor = nodeMap.current[aAncestor].parentId;
          }
        }
        if (continueB && !aAncestorIsCommon) {
          bFamily.push(bAncestor);
          bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;
          continueB = bAncestor !== null;
          if (!bAncestorIsCommon && continueB) {
            bAncestor = nodeMap.current[bAncestor].parentId;
          }
        }
      }
      const commonAncestor = aAncestorIsCommon ? aAncestor : bAncestor;
      const ancestorFamily = getChildrenIds(commonAncestor);
      const aSide = aFamily[aFamily.indexOf(commonAncestor) - 1];
      const bSide = bFamily[bFamily.indexOf(commonAncestor) - 1];
      return ancestorFamily.indexOf(aSide) < ancestorFamily.indexOf(bSide) ? [nodeAId, nodeBId] : [nodeBId, nodeAId];
    };
    const getNodesInRange = (nodeA, nodeB) => {
      const [first, last] = findOrderInTremauxTree(nodeA, nodeB);
      const nodes = [first];
      let current = first;
      while (current !== last) {
        current = getNextNode(current);
        nodes.push(current);
      }
      return nodes;
    };
    const focus = (event, id) => {
      if (id) {
        setFocusedNodeId(id);
        if (onNodeFocus) {
          onNodeFocus(event, id);
        }
      }
    };
    const focusNextNode = (event, id) => focus(event, getNextNode(id));
    const focusPreviousNode = (event, id) => focus(event, getPreviousNode(id));
    const focusFirstNode = (event) => focus(event, getFirstNode());
    const focusLastNode = (event) => focus(event, getLastNode());
    const focusByFirstCharacter = (event, id, char2) => {
      let start;
      let index;
      const lowercaseChar = char2.toLowerCase();
      const firstCharIds = [];
      const firstChars = [];
      Object.keys(firstCharMap.current).forEach((nodeId) => {
        const firstChar = firstCharMap.current[nodeId];
        const map = nodeMap.current[nodeId];
        const visible = map.parentId ? isExpanded(map.parentId) : true;
        const shouldBeSkipped = disabledItemsFocusable ? false : isDisabled(nodeId);
        if (visible && !shouldBeSkipped) {
          firstCharIds.push(nodeId);
          firstChars.push(firstChar);
        }
      });
      start = firstCharIds.indexOf(id) + 1;
      if (start >= firstCharIds.length) {
        start = 0;
      }
      index = findNextFirstChar(firstChars, start, lowercaseChar);
      if (index === -1) {
        index = findNextFirstChar(firstChars, 0, lowercaseChar);
      }
      if (index > -1) {
        focus(event, firstCharIds[index]);
      }
    };
    const toggleExpansion = (event, value = focusedNodeId) => {
      let newExpanded;
      if (expanded.indexOf(value) !== -1) {
        newExpanded = expanded.filter((id) => id !== value);
      } else {
        newExpanded = [value].concat(expanded);
      }
      if (onNodeToggle) {
        onNodeToggle(event, newExpanded);
      }
      setExpandedState(newExpanded);
    };
    const expandAllSiblings = (event, id) => {
      const map = nodeMap.current[id];
      const siblings = getChildrenIds(map.parentId);
      const diff = siblings.filter((child) => isExpandable(child) && !isExpanded(child));
      const newExpanded = expanded.concat(diff);
      if (diff.length > 0) {
        setExpandedState(newExpanded);
        if (onNodeToggle) {
          onNodeToggle(event, newExpanded);
        }
      }
    };
    const lastSelectedNode = React8.useRef(null);
    const lastSelectionWasRange = React8.useRef(false);
    const currentRangeSelection = React8.useRef([]);
    const handleRangeArrowSelect = (event, nodes) => {
      let base = selected.slice();
      const {
        start,
        next: next2,
        current
      } = nodes;
      if (!next2 || !current) {
        return;
      }
      if (currentRangeSelection.current.indexOf(current) === -1) {
        currentRangeSelection.current = [];
      }
      if (lastSelectionWasRange.current) {
        if (currentRangeSelection.current.indexOf(next2) !== -1) {
          base = base.filter((id) => id === start || id !== current);
          currentRangeSelection.current = currentRangeSelection.current.filter((id) => id === start || id !== current);
        } else {
          base.push(next2);
          currentRangeSelection.current.push(next2);
        }
      } else {
        base.push(next2);
        currentRangeSelection.current.push(current, next2);
      }
      if (onNodeSelect) {
        onNodeSelect(event, base);
      }
      setSelectedState(base);
    };
    const handleRangeSelect = (event, nodes) => {
      let base = selected.slice();
      const {
        start,
        end
      } = nodes;
      if (lastSelectionWasRange.current) {
        base = base.filter((id) => currentRangeSelection.current.indexOf(id) === -1);
      }
      let range = getNodesInRange(start, end);
      range = range.filter((node2) => !isDisabled(node2));
      currentRangeSelection.current = range;
      let newSelected = base.concat(range);
      newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);
      if (onNodeSelect) {
        onNodeSelect(event, newSelected);
      }
      setSelectedState(newSelected);
    };
    const handleMultipleSelect = (event, value) => {
      let newSelected;
      if (selected.indexOf(value) !== -1) {
        newSelected = selected.filter((id) => id !== value);
      } else {
        newSelected = [value].concat(selected);
      }
      if (onNodeSelect) {
        onNodeSelect(event, newSelected);
      }
      setSelectedState(newSelected);
    };
    const handleSingleSelect = (event, value) => {
      const newSelected = multiSelect ? [value] : value;
      if (onNodeSelect) {
        onNodeSelect(event, newSelected);
      }
      setSelectedState(newSelected);
    };
    const selectNode = (event, id, multiple = false) => {
      if (id) {
        if (multiple) {
          handleMultipleSelect(event, id);
        } else {
          handleSingleSelect(event, id);
        }
        lastSelectedNode.current = id;
        lastSelectionWasRange.current = false;
        currentRangeSelection.current = [];
        return true;
      }
      return false;
    };
    const selectRange = (event, nodes, stacked = false) => {
      const {
        start = lastSelectedNode.current,
        end,
        current
      } = nodes;
      if (stacked) {
        handleRangeArrowSelect(event, {
          start,
          next: end,
          current
        });
      } else if (start != null && end != null) {
        handleRangeSelect(event, {
          start,
          end
        });
      }
      lastSelectionWasRange.current = true;
    };
    const rangeSelectToFirst = (event, id) => {
      if (!lastSelectedNode.current) {
        lastSelectedNode.current = id;
      }
      const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;
      selectRange(event, {
        start,
        end: getFirstNode()
      });
    };
    const rangeSelectToLast = (event, id) => {
      if (!lastSelectedNode.current) {
        lastSelectedNode.current = id;
      }
      const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;
      selectRange(event, {
        start,
        end: getLastNode()
      });
    };
    const selectNextNode = (event, id) => {
      if (!isDisabled(getNextNode(id))) {
        selectRange(event, {
          end: getNextNode(id),
          current: id
        }, true);
      }
    };
    const selectPreviousNode = (event, id) => {
      if (!isDisabled(getPreviousNode(id))) {
        selectRange(event, {
          end: getPreviousNode(id),
          current: id
        }, true);
      }
    };
    const selectAllNodes = (event) => {
      selectRange(event, {
        start: getFirstNode(),
        end: getLastNode()
      });
    };
    const registerNode = React8.useCallback((node2) => {
      const {
        id,
        index,
        parentId,
        expandable,
        idAttribute,
        disabled
      } = node2;
      nodeMap.current[id] = {
        id,
        index,
        parentId,
        expandable,
        idAttribute,
        disabled
      };
    }, []);
    const unregisterNode = React8.useCallback((id) => {
      const newMap = {
        ...nodeMap.current
      };
      delete newMap[id];
      nodeMap.current = newMap;
      setFocusedNodeId((oldFocusedNodeId) => {
        if (oldFocusedNodeId === id && treeRef.current === (0, import_utils10.ownerDocument)(treeRef.current).activeElement) {
          return getChildrenIds(null)[0];
        }
        return oldFocusedNodeId;
      });
    }, []);
    const mapFirstChar = React8.useCallback((id, firstChar) => {
      firstCharMap.current[id] = firstChar;
    }, []);
    const unMapFirstChar = React8.useCallback((id) => {
      const newMap = {
        ...firstCharMap.current
      };
      delete newMap[id];
      firstCharMap.current = newMap;
    }, []);
    const handleNextArrow = (event) => {
      if (isExpandable(focusedNodeId)) {
        if (isExpanded(focusedNodeId)) {
          focusNextNode(event, focusedNodeId);
        } else if (!isDisabled(focusedNodeId)) {
          toggleExpansion(event);
        }
      }
      return true;
    };
    const handlePreviousArrow = (event) => {
      if (isExpanded(focusedNodeId) && !isDisabled(focusedNodeId)) {
        toggleExpansion(event, focusedNodeId);
        return true;
      }
      const parent = getParent(focusedNodeId);
      if (parent) {
        focus(event, parent);
        return true;
      }
      return false;
    };
    const handleKeyDown = (event) => {
      let flag = false;
      const key = event.key;
      if (event.altKey || event.currentTarget !== event.target || !focusedNodeId) {
        return;
      }
      const ctrlPressed = event.ctrlKey || event.metaKey;
      switch (key) {
        case " ":
          if (!disableSelection && !isDisabled(focusedNodeId)) {
            if (multiSelect && event.shiftKey) {
              selectRange(event, {
                end: focusedNodeId
              });
              flag = true;
            } else if (multiSelect) {
              flag = selectNode(event, focusedNodeId, true);
            } else {
              flag = selectNode(event, focusedNodeId);
            }
          }
          event.stopPropagation();
          break;
        case "Enter":
          if (!isDisabled(focusedNodeId)) {
            if (isExpandable(focusedNodeId)) {
              toggleExpansion(event);
              flag = true;
            } else if (multiSelect) {
              flag = selectNode(event, focusedNodeId, true);
            } else {
              flag = selectNode(event, focusedNodeId);
            }
          }
          event.stopPropagation();
          break;
        case "ArrowDown":
          if (multiSelect && event.shiftKey && !disableSelection) {
            selectNextNode(event, focusedNodeId);
          }
          focusNextNode(event, focusedNodeId);
          flag = true;
          break;
        case "ArrowUp":
          if (multiSelect && event.shiftKey && !disableSelection) {
            selectPreviousNode(event, focusedNodeId);
          }
          focusPreviousNode(event, focusedNodeId);
          flag = true;
          break;
        case "ArrowRight":
          if (isRtl) {
            flag = handlePreviousArrow(event);
          } else {
            flag = handleNextArrow(event);
          }
          break;
        case "ArrowLeft":
          if (isRtl) {
            flag = handleNextArrow(event);
          } else {
            flag = handlePreviousArrow(event);
          }
          break;
        case "Home":
          if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {
            rangeSelectToFirst(event, focusedNodeId);
          }
          focusFirstNode(event);
          flag = true;
          break;
        case "End":
          if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {
            rangeSelectToLast(event, focusedNodeId);
          }
          focusLastNode(event);
          flag = true;
          break;
        default:
          if (key === "*") {
            expandAllSiblings(event, focusedNodeId);
            flag = true;
          } else if (multiSelect && ctrlPressed && key.toLowerCase() === "a" && !disableSelection) {
            selectAllNodes(event);
            flag = true;
          } else if (!ctrlPressed && !event.shiftKey && isPrintableCharacter(key)) {
            focusByFirstCharacter(event, focusedNodeId, key);
            flag = true;
          }
      }
      if (flag) {
        event.preventDefault();
        event.stopPropagation();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleFocus = (event) => {
      if (event.target === event.currentTarget) {
        const firstSelected = Array.isArray(selected) ? selected[0] : selected;
        focus(event, firstSelected || getNavigableChildrenIds(null)[0]);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    const handleBlur = (event) => {
      setFocusedNodeId(null);
      if (onBlur) {
        onBlur(event);
      }
    };
    const activeDescendant = nodeMap.current[focusedNodeId] ? nodeMap.current[focusedNodeId].idAttribute : null;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(TreeViewContext_default.Provider, {
      // TODO: fix this lint error
      // eslint-disable-next-line react/jsx-no-constructed-context-values
      value: {
        icons: {
          defaultCollapseIcon,
          defaultExpandIcon,
          defaultParentIcon,
          defaultEndIcon
        },
        focus,
        toggleExpansion,
        isExpanded,
        isExpandable,
        isFocused,
        isSelected,
        isDisabled,
        selectNode: disableSelection ? noopSelection : selectNode,
        selectRange: disableSelection ? noopSelection : selectRange,
        multiSelect,
        disabledItemsFocusable,
        mapFirstChar,
        unMapFirstChar,
        registerNode,
        unregisterNode,
        treeId
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(DescendantProvider, {
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(TreeViewRoot, {
          role: "tree",
          id: treeId,
          "aria-activedescendant": activeDescendant,
          "aria-multiselectable": multiSelect,
          className: (0, import_clsx.default)(classes.root, className),
          ref: handleRef,
          tabIndex: 0,
          onKeyDown: handleKeyDown,
          onFocus: handleFocus,
          onBlur: handleBlur,
          ownerState,
          ...other,
          children
        })
      })
    });
  });
  true ? TreeView.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types2.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types2.default.object,
    /**
     * @ignore
     */
    className: import_prop_types2.default.string,
    /**
     * The default icon used to collapse the node.
     */
    defaultCollapseIcon: import_prop_types2.default.node,
    /**
     * The default icon displayed next to a end node. This is applied to all
     * tree nodes and can be overridden by the TreeItem `icon` prop.
     */
    defaultEndIcon: import_prop_types2.default.node,
    /**
     * Expanded node ids. (Uncontrolled)
     * @default []
     */
    defaultExpanded: import_prop_types2.default.arrayOf(import_prop_types2.default.string),
    /**
     * The default icon used to expand the node.
     */
    defaultExpandIcon: import_prop_types2.default.node,
    /**
     * The default icon displayed next to a parent node. This is applied to all
     * parent nodes and can be overridden by the TreeItem `icon` prop.
     */
    defaultParentIcon: import_prop_types2.default.node,
    /**
     * Selected node ids. (Uncontrolled)
     * When `multiSelect` is true this takes an array of strings; when false (default) a string.
     * @default []
     */
    defaultSelected: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.string), import_prop_types2.default.string]),
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types2.default.bool,
    /**
     * If `true` selection is disabled.
     * @default false
     */
    disableSelection: import_prop_types2.default.bool,
    /**
     * Expanded node ids. (Controlled)
     */
    expanded: import_prop_types2.default.arrayOf(import_prop_types2.default.string),
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: import_prop_types2.default.string,
    /**
     * If true `ctrl` and `shift` will trigger multiselect.
     * @default false
     */
    multiSelect: import_prop_types2.default.bool,
    /**
     * @ignore
     */
    onBlur: import_prop_types2.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types2.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types2.default.func,
    /**
     * Callback fired when tree items are focused.
     *
     * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.
     * @param {string} value of the focused node.
     */
    onNodeFocus: import_prop_types2.default.func,
    /**
     * Callback fired when tree items are selected/unselected.
     *
     * @param {React.SyntheticEvent} event The event source of the callback
     * @param {string[] | string} nodeIds Ids of the selected nodes. When `multiSelect` is true
     * this is an array of strings; when false (default) a string.
     */
    onNodeSelect: import_prop_types2.default.func,
    /**
     * Callback fired when tree items are expanded/collapsed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {array} nodeIds The ids of the expanded nodes.
     */
    onNodeToggle: import_prop_types2.default.func,
    /**
     * Selected node ids. (Controlled)
     * When `multiSelect` is true this takes an array of strings; when false (default) a string.
     */
    selected: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.string), import_prop_types2.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object])
  } : void 0;
  var TreeView_default = TreeView;

  // src/tree_view.tsx
  var import_ExpandMore = __toESM(require_ExpandMore());
  var import_ChevronRight = __toESM(require_ChevronRight());

  // node_modules/@mui/lab/TreeItem/TreeItem.js
  var React14 = __toESM(require_react());
  var import_clsx4 = __toESM(require_clsx());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_utils15 = __toESM(require_utils());

  // node_modules/@mui/material/Collapse/Collapse.js
  var React11 = __toESM(require_react());
  var import_clsx2 = __toESM(require_clsx());
  var import_prop_types5 = __toESM(require_prop_types());

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types4 = __toESM(require_prop_types());
  var import_react5 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types3 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.shape({
    enter: import_prop_types3.default.number,
    exit: import_prop_types3.default.number,
    appear: import_prop_types3.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.shape({
    enter: import_prop_types3.default.string,
    exit: import_prop_types3.default.string,
    active: import_prop_types3.default.string
  }), import_prop_types3.default.shape({
    enter: import_prop_types3.default.string,
    enterDone: import_prop_types3.default.string,
    enterActive: import_prop_types3.default.string,
    exit: import_prop_types3.default.string,
    exitDone: import_prop_types3.default.string,
    exitActive: import_prop_types3.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react4 = __toESM(require_react());
  var TransitionGroupContext_default = import_react4.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node2)
              forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react5.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react5.default.cloneElement(import_react5.default.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(import_react5.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types4.default.shape({
      current: typeof Element === "undefined" ? import_prop_types4.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types4.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types4.default.oneOfType([import_prop_types4.default.func.isRequired, import_prop_types4.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types4.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types4.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types4.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types4.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types4.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types4.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types4.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types4.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types4.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types4.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types4.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types4.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types4.default.func
  } : {};
  function noop2() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop2,
    onEntering: noop2,
    onEntered: noop2,
    onExit: noop2,
    onExiting: noop2,
    onExited: noop2
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_utils12 = __toESM(require_utils());
  var import_base2 = __toESM(require_node3());

  // node_modules/@mui/material/transitions/utils.js
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout2,
      easing: easing2,
      style = {}
    } = props;
    return {
      duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style.transitionDelay
    };
  }

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_utils14 = __toESM(require_utils3());

  // node_modules/@mui/material/Collapse/collapseClasses.js
  var import_utils11 = __toESM(require_utils());
  var import_generateUtilityClass3 = __toESM(require_generateUtilityClass3());
  function getCollapseUtilityClass(slot) {
    return (0, import_generateUtilityClass3.default)("MuiCollapse", slot);
  }
  var collapseClasses = (0, import_utils11.unstable_generateUtilityClasses)("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]);

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var useUtilityClasses2 = (ownerState) => {
    const {
      orientation,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${orientation}`],
      entered: ["entered"],
      hidden: ["hidden"],
      wrapper: ["wrapper", `${orientation}`],
      wrapperInner: ["wrapperInner", `${orientation}`]
    };
    return (0, import_base2.unstable_composeClasses)(slots, getCollapseUtilityClass, classes);
  };
  var CollapseRoot = styled_default("div", {
    name: "MuiCollapse",
    slot: "Root",
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.orientation], ownerState.state === "entered" && styles.entered, ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && styles.hidden];
    }
  })(({
    theme,
    ownerState
  }) => ({
    height: 0,
    overflow: "hidden",
    transition: theme.transitions.create("height"),
    ...ownerState.orientation === "horizontal" && {
      height: "auto",
      width: 0,
      transition: theme.transitions.create("width")
    },
    ...ownerState.state === "entered" && {
      height: "auto",
      overflow: "visible",
      ...ownerState.orientation === "horizontal" && {
        width: "auto"
      }
    },
    ...ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && {
      visibility: "hidden"
    }
  }));
  var CollapseWrapper = styled_default("div", {
    name: "MuiCollapse",
    slot: "Wrapper",
    overridesResolver: (props, styles) => styles.wrapper
  })(({
    ownerState
  }) => ({
    // Hack to get children with a negative margin to not falsify the height computation.
    display: "flex",
    width: "100%",
    ...ownerState.orientation === "horizontal" && {
      width: "auto",
      height: "100%"
    }
  }));
  var CollapseWrapperInner = styled_default("div", {
    name: "MuiCollapse",
    slot: "WrapperInner",
    overridesResolver: (props, styles) => styles.wrapperInner
  })(({
    ownerState
  }) => ({
    width: "100%",
    ...ownerState.orientation === "horizontal" && {
      width: "auto",
      height: "100%"
    }
  }));
  var Collapse = /* @__PURE__ */ React11.forwardRef(function Collapse2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCollapse"
    });
    const {
      addEndListener,
      children,
      className,
      collapsedSize: collapsedSizeProp = "0px",
      component,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      orientation = "vertical",
      style,
      timeout: timeout2 = duration.standard,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default,
      ...other
    } = props;
    const ownerState = {
      ...props,
      orientation,
      collapsedSize: collapsedSizeProp
    };
    const classes = useUtilityClasses2(ownerState);
    const theme = useTheme3();
    const timer = React11.useRef();
    const wrapperRef = React11.useRef(null);
    const autoTransitionDuration = React11.useRef();
    const collapsedSize = typeof collapsedSizeProp === "number" ? `${collapsedSizeProp}px` : collapsedSizeProp;
    const isHorizontal = orientation === "horizontal";
    const size = isHorizontal ? "width" : "height";
    React11.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    const nodeRef = React11.useRef(null);
    const handleRef = (0, import_utils14.useForkRef)(ref, nodeRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? "clientWidth" : "clientHeight"] : 0;
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      if (wrapperRef.current && isHorizontal) {
        wrapperRef.current.style.position = "absolute";
      }
      node2.style[size] = collapsedSize;
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const wrapperSize = getWrapperSize();
      if (wrapperRef.current && isHorizontal) {
        wrapperRef.current.style.position = "";
      }
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      if (timeout2 === "auto") {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size] = `${wrapperSize}px`;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback((node2, isAppearing) => {
      node2.style[size] = "auto";
      if (onEntered) {
        onEntered(node2, isAppearing);
      }
    });
    const handleExit = normalizedTransitionCallback((node2) => {
      node2.style[size] = `${getWrapperSize()}px`;
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleExiting = normalizedTransitionCallback((node2) => {
      const wrapperSize = getWrapperSize();
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      if (timeout2 === "auto") {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size] = collapsedSize;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onExiting) {
        onExiting(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.current = setTimeout(next2, autoTransitionDuration.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(TransitionComponent, {
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      nodeRef,
      timeout: timeout2 === "auto" ? null : timeout2,
      ...other,
      children: (state, childProps) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CollapseRoot, {
        as: component,
        className: (0, import_clsx2.default)(classes.root, className, {
          "entered": classes.entered,
          "exited": !inProp && collapsedSize === "0px" && classes.hidden
        }[state]),
        style: {
          [isHorizontal ? "minWidth" : "minHeight"]: collapsedSize,
          ...style
        },
        ownerState: {
          ...ownerState,
          state
        },
        ref: handleRef,
        ...childProps,
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CollapseWrapper, {
          ownerState: {
            ...ownerState,
            state
          },
          className: classes.wrapper,
          ref: wrapperRef,
          children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CollapseWrapperInner, {
            ownerState: {
              ...ownerState,
              state
            },
            className: classes.wrapperInner,
            children
          })
        })
      })
    });
  });
  true ? Collapse.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types5.default.func,
    /**
     * The content node to be collapsed.
     */
    children: import_prop_types5.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types5.default.object,
    /**
     * @ignore
     */
    className: import_prop_types5.default.string,
    /**
     * The width (horizontal) or height (vertical) of the container when collapsed.
     * @default '0px'
     */
    collapsedSize: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_utils12.elementTypeAcceptingRef,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types5.default.oneOfType([import_prop_types5.default.shape({
      enter: import_prop_types5.default.string,
      exit: import_prop_types5.default.string
    }), import_prop_types5.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types5.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types5.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types5.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types5.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types5.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types5.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types5.default.func,
    /**
     * The transition orientation.
     * @default 'vertical'
     */
    orientation: import_prop_types5.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    style: import_prop_types5.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default duration.standard
     */
    timeout: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["auto"]), import_prop_types5.default.number, import_prop_types5.default.shape({
      appear: import_prop_types5.default.number,
      enter: import_prop_types5.default.number,
      exit: import_prop_types5.default.number
    })])
  } : void 0;
  Collapse.muiSupportAuto = true;
  var Collapse_default = Collapse;

  // node_modules/@mui/lab/TreeItem/TreeItem.js
  var import_utils16 = __toESM(require_utils3());
  var import_base3 = __toESM(require_node3());

  // node_modules/@mui/lab/TreeItem/TreeItemContent.js
  var React13 = __toESM(require_react());
  var import_clsx3 = __toESM(require_clsx());
  var import_prop_types6 = __toESM(require_prop_types());

  // node_modules/@mui/lab/TreeItem/useTreeItem.js
  var React12 = __toESM(require_react());
  function useTreeItem(nodeId) {
    const {
      focus,
      isExpanded,
      isExpandable,
      isFocused,
      isDisabled,
      isSelected,
      multiSelect,
      selectNode,
      selectRange,
      toggleExpansion
    } = React12.useContext(TreeViewContext_default);
    const expandable = isExpandable ? isExpandable(nodeId) : false;
    const expanded = isExpanded ? isExpanded(nodeId) : false;
    const focused = isFocused ? isFocused(nodeId) : false;
    const disabled = isDisabled ? isDisabled(nodeId) : false;
    const selected = isSelected ? isSelected(nodeId) : false;
    const handleExpansion = (event) => {
      if (!disabled) {
        if (!focused) {
          focus(event, nodeId);
        }
        const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);
        if (expandable && !(multiple && isExpanded(nodeId))) {
          toggleExpansion(event, nodeId);
        }
      }
    };
    const handleSelection = (event) => {
      if (!disabled) {
        if (!focused) {
          focus(event, nodeId);
        }
        const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);
        if (multiple) {
          if (event.shiftKey) {
            selectRange(event, {
              end: nodeId
            });
          } else {
            selectNode(event, nodeId, true);
          }
        } else {
          selectNode(event, nodeId);
        }
      }
    };
    const preventSelection = (event) => {
      if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {
        event.preventDefault();
      }
    };
    return {
      disabled,
      expanded,
      selected,
      focused,
      handleExpansion,
      handleSelection,
      preventSelection
    };
  }

  // node_modules/@mui/lab/TreeItem/TreeItemContent.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var TreeItemContent = /* @__PURE__ */ React13.forwardRef(function TreeItemContent2(props, ref) {
    const {
      classes,
      className,
      displayIcon,
      expansionIcon,
      icon: iconProp,
      label,
      nodeId,
      onClick,
      onMouseDown,
      ...other
    } = props;
    const {
      disabled,
      expanded,
      selected,
      focused,
      handleExpansion,
      handleSelection,
      preventSelection
    } = useTreeItem(nodeId);
    const icon = iconProp || expansionIcon || displayIcon;
    const handleMouseDown = (event) => {
      preventSelection(event);
      if (onMouseDown) {
        onMouseDown(event);
      }
    };
    const handleClick = (event) => {
      handleExpansion(event);
      handleSelection(event);
      if (onClick) {
        onClick(event);
      }
    };
    return (
      /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions -- Key event is handled by the TreeView */
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", {
        className: (0, import_clsx3.default)(className, classes.root, expanded && classes.expanded, selected && classes.selected, focused && classes.focused, disabled && classes.disabled),
        onClick: handleClick,
        onMouseDown: handleMouseDown,
        ref,
        ...other,
        children: [/* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", {
          className: classes.iconContainer,
          children: icon
        }), /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", {
          className: classes.label,
          children: label
        })]
      })
    );
  });
  true ? TreeItemContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: import_prop_types6.default.object,
    /**
     * className applied to the root element.
     */
    className: import_prop_types6.default.string,
    /**
     * The icon to display next to the tree node's label. Either a parent or end icon.
     */
    displayIcon: import_prop_types6.default.node,
    /**
     * The icon to display next to the tree node's label. Either an expansion or collapse icon.
     */
    expansionIcon: import_prop_types6.default.node,
    /**
     * The icon to display next to the tree node's label.
     */
    icon: import_prop_types6.default.node,
    /**
     * The tree node label.
     */
    label: import_prop_types6.default.node,
    /**
     * The id of the node.
     */
    nodeId: import_prop_types6.default.string.isRequired,
    /**
     * @ignore
     */
    onClick: import_prop_types6.default.func,
    /**
     * @ignore
     */
    onMouseDown: import_prop_types6.default.func
  } : void 0;
  var TreeItemContent_default = TreeItemContent;

  // node_modules/@mui/lab/TreeItem/treeItemClasses.js
  var import_generateUtilityClass4 = __toESM(require_generateUtilityClass3());
  function getTreeItemUtilityClass(slot) {
    return (0, import_generateUtilityClass4.default)("MuiTreeItem", slot);
  }
  var treeItemClasses = (0, import_utils9.unstable_generateUtilityClasses)("MuiTreeItem", ["root", "group", "content", "expanded", "selected", "focused", "disabled", "iconContainer", "label"]);
  var treeItemClasses_default = treeItemClasses;

  // node_modules/@mui/lab/TreeItem/TreeItem.js
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var useUtilityClasses3 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      content: ["content"],
      expanded: ["expanded"],
      selected: ["selected"],
      focused: ["focused"],
      disabled: ["disabled"],
      iconContainer: ["iconContainer"],
      label: ["label"],
      group: ["group"]
    };
    return (0, import_base3.unstable_composeClasses)(slots, getTreeItemUtilityClass, classes);
  };
  var TreeItemRoot = styled_default("li", {
    name: "MuiTreeItem",
    slot: "Root",
    overridesResolver: (props, styles) => styles.root
  })({
    listStyle: "none",
    margin: 0,
    padding: 0,
    outline: 0
  });
  var StyledTreeItemContent = styled_default(TreeItemContent_default, {
    name: "MuiTreeItem",
    slot: "Content",
    overridesResolver: (props, styles) => {
      return [styles.content, styles.iconContainer && {
        [`& .${treeItemClasses_default.iconContainer}`]: styles.iconContainer
      }, styles.label && {
        [`& .${treeItemClasses_default.label}`]: styles.label
      }];
    }
  })(({
    theme
  }) => ({
    padding: "0 8px",
    width: "100%",
    display: "flex",
    alignItems: "center",
    cursor: "pointer",
    WebkitTapHighlightColor: "transparent",
    "&:hover": {
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${treeItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity,
      backgroundColor: "transparent"
    },
    [`&.${treeItemClasses_default.focused}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${treeItemClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      },
      [`&.${treeItemClasses_default.focused}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`& .${treeItemClasses_default.iconContainer}`]: {
      marginRight: 4,
      width: 15,
      display: "flex",
      flexShrink: 0,
      justifyContent: "center",
      "& svg": {
        fontSize: 18
      }
    },
    [`& .${treeItemClasses_default.label}`]: {
      width: "100%",
      // fixes overflow - see https://github.com/mui/material-ui/issues/27372
      minWidth: 0,
      paddingLeft: 4,
      position: "relative",
      ...theme.typography.body1
    }
  }));
  var TreeItemGroup = styled_default(Collapse_default, {
    name: "MuiTreeItem",
    slot: "Group",
    overridesResolver: (props, styles) => styles.group
  })({
    margin: 0,
    padding: 0,
    marginLeft: 17
  });
  var TreeItem = /* @__PURE__ */ React14.forwardRef(function TreeItem2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTreeItem"
    });
    const {
      children,
      className,
      collapseIcon,
      ContentComponent = TreeItemContent_default,
      ContentProps,
      endIcon,
      expandIcon,
      disabled: disabledProp,
      icon,
      id: idProp,
      label,
      nodeId,
      onClick,
      onMouseDown,
      TransitionComponent = Collapse_default,
      TransitionProps,
      ...other
    } = props;
    const {
      icons: contextIcons = {},
      focus,
      isExpanded,
      isFocused,
      isSelected,
      isDisabled,
      multiSelect,
      disabledItemsFocusable,
      mapFirstChar,
      unMapFirstChar,
      registerNode,
      unregisterNode,
      treeId
    } = React14.useContext(TreeViewContext_default);
    let id = null;
    if (idProp != null) {
      id = idProp;
    } else if (treeId && nodeId) {
      id = `${treeId}-${nodeId}`;
    }
    const [treeitemElement, setTreeitemElement] = React14.useState(null);
    const contentRef = React14.useRef(null);
    const handleRef = (0, import_utils16.useForkRef)(setTreeitemElement, ref);
    const descendant = React14.useMemo(() => ({
      element: treeitemElement,
      id: nodeId
    }), [nodeId, treeitemElement]);
    const {
      index,
      parentId
    } = useDescendant(descendant);
    const expandable = Boolean(Array.isArray(children) ? children.length : children);
    const expanded = isExpanded ? isExpanded(nodeId) : false;
    const focused = isFocused ? isFocused(nodeId) : false;
    const selected = isSelected ? isSelected(nodeId) : false;
    const disabled = isDisabled ? isDisabled(nodeId) : false;
    const ownerState = {
      ...props,
      expanded,
      focused,
      selected,
      disabled
    };
    const classes = useUtilityClasses3(ownerState);
    let displayIcon;
    let expansionIcon;
    if (expandable) {
      if (!expanded) {
        expansionIcon = expandIcon || contextIcons.defaultExpandIcon;
      } else {
        expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;
      }
    }
    if (expandable) {
      displayIcon = contextIcons.defaultParentIcon;
    } else {
      displayIcon = endIcon || contextIcons.defaultEndIcon;
    }
    React14.useEffect(() => {
      if (registerNode && unregisterNode && index !== -1) {
        registerNode({
          id: nodeId,
          idAttribute: id,
          index,
          parentId,
          expandable,
          disabled: disabledProp
        });
        return () => {
          unregisterNode(nodeId);
        };
      }
      return void 0;
    }, [registerNode, unregisterNode, parentId, index, nodeId, expandable, disabledProp, id]);
    React14.useEffect(() => {
      if (mapFirstChar && unMapFirstChar && label) {
        mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());
        return () => {
          unMapFirstChar(nodeId);
        };
      }
      return void 0;
    }, [mapFirstChar, unMapFirstChar, nodeId, label]);
    let ariaSelected;
    if (multiSelect) {
      ariaSelected = selected;
    } else if (selected) {
      ariaSelected = true;
    }
    function handleFocus(event) {
      if (event.target === event.currentTarget) {
        let rootElement;
        if (typeof event.target.getRootNode === "function") {
          rootElement = event.target.getRootNode();
        } else {
          rootElement = (0, import_utils16.ownerDocument)(event.target);
        }
        rootElement.getElementById(treeId).focus({
          preventScroll: true
        });
      }
      const unfocusable = !disabledItemsFocusable && disabled;
      if (!focused && event.currentTarget === event.target && !unfocusable) {
        focus(event, nodeId);
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(TreeItemRoot, {
      className: (0, import_clsx4.default)(classes.root, className),
      role: "treeitem",
      "aria-expanded": expandable ? expanded : null,
      "aria-selected": ariaSelected,
      "aria-disabled": disabled || null,
      ref: handleRef,
      id,
      tabIndex: -1,
      ...other,
      ownerState,
      onFocus: handleFocus,
      children: [/* @__PURE__ */ (0, import_jsx_runtime6.jsx)(StyledTreeItemContent, {
        as: ContentComponent,
        ref: contentRef,
        classes: {
          root: classes.content,
          expanded: classes.expanded,
          selected: classes.selected,
          focused: classes.focused,
          disabled: classes.disabled,
          iconContainer: classes.iconContainer,
          label: classes.label
        },
        label,
        nodeId,
        onClick,
        onMouseDown,
        icon,
        expansionIcon,
        displayIcon,
        ownerState,
        ...ContentProps
      }), children && /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(DescendantProvider, {
        id: nodeId,
        children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(TreeItemGroup, {
          as: TransitionComponent,
          unmountOnExit: true,
          className: classes.group,
          in: expanded,
          component: "ul",
          role: "group",
          ...TransitionProps,
          children
        })
      })]
    });
  });
  true ? TreeItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types7.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types7.default.object,
    /**
     * @ignore
     */
    className: import_prop_types7.default.string,
    /**
     * The icon used to collapse the node.
     */
    collapseIcon: import_prop_types7.default.node,
    /**
     * The component used for the content node.
     * @default TreeItemContent
     */
    ContentComponent: import_utils15.elementTypeAcceptingRef,
    /**
     * Props applied to ContentComponent
     */
    ContentProps: import_prop_types7.default.object,
    /**
     * If `true`, the node is disabled.
     * @default false
     */
    disabled: import_prop_types7.default.bool,
    /**
     * The icon displayed next to a end node.
     */
    endIcon: import_prop_types7.default.node,
    /**
     * The icon used to expand the node.
     */
    expandIcon: import_prop_types7.default.node,
    /**
     * The icon to display next to the tree node's label.
     */
    icon: import_prop_types7.default.node,
    /**
     * @ignore
     */
    id: import_prop_types7.default.string,
    /**
     * The tree node label.
     */
    label: import_prop_types7.default.node,
    /**
     * The id of the node.
     */
    nodeId: import_prop_types7.default.string.isRequired,
    /**
     * @ignore
     */
    onClick: import_prop_types7.default.func,
    /**
     * This prop isn't supported.
     * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.
     */
    onFocus: import_utils16.unsupportedProp,
    /**
     * @ignore
     */
    onMouseDown: import_prop_types7.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Collapse
     */
    TransitionComponent: import_prop_types7.default.elementType,
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types7.default.object
  } : void 0;
  var TreeItem_default = TreeItem;

  // src/tree_view.tsx
  var RenderTree = ({ node: node2, onClick }) => {
    const handleClick = (0, import_react6.useCallback)((_event) => {
      onClick(node2);
    }, [node2]);
    return /* @__PURE__ */ React15.createElement(
      TreeItem_default,
      {
        nodeId: node2.name,
        label: node2.label,
        onClick: handleClick
      },
      node2.children ? Object.values(node2.children).map((node3) => /* @__PURE__ */ React15.createElement(RenderTree, { key: node3.path, node: node3, onClick })) : null
    );
  };
  var RichObjectTreeView = ({ data, onClick }) => /* @__PURE__ */ React15.createElement(
    TreeView_default,
    {
      "aria-label": "rich object",
      defaultCollapseIcon: /* @__PURE__ */ React15.createElement(import_ExpandMore.default, null),
      defaultExpandIcon: /* @__PURE__ */ React15.createElement(import_ChevronRight.default, null)
    },
    Object.values(data).map((node2) => /* @__PURE__ */ React15.createElement(RenderTree, { key: node2.path, node: node2, onClick }))
  );
  var MembraneComponentTree = class {
    constructor({ domNode, onClick }) {
      this.data = {};
      this.root = (0, import_client.createRoot)(domNode);
      this._renderTree();
      this.onClick = onClick || (() => {
      });
    }
    update(add, remove) {
      add.forEach(({ name, id, label, parent_path, type }) => {
        let children = this.data;
        parent_path.forEach((parent) => {
          children = children[parent].children;
        });
        children[name] = {
          name,
          id,
          label,
          path: [...parent_path, name],
          type,
          children: {}
        };
      });
      remove.forEach(({ name, parent_path }) => {
        let children = this.data;
        parent_path.forEach((parent) => children = children[parent].children);
        delete children[name];
      });
      this._renderTree();
    }
    _renderTree() {
      this.root.render(/* @__PURE__ */ React15.createElement(RichObjectTreeView, { data: this.data, onClick: this.onClick }));
    }
  };
  window.MembraneComponentTree = MembraneComponentTree;
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/utils/index.js:
  (**
   * @mui/utils v5.13.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/node/index.js:
  (**
   * @mui/styled-engine v5.12.3
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/private-theming/node/index.js:
  (**
   * @mui/private-theming v5.13.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/system/index.js:
  (**
   * @mui/system v5.13.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/base/node/index.js:
  (**
   * @mui/base v5.0.0-beta.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
